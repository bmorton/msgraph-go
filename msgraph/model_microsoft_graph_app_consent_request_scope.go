/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
)

// MicrosoftGraphAppConsentRequestScope struct for MicrosoftGraphAppConsentRequestScope
type MicrosoftGraphAppConsentRequestScope struct {
	// The name of the scope.
	DisplayName NullableString `json:"displayName,omitempty"`
}

// NewMicrosoftGraphAppConsentRequestScope instantiates a new MicrosoftGraphAppConsentRequestScope object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMicrosoftGraphAppConsentRequestScope() *MicrosoftGraphAppConsentRequestScope {
	this := MicrosoftGraphAppConsentRequestScope{}
	return &this
}

// NewMicrosoftGraphAppConsentRequestScopeWithDefaults instantiates a new MicrosoftGraphAppConsentRequestScope object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMicrosoftGraphAppConsentRequestScopeWithDefaults() *MicrosoftGraphAppConsentRequestScope {
	this := MicrosoftGraphAppConsentRequestScope{}
	return &this
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphAppConsentRequestScope) GetDisplayName() string {
	if o == nil || o.DisplayName.Get() == nil {
		var ret string
		return ret
	}
	return *o.DisplayName.Get()
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphAppConsentRequestScope) GetDisplayNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DisplayName.Get(), o.DisplayName.IsSet()
}

// HasDisplayName returns a boolean if a field has been set.
func (o *MicrosoftGraphAppConsentRequestScope) HasDisplayName() bool {
	if o != nil && o.DisplayName.IsSet() {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given NullableString and assigns it to the DisplayName field.
func (o *MicrosoftGraphAppConsentRequestScope) SetDisplayName(v string) {
	o.DisplayName.Set(&v)
}
// SetDisplayNameNil sets the value for DisplayName to be an explicit nil
func (o *MicrosoftGraphAppConsentRequestScope) SetDisplayNameNil() {
	o.DisplayName.Set(nil)
}

// UnsetDisplayName ensures that no value is present for DisplayName, not even an explicit nil
func (o *MicrosoftGraphAppConsentRequestScope) UnsetDisplayName() {
	o.DisplayName.Unset()
}

func (o MicrosoftGraphAppConsentRequestScope) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DisplayName.IsSet() {
		toSerialize["displayName"] = o.DisplayName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableMicrosoftGraphAppConsentRequestScope struct {
	value *MicrosoftGraphAppConsentRequestScope
	isSet bool
}

func (v NullableMicrosoftGraphAppConsentRequestScope) Get() *MicrosoftGraphAppConsentRequestScope {
	return v.value
}

func (v *NullableMicrosoftGraphAppConsentRequestScope) Set(val *MicrosoftGraphAppConsentRequestScope) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphAppConsentRequestScope) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphAppConsentRequestScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphAppConsentRequestScope(val *MicrosoftGraphAppConsentRequestScope) *NullableMicrosoftGraphAppConsentRequestScope {
	return &NullableMicrosoftGraphAppConsentRequestScope{value: val, isSet: true}
}

func (v NullableMicrosoftGraphAppConsentRequestScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphAppConsentRequestScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


