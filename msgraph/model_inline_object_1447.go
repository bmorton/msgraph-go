/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineObject1447 struct for InlineObject1447
type InlineObject1447 struct {
	Text AnyOfobject `json:"text,omitempty"`
	DecimalSeparator AnyOfobject `json:"decimalSeparator,omitempty"`
	GroupSeparator AnyOfobject `json:"groupSeparator,omitempty"`
}

// NewInlineObject1447 instantiates a new InlineObject1447 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject1447() *InlineObject1447 {
	this := InlineObject1447{}
	return &this
}

// NewInlineObject1447WithDefaults instantiates a new InlineObject1447 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject1447WithDefaults() *InlineObject1447 {
	this := InlineObject1447{}
	return &this
}

// GetText returns the Text field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1447) GetText() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1447) GetTextOk() (*AnyOfobject, bool) {
	if o == nil || o.Text == nil {
		return nil, false
	}
	return &o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *InlineObject1447) HasText() bool {
	if o != nil && o.Text != nil {
		return true
	}

	return false
}

// SetText gets a reference to the given AnyOfobject and assigns it to the Text field.
func (o *InlineObject1447) SetText(v AnyOfobject) {
	o.Text = v
}

// GetDecimalSeparator returns the DecimalSeparator field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1447) GetDecimalSeparator() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.DecimalSeparator
}

// GetDecimalSeparatorOk returns a tuple with the DecimalSeparator field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1447) GetDecimalSeparatorOk() (*AnyOfobject, bool) {
	if o == nil || o.DecimalSeparator == nil {
		return nil, false
	}
	return &o.DecimalSeparator, true
}

// HasDecimalSeparator returns a boolean if a field has been set.
func (o *InlineObject1447) HasDecimalSeparator() bool {
	if o != nil && o.DecimalSeparator != nil {
		return true
	}

	return false
}

// SetDecimalSeparator gets a reference to the given AnyOfobject and assigns it to the DecimalSeparator field.
func (o *InlineObject1447) SetDecimalSeparator(v AnyOfobject) {
	o.DecimalSeparator = v
}

// GetGroupSeparator returns the GroupSeparator field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1447) GetGroupSeparator() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.GroupSeparator
}

// GetGroupSeparatorOk returns a tuple with the GroupSeparator field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1447) GetGroupSeparatorOk() (*AnyOfobject, bool) {
	if o == nil || o.GroupSeparator == nil {
		return nil, false
	}
	return &o.GroupSeparator, true
}

// HasGroupSeparator returns a boolean if a field has been set.
func (o *InlineObject1447) HasGroupSeparator() bool {
	if o != nil && o.GroupSeparator != nil {
		return true
	}

	return false
}

// SetGroupSeparator gets a reference to the given AnyOfobject and assigns it to the GroupSeparator field.
func (o *InlineObject1447) SetGroupSeparator(v AnyOfobject) {
	o.GroupSeparator = v
}

func (o InlineObject1447) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Text != nil {
		toSerialize["text"] = o.Text
	}
	if o.DecimalSeparator != nil {
		toSerialize["decimalSeparator"] = o.DecimalSeparator
	}
	if o.GroupSeparator != nil {
		toSerialize["groupSeparator"] = o.GroupSeparator
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject1447 struct {
	value *InlineObject1447
	isSet bool
}

func (v NullableInlineObject1447) Get() *InlineObject1447 {
	return v.value
}

func (v *NullableInlineObject1447) Set(val *InlineObject1447) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject1447) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject1447) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject1447(val *InlineObject1447) *NullableInlineObject1447 {
	return &NullableInlineObject1447{value: val, isSet: true}
}

func (v NullableInlineObject1447) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject1447) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


