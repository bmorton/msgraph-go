/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ConditionalAccessRoot struct for ConditionalAccessRoot
type ConditionalAccessRoot struct {
	// Read-only. Nullable. Returns a collection of the specified named locations.
	NamedLocations *[]MicrosoftGraphNamedLocation `json:"namedLocations,omitempty"`
	// Read-only. Nullable. Returns a collection of the specified Conditional Access (CA) policies.
	Policies *[]MicrosoftGraphConditionalAccessPolicy `json:"policies,omitempty"`
}

// NewConditionalAccessRoot instantiates a new ConditionalAccessRoot object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConditionalAccessRoot() *ConditionalAccessRoot {
	this := ConditionalAccessRoot{}
	return &this
}

// NewConditionalAccessRootWithDefaults instantiates a new ConditionalAccessRoot object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConditionalAccessRootWithDefaults() *ConditionalAccessRoot {
	this := ConditionalAccessRoot{}
	return &this
}

// GetNamedLocations returns the NamedLocations field value if set, zero value otherwise.
func (o *ConditionalAccessRoot) GetNamedLocations() []MicrosoftGraphNamedLocation {
	if o == nil || o.NamedLocations == nil {
		var ret []MicrosoftGraphNamedLocation
		return ret
	}
	return *o.NamedLocations
}

// GetNamedLocationsOk returns a tuple with the NamedLocations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionalAccessRoot) GetNamedLocationsOk() (*[]MicrosoftGraphNamedLocation, bool) {
	if o == nil || o.NamedLocations == nil {
		return nil, false
	}
	return o.NamedLocations, true
}

// HasNamedLocations returns a boolean if a field has been set.
func (o *ConditionalAccessRoot) HasNamedLocations() bool {
	if o != nil && o.NamedLocations != nil {
		return true
	}

	return false
}

// SetNamedLocations gets a reference to the given []MicrosoftGraphNamedLocation and assigns it to the NamedLocations field.
func (o *ConditionalAccessRoot) SetNamedLocations(v []MicrosoftGraphNamedLocation) {
	o.NamedLocations = &v
}

// GetPolicies returns the Policies field value if set, zero value otherwise.
func (o *ConditionalAccessRoot) GetPolicies() []MicrosoftGraphConditionalAccessPolicy {
	if o == nil || o.Policies == nil {
		var ret []MicrosoftGraphConditionalAccessPolicy
		return ret
	}
	return *o.Policies
}

// GetPoliciesOk returns a tuple with the Policies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionalAccessRoot) GetPoliciesOk() (*[]MicrosoftGraphConditionalAccessPolicy, bool) {
	if o == nil || o.Policies == nil {
		return nil, false
	}
	return o.Policies, true
}

// HasPolicies returns a boolean if a field has been set.
func (o *ConditionalAccessRoot) HasPolicies() bool {
	if o != nil && o.Policies != nil {
		return true
	}

	return false
}

// SetPolicies gets a reference to the given []MicrosoftGraphConditionalAccessPolicy and assigns it to the Policies field.
func (o *ConditionalAccessRoot) SetPolicies(v []MicrosoftGraphConditionalAccessPolicy) {
	o.Policies = &v
}

func (o ConditionalAccessRoot) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.NamedLocations != nil {
		toSerialize["namedLocations"] = o.NamedLocations
	}
	if o.Policies != nil {
		toSerialize["policies"] = o.Policies
	}
	return json.Marshal(toSerialize)
}

type NullableConditionalAccessRoot struct {
	value *ConditionalAccessRoot
	isSet bool
}

func (v NullableConditionalAccessRoot) Get() *ConditionalAccessRoot {
	return v.value
}

func (v *NullableConditionalAccessRoot) Set(val *ConditionalAccessRoot) {
	v.value = val
	v.isSet = true
}

func (v NullableConditionalAccessRoot) IsSet() bool {
	return v.isSet
}

func (v *NullableConditionalAccessRoot) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConditionalAccessRoot(val *ConditionalAccessRoot) *NullableConditionalAccessRoot {
	return &NullableConditionalAccessRoot{value: val, isSet: true}
}

func (v NullableConditionalAccessRoot) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConditionalAccessRoot) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


