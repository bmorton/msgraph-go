/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

// SearchSearchEntityApiService SearchSearchEntityApi service
type SearchSearchEntityApiService service

type ApiSearchSearchEntityGetSearchEntityRequest struct {
	ctx _context.Context
	ApiService *SearchSearchEntityApiService
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSearchSearchEntityGetSearchEntityRequest) Select_(select_ []string) ApiSearchSearchEntityGetSearchEntityRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSearchSearchEntityGetSearchEntityRequest) Expand(expand []string) ApiSearchSearchEntityGetSearchEntityRequest {
	r.expand = &expand
	return r
}

func (r ApiSearchSearchEntityGetSearchEntityRequest) Execute() (MicrosoftGraphSearchEntity, *_nethttp.Response, error) {
	return r.ApiService.SearchSearchEntityGetSearchEntityExecute(r)
}

/*
SearchSearchEntityGetSearchEntity Get search

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSearchSearchEntityGetSearchEntityRequest
*/
func (a *SearchSearchEntityApiService) SearchSearchEntityGetSearchEntity(ctx _context.Context) ApiSearchSearchEntityGetSearchEntityRequest {
	return ApiSearchSearchEntityGetSearchEntityRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSearchEntity
func (a *SearchSearchEntityApiService) SearchSearchEntityGetSearchEntityExecute(r ApiSearchSearchEntityGetSearchEntityRequest) (MicrosoftGraphSearchEntity, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSearchEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SearchSearchEntityApiService.SearchSearchEntityGetSearchEntity")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchSearchEntityUpdateSearchEntityRequest struct {
	ctx _context.Context
	ApiService *SearchSearchEntityApiService
	microsoftGraphSearchEntity *MicrosoftGraphSearchEntity
}

// New property values
func (r ApiSearchSearchEntityUpdateSearchEntityRequest) MicrosoftGraphSearchEntity(microsoftGraphSearchEntity MicrosoftGraphSearchEntity) ApiSearchSearchEntityUpdateSearchEntityRequest {
	r.microsoftGraphSearchEntity = &microsoftGraphSearchEntity
	return r
}

func (r ApiSearchSearchEntityUpdateSearchEntityRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SearchSearchEntityUpdateSearchEntityExecute(r)
}

/*
SearchSearchEntityUpdateSearchEntity Update search

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSearchSearchEntityUpdateSearchEntityRequest
*/
func (a *SearchSearchEntityApiService) SearchSearchEntityUpdateSearchEntity(ctx _context.Context) ApiSearchSearchEntityUpdateSearchEntityRequest {
	return ApiSearchSearchEntityUpdateSearchEntityRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *SearchSearchEntityApiService) SearchSearchEntityUpdateSearchEntityExecute(r ApiSearchSearchEntityUpdateSearchEntityRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SearchSearchEntityApiService.SearchSearchEntityUpdateSearchEntity")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSearchEntity == nil {
		return nil, reportError("microsoftGraphSearchEntity is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSearchEntity
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
