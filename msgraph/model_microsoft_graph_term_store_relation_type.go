/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphTermStoreRelationType the model 'MicrosoftGraphTermStoreRelationType'
type MicrosoftGraphTermStoreRelationType string

// List of microsoft.graph.termStore.relationType
const (
	PIN MicrosoftGraphTermStoreRelationType = "pin"
	REUSE MicrosoftGraphTermStoreRelationType = "reuse"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphTermStoreRelationType = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphTermStoreRelationType enum
var AllowedMicrosoftGraphTermStoreRelationTypeEnumValues = []MicrosoftGraphTermStoreRelationType{
	"pin",
	"reuse",
	"unknownFutureValue",
}

func (v *MicrosoftGraphTermStoreRelationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphTermStoreRelationType(value)
	for _, existing := range AllowedMicrosoftGraphTermStoreRelationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphTermStoreRelationType", value)
}

// NewMicrosoftGraphTermStoreRelationTypeFromValue returns a pointer to a valid MicrosoftGraphTermStoreRelationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphTermStoreRelationTypeFromValue(v string) (*MicrosoftGraphTermStoreRelationType, error) {
	ev := MicrosoftGraphTermStoreRelationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphTermStoreRelationType: valid values are %v", v, AllowedMicrosoftGraphTermStoreRelationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphTermStoreRelationType) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphTermStoreRelationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.termStore.relationType value
func (v MicrosoftGraphTermStoreRelationType) Ptr() *MicrosoftGraphTermStoreRelationType {
	return &v
}

type NullableMicrosoftGraphTermStoreRelationType struct {
	value *MicrosoftGraphTermStoreRelationType
	isSet bool
}

func (v NullableMicrosoftGraphTermStoreRelationType) Get() *MicrosoftGraphTermStoreRelationType {
	return v.value
}

func (v *NullableMicrosoftGraphTermStoreRelationType) Set(val *MicrosoftGraphTermStoreRelationType) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphTermStoreRelationType) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphTermStoreRelationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphTermStoreRelationType(val *MicrosoftGraphTermStoreRelationType) *NullableMicrosoftGraphTermStoreRelationType {
	return &NullableMicrosoftGraphTermStoreRelationType{value: val, isSet: true}
}

func (v NullableMicrosoftGraphTermStoreRelationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphTermStoreRelationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

