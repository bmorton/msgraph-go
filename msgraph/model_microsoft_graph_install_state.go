/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphInstallState Possible values for install state.
type MicrosoftGraphInstallState string

// List of microsoft.graph.installState
const (
	NOT_APPLICABLE MicrosoftGraphInstallState = "notApplicable"
	INSTALLED MicrosoftGraphInstallState = "installed"
	FAILED MicrosoftGraphInstallState = "failed"
	NOT_INSTALLED MicrosoftGraphInstallState = "notInstalled"
	UNINSTALL_FAILED MicrosoftGraphInstallState = "uninstallFailed"
	UNKNOWN MicrosoftGraphInstallState = "unknown"
)

// All allowed values of MicrosoftGraphInstallState enum
var AllowedMicrosoftGraphInstallStateEnumValues = []MicrosoftGraphInstallState{
	"notApplicable",
	"installed",
	"failed",
	"notInstalled",
	"uninstallFailed",
	"unknown",
}

func (v *MicrosoftGraphInstallState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphInstallState(value)
	for _, existing := range AllowedMicrosoftGraphInstallStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphInstallState", value)
}

// NewMicrosoftGraphInstallStateFromValue returns a pointer to a valid MicrosoftGraphInstallState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphInstallStateFromValue(v string) (*MicrosoftGraphInstallState, error) {
	ev := MicrosoftGraphInstallState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphInstallState: valid values are %v", v, AllowedMicrosoftGraphInstallStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphInstallState) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphInstallStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.installState value
func (v MicrosoftGraphInstallState) Ptr() *MicrosoftGraphInstallState {
	return &v
}

type NullableMicrosoftGraphInstallState struct {
	value *MicrosoftGraphInstallState
	isSet bool
}

func (v NullableMicrosoftGraphInstallState) Get() *MicrosoftGraphInstallState {
	return v.value
}

func (v *NullableMicrosoftGraphInstallState) Set(val *MicrosoftGraphInstallState) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphInstallState) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphInstallState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphInstallState(val *MicrosoftGraphInstallState) *NullableMicrosoftGraphInstallState {
	return &NullableMicrosoftGraphInstallState{value: val, isSet: true}
}

func (v NullableMicrosoftGraphInstallState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphInstallState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

