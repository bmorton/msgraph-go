/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphMobileAppPublishingState Indicates the publishing state of an app.
type MicrosoftGraphMobileAppPublishingState string

// List of microsoft.graph.mobileAppPublishingState
const (
	NOT_PUBLISHED MicrosoftGraphMobileAppPublishingState = "notPublished"
	PROCESSING MicrosoftGraphMobileAppPublishingState = "processing"
	PUBLISHED MicrosoftGraphMobileAppPublishingState = "published"
)

// All allowed values of MicrosoftGraphMobileAppPublishingState enum
var AllowedMicrosoftGraphMobileAppPublishingStateEnumValues = []MicrosoftGraphMobileAppPublishingState{
	"notPublished",
	"processing",
	"published",
}

func (v *MicrosoftGraphMobileAppPublishingState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphMobileAppPublishingState(value)
	for _, existing := range AllowedMicrosoftGraphMobileAppPublishingStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphMobileAppPublishingState", value)
}

// NewMicrosoftGraphMobileAppPublishingStateFromValue returns a pointer to a valid MicrosoftGraphMobileAppPublishingState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphMobileAppPublishingStateFromValue(v string) (*MicrosoftGraphMobileAppPublishingState, error) {
	ev := MicrosoftGraphMobileAppPublishingState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphMobileAppPublishingState: valid values are %v", v, AllowedMicrosoftGraphMobileAppPublishingStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphMobileAppPublishingState) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphMobileAppPublishingStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.mobileAppPublishingState value
func (v MicrosoftGraphMobileAppPublishingState) Ptr() *MicrosoftGraphMobileAppPublishingState {
	return &v
}

type NullableMicrosoftGraphMobileAppPublishingState struct {
	value *MicrosoftGraphMobileAppPublishingState
	isSet bool
}

func (v NullableMicrosoftGraphMobileAppPublishingState) Get() *MicrosoftGraphMobileAppPublishingState {
	return v.value
}

func (v *NullableMicrosoftGraphMobileAppPublishingState) Set(val *MicrosoftGraphMobileAppPublishingState) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphMobileAppPublishingState) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphMobileAppPublishingState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphMobileAppPublishingState(val *MicrosoftGraphMobileAppPublishingState) *NullableMicrosoftGraphMobileAppPublishingState {
	return &NullableMicrosoftGraphMobileAppPublishingState{value: val, isSet: true}
}

func (v NullableMicrosoftGraphMobileAppPublishingState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphMobileAppPublishingState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

