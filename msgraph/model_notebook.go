/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
)

// Notebook struct for Notebook
type Notebook struct {
	// Indicates whether this is the user's default notebook. Read-only.
	IsDefault NullableBool `json:"isDefault,omitempty"`
	// Indicates whether the notebook is shared. If true, the contents of the notebook can be seen by people other than the owner. Read-only.
	IsShared NullableBool `json:"isShared,omitempty"`
	// Links for opening the notebook. The oneNoteClientURL link opens the notebook in the OneNote native client if it's installed. The oneNoteWebURL link opens the notebook in OneNote on the web.
	Links AnyOfmicrosoftGraphNotebookLinks `json:"links,omitempty"`
	// The URL for the sectionGroups navigation property, which returns all the section groups in the notebook. Read-only.
	SectionGroupsUrl NullableString `json:"sectionGroupsUrl,omitempty"`
	// The URL for the sections navigation property, which returns all the sections in the notebook. Read-only.
	SectionsUrl NullableString `json:"sectionsUrl,omitempty"`
	// Possible values are: Owner, Contributor, Reader, None. Owner represents owner-level access to the notebook. Contributor represents read/write access to the notebook. Reader represents read-only access to the notebook. Read-only.
	UserRole AnyOfmicrosoftGraphOnenoteUserRole `json:"userRole,omitempty"`
	// The section groups in the notebook. Read-only. Nullable.
	SectionGroups *[]MicrosoftGraphSectionGroup `json:"sectionGroups,omitempty"`
	// The sections in the notebook. Read-only. Nullable.
	Sections *[]MicrosoftGraphOnenoteSection `json:"sections,omitempty"`
}

// NewNotebook instantiates a new Notebook object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotebook() *Notebook {
	this := Notebook{}
	return &this
}

// NewNotebookWithDefaults instantiates a new Notebook object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotebookWithDefaults() *Notebook {
	this := Notebook{}
	return &this
}

// GetIsDefault returns the IsDefault field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notebook) GetIsDefault() bool {
	if o == nil || o.IsDefault.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsDefault.Get()
}

// GetIsDefaultOk returns a tuple with the IsDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notebook) GetIsDefaultOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsDefault.Get(), o.IsDefault.IsSet()
}

// HasIsDefault returns a boolean if a field has been set.
func (o *Notebook) HasIsDefault() bool {
	if o != nil && o.IsDefault.IsSet() {
		return true
	}

	return false
}

// SetIsDefault gets a reference to the given NullableBool and assigns it to the IsDefault field.
func (o *Notebook) SetIsDefault(v bool) {
	o.IsDefault.Set(&v)
}
// SetIsDefaultNil sets the value for IsDefault to be an explicit nil
func (o *Notebook) SetIsDefaultNil() {
	o.IsDefault.Set(nil)
}

// UnsetIsDefault ensures that no value is present for IsDefault, not even an explicit nil
func (o *Notebook) UnsetIsDefault() {
	o.IsDefault.Unset()
}

// GetIsShared returns the IsShared field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notebook) GetIsShared() bool {
	if o == nil || o.IsShared.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsShared.Get()
}

// GetIsSharedOk returns a tuple with the IsShared field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notebook) GetIsSharedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsShared.Get(), o.IsShared.IsSet()
}

// HasIsShared returns a boolean if a field has been set.
func (o *Notebook) HasIsShared() bool {
	if o != nil && o.IsShared.IsSet() {
		return true
	}

	return false
}

// SetIsShared gets a reference to the given NullableBool and assigns it to the IsShared field.
func (o *Notebook) SetIsShared(v bool) {
	o.IsShared.Set(&v)
}
// SetIsSharedNil sets the value for IsShared to be an explicit nil
func (o *Notebook) SetIsSharedNil() {
	o.IsShared.Set(nil)
}

// UnsetIsShared ensures that no value is present for IsShared, not even an explicit nil
func (o *Notebook) UnsetIsShared() {
	o.IsShared.Unset()
}

// GetLinks returns the Links field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notebook) GetLinks() AnyOfmicrosoftGraphNotebookLinks {
	if o == nil  {
		var ret AnyOfmicrosoftGraphNotebookLinks
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notebook) GetLinksOk() (*AnyOfmicrosoftGraphNotebookLinks, bool) {
	if o == nil || o.Links == nil {
		return nil, false
	}
	return &o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *Notebook) HasLinks() bool {
	if o != nil && o.Links != nil {
		return true
	}

	return false
}

// SetLinks gets a reference to the given AnyOfmicrosoftGraphNotebookLinks and assigns it to the Links field.
func (o *Notebook) SetLinks(v AnyOfmicrosoftGraphNotebookLinks) {
	o.Links = v
}

// GetSectionGroupsUrl returns the SectionGroupsUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notebook) GetSectionGroupsUrl() string {
	if o == nil || o.SectionGroupsUrl.Get() == nil {
		var ret string
		return ret
	}
	return *o.SectionGroupsUrl.Get()
}

// GetSectionGroupsUrlOk returns a tuple with the SectionGroupsUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notebook) GetSectionGroupsUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SectionGroupsUrl.Get(), o.SectionGroupsUrl.IsSet()
}

// HasSectionGroupsUrl returns a boolean if a field has been set.
func (o *Notebook) HasSectionGroupsUrl() bool {
	if o != nil && o.SectionGroupsUrl.IsSet() {
		return true
	}

	return false
}

// SetSectionGroupsUrl gets a reference to the given NullableString and assigns it to the SectionGroupsUrl field.
func (o *Notebook) SetSectionGroupsUrl(v string) {
	o.SectionGroupsUrl.Set(&v)
}
// SetSectionGroupsUrlNil sets the value for SectionGroupsUrl to be an explicit nil
func (o *Notebook) SetSectionGroupsUrlNil() {
	o.SectionGroupsUrl.Set(nil)
}

// UnsetSectionGroupsUrl ensures that no value is present for SectionGroupsUrl, not even an explicit nil
func (o *Notebook) UnsetSectionGroupsUrl() {
	o.SectionGroupsUrl.Unset()
}

// GetSectionsUrl returns the SectionsUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notebook) GetSectionsUrl() string {
	if o == nil || o.SectionsUrl.Get() == nil {
		var ret string
		return ret
	}
	return *o.SectionsUrl.Get()
}

// GetSectionsUrlOk returns a tuple with the SectionsUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notebook) GetSectionsUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SectionsUrl.Get(), o.SectionsUrl.IsSet()
}

// HasSectionsUrl returns a boolean if a field has been set.
func (o *Notebook) HasSectionsUrl() bool {
	if o != nil && o.SectionsUrl.IsSet() {
		return true
	}

	return false
}

// SetSectionsUrl gets a reference to the given NullableString and assigns it to the SectionsUrl field.
func (o *Notebook) SetSectionsUrl(v string) {
	o.SectionsUrl.Set(&v)
}
// SetSectionsUrlNil sets the value for SectionsUrl to be an explicit nil
func (o *Notebook) SetSectionsUrlNil() {
	o.SectionsUrl.Set(nil)
}

// UnsetSectionsUrl ensures that no value is present for SectionsUrl, not even an explicit nil
func (o *Notebook) UnsetSectionsUrl() {
	o.SectionsUrl.Unset()
}

// GetUserRole returns the UserRole field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notebook) GetUserRole() AnyOfmicrosoftGraphOnenoteUserRole {
	if o == nil  {
		var ret AnyOfmicrosoftGraphOnenoteUserRole
		return ret
	}
	return o.UserRole
}

// GetUserRoleOk returns a tuple with the UserRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notebook) GetUserRoleOk() (*AnyOfmicrosoftGraphOnenoteUserRole, bool) {
	if o == nil || o.UserRole == nil {
		return nil, false
	}
	return &o.UserRole, true
}

// HasUserRole returns a boolean if a field has been set.
func (o *Notebook) HasUserRole() bool {
	if o != nil && o.UserRole != nil {
		return true
	}

	return false
}

// SetUserRole gets a reference to the given AnyOfmicrosoftGraphOnenoteUserRole and assigns it to the UserRole field.
func (o *Notebook) SetUserRole(v AnyOfmicrosoftGraphOnenoteUserRole) {
	o.UserRole = v
}

// GetSectionGroups returns the SectionGroups field value if set, zero value otherwise.
func (o *Notebook) GetSectionGroups() []MicrosoftGraphSectionGroup {
	if o == nil || o.SectionGroups == nil {
		var ret []MicrosoftGraphSectionGroup
		return ret
	}
	return *o.SectionGroups
}

// GetSectionGroupsOk returns a tuple with the SectionGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notebook) GetSectionGroupsOk() (*[]MicrosoftGraphSectionGroup, bool) {
	if o == nil || o.SectionGroups == nil {
		return nil, false
	}
	return o.SectionGroups, true
}

// HasSectionGroups returns a boolean if a field has been set.
func (o *Notebook) HasSectionGroups() bool {
	if o != nil && o.SectionGroups != nil {
		return true
	}

	return false
}

// SetSectionGroups gets a reference to the given []MicrosoftGraphSectionGroup and assigns it to the SectionGroups field.
func (o *Notebook) SetSectionGroups(v []MicrosoftGraphSectionGroup) {
	o.SectionGroups = &v
}

// GetSections returns the Sections field value if set, zero value otherwise.
func (o *Notebook) GetSections() []MicrosoftGraphOnenoteSection {
	if o == nil || o.Sections == nil {
		var ret []MicrosoftGraphOnenoteSection
		return ret
	}
	return *o.Sections
}

// GetSectionsOk returns a tuple with the Sections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notebook) GetSectionsOk() (*[]MicrosoftGraphOnenoteSection, bool) {
	if o == nil || o.Sections == nil {
		return nil, false
	}
	return o.Sections, true
}

// HasSections returns a boolean if a field has been set.
func (o *Notebook) HasSections() bool {
	if o != nil && o.Sections != nil {
		return true
	}

	return false
}

// SetSections gets a reference to the given []MicrosoftGraphOnenoteSection and assigns it to the Sections field.
func (o *Notebook) SetSections(v []MicrosoftGraphOnenoteSection) {
	o.Sections = &v
}

func (o Notebook) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IsDefault.IsSet() {
		toSerialize["isDefault"] = o.IsDefault.Get()
	}
	if o.IsShared.IsSet() {
		toSerialize["isShared"] = o.IsShared.Get()
	}
	if o.Links != nil {
		toSerialize["links"] = o.Links
	}
	if o.SectionGroupsUrl.IsSet() {
		toSerialize["sectionGroupsUrl"] = o.SectionGroupsUrl.Get()
	}
	if o.SectionsUrl.IsSet() {
		toSerialize["sectionsUrl"] = o.SectionsUrl.Get()
	}
	if o.UserRole != nil {
		toSerialize["userRole"] = o.UserRole
	}
	if o.SectionGroups != nil {
		toSerialize["sectionGroups"] = o.SectionGroups
	}
	if o.Sections != nil {
		toSerialize["sections"] = o.Sections
	}
	return json.Marshal(toSerialize)
}

type NullableNotebook struct {
	value *Notebook
	isSet bool
}

func (v NullableNotebook) Get() *Notebook {
	return v.value
}

func (v *NullableNotebook) Set(val *Notebook) {
	v.value = val
	v.isSet = true
}

func (v NullableNotebook) IsSet() bool {
	return v.isSet
}

func (v *NullableNotebook) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotebook(val *Notebook) *NullableNotebook {
	return &NullableNotebook{value: val, isSet: true}
}

func (v NullableNotebook) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotebook) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


