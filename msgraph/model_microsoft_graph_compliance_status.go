/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphComplianceStatus the model 'MicrosoftGraphComplianceStatus'
type MicrosoftGraphComplianceStatus string

// List of microsoft.graph.complianceStatus
const (
	UNKNOWN MicrosoftGraphComplianceStatus = "unknown"
	NOT_APPLICABLE MicrosoftGraphComplianceStatus = "notApplicable"
	COMPLIANT MicrosoftGraphComplianceStatus = "compliant"
	REMEDIATED MicrosoftGraphComplianceStatus = "remediated"
	NON_COMPLIANT MicrosoftGraphComplianceStatus = "nonCompliant"
	ERROR MicrosoftGraphComplianceStatus = "error"
	CONFLICT MicrosoftGraphComplianceStatus = "conflict"
	NOT_ASSIGNED MicrosoftGraphComplianceStatus = "notAssigned"
)

// All allowed values of MicrosoftGraphComplianceStatus enum
var AllowedMicrosoftGraphComplianceStatusEnumValues = []MicrosoftGraphComplianceStatus{
	"unknown",
	"notApplicable",
	"compliant",
	"remediated",
	"nonCompliant",
	"error",
	"conflict",
	"notAssigned",
}

func (v *MicrosoftGraphComplianceStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphComplianceStatus(value)
	for _, existing := range AllowedMicrosoftGraphComplianceStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphComplianceStatus", value)
}

// NewMicrosoftGraphComplianceStatusFromValue returns a pointer to a valid MicrosoftGraphComplianceStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphComplianceStatusFromValue(v string) (*MicrosoftGraphComplianceStatus, error) {
	ev := MicrosoftGraphComplianceStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphComplianceStatus: valid values are %v", v, AllowedMicrosoftGraphComplianceStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphComplianceStatus) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphComplianceStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.complianceStatus value
func (v MicrosoftGraphComplianceStatus) Ptr() *MicrosoftGraphComplianceStatus {
	return &v
}

type NullableMicrosoftGraphComplianceStatus struct {
	value *MicrosoftGraphComplianceStatus
	isSet bool
}

func (v NullableMicrosoftGraphComplianceStatus) Get() *MicrosoftGraphComplianceStatus {
	return v.value
}

func (v *NullableMicrosoftGraphComplianceStatus) Set(val *MicrosoftGraphComplianceStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphComplianceStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphComplianceStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphComplianceStatus(val *MicrosoftGraphComplianceStatus) *NullableMicrosoftGraphComplianceStatus {
	return &NullableMicrosoftGraphComplianceStatus{value: val, isSet: true}
}

func (v NullableMicrosoftGraphComplianceStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphComplianceStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

