/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// MicrosoftGraphUser struct for MicrosoftGraphUser
type MicrosoftGraphUser struct {
	// Read-only.
	Id *string `json:"id,omitempty"`
	DeletedDateTime NullableTime `json:"deletedDateTime,omitempty"`
	// true if the account is enabled; otherwise, false. This property is required when a user is created. Returned only on $select. Supports $filter (eq, ne, not, and in).
	AccountEnabled NullableBool `json:"accountEnabled,omitempty"`
	// Sets the age group of the user. Allowed values: null, minor, notAdult and adult. Refer to the legal age group property definitions for further information. Returned only on $select. Supports $filter (eq, ne, not, and in).
	AgeGroup NullableString `json:"ageGroup,omitempty"`
	// The licenses that are assigned to the user, including inherited (group-based) licenses.  Not nullable. Returned only on $select. Supports $filter (eq and not).
	AssignedLicenses *[]MicrosoftGraphAssignedLicense `json:"assignedLicenses,omitempty"`
	// The plans that are assigned to the user. Read-only. Not nullable. Returned only on $select. Supports $filter (eq and not).
	AssignedPlans *[]MicrosoftGraphAssignedPlan `json:"assignedPlans,omitempty"`
	// The telephone numbers for the user. NOTE: Although this is a string collection, only one number can be set for this property. Read-only for users synced from on-premises directory. Returned by default. Supports $filter (eq, not, ge, le, startsWith).
	BusinessPhones *[]string `json:"businessPhones,omitempty"`
	// The city in which the user is located. Maximum length is 128 characters. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).
	City NullableString `json:"city,omitempty"`
	// The company name which the user is associated. This property can be useful for describing the company that an external user comes from. The maximum length of the company name is 64 characters.Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).
	CompanyName NullableString `json:"companyName,omitempty"`
	// Sets whether consent has been obtained for minors. Allowed values: null, granted, denied and notRequired. Refer to the legal age group property definitions for further information. Returned only on $select. Supports $filter (eq, ne, not, and in).
	ConsentProvidedForMinor NullableString `json:"consentProvidedForMinor,omitempty"`
	// The country/region in which the user is located; for example, US or UK. Maximum length is 128 characters. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).
	Country NullableString `json:"country,omitempty"`
	// The created date of the user object. Read-only. Returned only on $select. Supports $filter (eq, ne, not , ge, le, in).
	CreatedDateTime NullableTime `json:"createdDateTime,omitempty"`
	// Indicates whether the user account was created through one of the following methods:  As a regular school or work account (null). As an external account (Invitation). As a local account for an Azure Active Directory B2C tenant (LocalAccount). Through self-service sign-up by an internal user using email verification (EmailVerified). Through self-service sign-up by an external user signing up through a link that is part of a user flow (SelfServiceSignUp). Read-only.Returned only on $select. Supports $filter (eq, ne, not, in).
	CreationType NullableString `json:"creationType,omitempty"`
	// The name for the department in which the user works. Maximum length is 64 characters. Returned only on $select. Supports $filter (eq, ne, not , ge, le, in, and eq on null values).
	Department NullableString `json:"department,omitempty"`
	// The name displayed in the address book for the user. This is usually the combination of the user's first name, middle initial and last name. This property is required when a user is created and it cannot be cleared during updates. Maximum length is 256 characters. Returned by default. Supports $filter (eq, ne, not , ge, le, in, startsWith, and eq on null values), $orderBy, and $search.
	DisplayName NullableString `json:"displayName,omitempty"`
	// The date and time when the user was hired or will start work in case of a future hire. Returned only on $select. Supports $filter (eq, ne, not , ge, le, in).
	EmployeeHireDate NullableTime `json:"employeeHireDate,omitempty"`
	// The employee identifier assigned to the user by the organization. Returned only on $select. Supports $filter (eq, ne, not , ge, le, in, startsWith, and eq on null values).
	EmployeeId NullableString `json:"employeeId,omitempty"`
	// Represents organization data (e.g. division and costCenter) associated with a user. Returned only on $select. Supports $filter (eq, ne, not , ge, le, in).
	EmployeeOrgData AnyOfmicrosoftGraphEmployeeOrgData `json:"employeeOrgData,omitempty"`
	// Captures enterprise worker type. For example, Employee, Contractor, Consultant, or Vendor. Returned only on $select. Supports $filter (eq, ne, not , ge, le, in, startsWith).
	EmployeeType NullableString `json:"employeeType,omitempty"`
	// For an external user invited to the tenant using the invitation API, this property represents the invited user's invitation status. For invited users, the state can be PendingAcceptance or Accepted, or null for all other users. Returned only on $select. Supports $filter (eq, ne, not , in).
	ExternalUserState NullableString `json:"externalUserState,omitempty"`
	// Shows the timestamp for the latest change to the externalUserState property. Returned only on $select. Supports $filter (eq, ne, not , in).
	ExternalUserStateChangeDateTime NullableTime `json:"externalUserStateChangeDateTime,omitempty"`
	// The fax number of the user. Returned only on $select. Supports $filter (eq, ne, not , ge, le, in, startsWith, and eq on null values).
	FaxNumber NullableString `json:"faxNumber,omitempty"`
	// The given name (first name) of the user. Maximum length is 64 characters. Returned by default. Supports $filter (eq, ne, not , ge, le, in, startsWith, and eq on null values).
	GivenName NullableString `json:"givenName,omitempty"`
	// Represents the identities that can be used to sign in to this user account. An identity can be provided by Microsoft (also known as a local account), by organizations, or by social identity providers such as Facebook, Google, and Microsoft, and tied to a user account. May contain multiple items with the same signInType value. Returned only on $select. Supports $filter (eq) including on null values, only where the signInType is not userPrincipalName.
	Identities *[]*AnyOfmicrosoftGraphObjectIdentity `json:"identities,omitempty"`
	// The instant message voice over IP (VOIP) session initiation protocol (SIP) addresses for the user. Read-only. Returned only on $select. Supports $filter (eq, not, ge, le, startsWith).
	ImAddresses *[]*string `json:"imAddresses,omitempty"`
	// Do not use â€“ reserved for future use.
	IsResourceAccount NullableBool `json:"isResourceAccount,omitempty"`
	// The user's job title. Maximum length is 128 characters. Returned by default. Supports $filter (eq, ne, not , ge, le, in, startsWith, and eq on null values).
	JobTitle NullableString `json:"jobTitle,omitempty"`
	// The time when this Azure AD user last changed their password or when their password was created, whichever date the latest action was performed. The date and time information uses ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Returned only on $select.
	LastPasswordChangeDateTime NullableTime `json:"lastPasswordChangeDateTime,omitempty"`
	// Used by enterprise applications to determine the legal age group of the user. This property is read-only and calculated based on ageGroup and consentProvidedForMinor properties. Allowed values: null, minorWithOutParentalConsent, minorWithParentalConsent, minorNoParentalConsentRequired, notAdult and adult. Refer to the legal age group property definitions for further information. Returned only on $select.
	LegalAgeGroupClassification NullableString `json:"legalAgeGroupClassification,omitempty"`
	// State of license assignments for this user. Read-only. Returned only on $select.
	LicenseAssignmentStates *[]*AnyOfmicrosoftGraphLicenseAssignmentState `json:"licenseAssignmentStates,omitempty"`
	// The SMTP address for the user, for example, jeff@contoso.onmicrosoft.com.Changes to this property will also update the user's proxyAddresses collection to include the value as an SMTP address. For Azure AD B2C accounts, this property can be updated up to only ten times with unique SMTP addresses. This property cannot contain accent characters.Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, endsWith, and eq on null values).
	Mail NullableString `json:"mail,omitempty"`
	// The mail alias for the user. This property must be specified when a user is created. Maximum length is 64 characters. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).
	MailNickname NullableString `json:"mailNickname,omitempty"`
	// The primary cellular telephone number for the user. Read-only for users synced from on-premises directory. Maximum length is 64 characters. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).
	MobilePhone NullableString `json:"mobilePhone,omitempty"`
	// The office location in the user's place of business. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).
	OfficeLocation NullableString `json:"officeLocation,omitempty"`
	// Contains the on-premises Active Directory distinguished name or DN. The property is only populated for customers who are synchronizing their on-premises directory to Azure Active Directory via Azure AD Connect. Read-only. Returned only on $select.
	OnPremisesDistinguishedName NullableString `json:"onPremisesDistinguishedName,omitempty"`
	// Contains the on-premises domainFQDN, also called dnsDomainName synchronized from the on-premises directory. The property is only populated for customers who are synchronizing their on-premises directory to Azure Active Directory via Azure AD Connect. Read-only. Returned only on $select.
	OnPremisesDomainName NullableString `json:"onPremisesDomainName,omitempty"`
	// Contains extensionAttributes 1-15 for the user. Note that the individual extension attributes are neither selectable nor filterable. For an onPremisesSyncEnabled user, the source of authority for this set of properties is the on-premises and is read-only. For a cloud-only user (where onPremisesSyncEnabled is false), these properties may be set during creation or update. These extension attributes are also known as Exchange custom attributes 1-15. Returned only on $select. Supports $filter (eq, not, ge, le, in, and eq on null values).
	OnPremisesExtensionAttributes AnyOfmicrosoftGraphOnPremisesExtensionAttributes `json:"onPremisesExtensionAttributes,omitempty"`
	// This property is used to associate an on-premises Active Directory user account to their Azure AD user object. This property must be specified when creating a new user account in the Graph if you are using a federated domain for the user's userPrincipalName (UPN) property. NOTE: The $ and _ characters cannot be used when specifying this property. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in)..
	OnPremisesImmutableId NullableString `json:"onPremisesImmutableId,omitempty"`
	// Indicates the last time at which the object was synced with the on-premises directory; for example: 2013-02-16T03:04:54Z. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in).
	OnPremisesLastSyncDateTime NullableTime `json:"onPremisesLastSyncDateTime,omitempty"`
	// Errors when using Microsoft synchronization product during provisioning. Returned only on $select. Supports $filter (eq, not, ge, le).
	OnPremisesProvisioningErrors *[]*AnyOfmicrosoftGraphOnPremisesProvisioningError `json:"onPremisesProvisioningErrors,omitempty"`
	// Contains the on-premises samAccountName synchronized from the on-premises directory. The property is only populated for customers who are synchronizing their on-premises directory to Azure Active Directory via Azure AD Connect. Read-only. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith).
	OnPremisesSamAccountName NullableString `json:"onPremisesSamAccountName,omitempty"`
	// Contains the on-premises security identifier (SID) for the user that was synchronized from on-premises to the cloud. Read-only. Returned only on $select. Supports $filter (eq) on null values only.
	OnPremisesSecurityIdentifier NullableString `json:"onPremisesSecurityIdentifier,omitempty"`
	// true if this object is synced from an on-premises directory; false if this object was originally synced from an on-premises directory but is no longer synced; null if this object has never been synced from an on-premises directory (default). Read-only. Returned only on $select. Supports $filter (eq, ne, not, in, and eq on null values).
	OnPremisesSyncEnabled NullableBool `json:"onPremisesSyncEnabled,omitempty"`
	// Contains the on-premises userPrincipalName synchronized from the on-premises directory. The property is only populated for customers who are synchronizing their on-premises directory to Azure Active Directory via Azure AD Connect. Read-only. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith).
	OnPremisesUserPrincipalName NullableString `json:"onPremisesUserPrincipalName,omitempty"`
	// A list of additional email addresses for the user; for example: ['bob@contoso.com', 'Robert@fabrikam.com']. NOTE: This property cannot contain accent characters. Returned only on $select. Supports $filter (eq, not, ge, le, in, startsWith).
	OtherMails *[]string `json:"otherMails,omitempty"`
	// Specifies password policies for the user. This value is an enumeration with one possible value being DisableStrongPassword, which allows weaker passwords than the default policy to be specified. DisablePasswordExpiration can also be specified. The two may be specified together; for example: DisablePasswordExpiration, DisableStrongPassword. Returned only on $select. For more information on the default password policies, see Azure AD pasword policies. Supports $filter (ne, not, and eq on null values).
	PasswordPolicies NullableString `json:"passwordPolicies,omitempty"`
	// Specifies the password profile for the user. The profile contains the userâ€™s password. This property is required when a user is created. The password in the profile must satisfy minimum requirements as specified by the passwordPolicies property. By default, a strong password is required. NOTE: For Azure B2C tenants, the forceChangePasswordNextSignIn property should be set to false and instead use custom policies and user flows to force password reset at first logon. See Force password reset at first logon.Returned only on $select. Supports $filter (eq, ne, not, in, and eq on null values).
	PasswordProfile AnyOfmicrosoftGraphPasswordProfile `json:"passwordProfile,omitempty"`
	// The postal code for the user's postal address. The postal code is specific to the user's country/region. In the United States of America, this attribute contains the ZIP code. Maximum length is 40 characters. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).
	PostalCode NullableString `json:"postalCode,omitempty"`
	// The preferred language for the user. Should follow ISO 639-1 Code; for example en-US. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values)
	PreferredLanguage NullableString `json:"preferredLanguage,omitempty"`
	// The plans that are provisioned for the user. Read-only. Not nullable. Returned only on $select. Supports $filter (eq, not, ge, le).
	ProvisionedPlans *[]MicrosoftGraphProvisionedPlan `json:"provisionedPlans,omitempty"`
	// For example: ['SMTP: bob@contoso.com', 'smtp: bob@sales.contoso.com']. For Azure AD B2C accounts, this property has a limit of ten unique addresses. Read-only, Not nullable. Returned only on $select. Supports $filter (eq, not, ge, le, startsWith).
	ProxyAddresses *[]string `json:"proxyAddresses,omitempty"`
	// true if the Outlook global address list should contain this user, otherwise false. If not set, this will be treated as true. For users invited through the invitation manager, this property will be set to false. Returned only on $select. Supports $filter (eq, ne, not, in).
	ShowInAddressList NullableBool `json:"showInAddressList,omitempty"`
	// Any refresh tokens or sessions tokens (session cookies) issued before this time are invalid, and applications will get an error when using an invalid refresh or sessions token to acquire a delegated access token (to access APIs such as Microsoft Graph).  If this happens, the application will need to acquire a new refresh token by making a request to the authorize endpoint. Read-only. Use revokeSignInSessions to reset. Returned only on $select.
	SignInSessionsValidFromDateTime NullableTime `json:"signInSessionsValidFromDateTime,omitempty"`
	// The state or province in the user's address. Maximum length is 128 characters. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).
	State NullableString `json:"state,omitempty"`
	// The street address of the user's place of business. Maximum length is 1024 characters. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).
	StreetAddress NullableString `json:"streetAddress,omitempty"`
	// The user's surname (family name or last name). Maximum length is 64 characters. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).
	Surname NullableString `json:"surname,omitempty"`
	// A two letter country code (ISO standard 3166). Required for users that will be assigned licenses due to legal requirement to check for availability of services in countries.  Examples include: US, JP, and GB. Not nullable. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).
	UsageLocation NullableString `json:"usageLocation,omitempty"`
	// The user principal name (UPN) of the user. The UPN is an Internet-style login name for the user based on the Internet standard RFC 822. By convention, this should map to the user's email name. The general format is alias@domain, where domain must be present in the tenant's collection of verified domains. This property is required when a user is created. The verified domains for the tenant can be accessed from the verifiedDomains property of organization.NOTE: This property cannot contain accent characters. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, endsWith) and $orderBy.
	UserPrincipalName NullableString `json:"userPrincipalName,omitempty"`
	// A string value that can be used to classify user types in your directory, such as Member and Guest. Returned only on $select. Supports $filter (eq, ne, not, in, and eq on null values). NOTE: For more information about the permissions for member and guest users, see What are the default user permissions in Azure Active Directory?
	UserType NullableString `json:"userType,omitempty"`
	// Settings for the primary mailbox of the signed-in user. You can get or update settings for sending automatic replies to incoming messages, locale and time zone.Returned only on $select.
	MailboxSettings AnyOfmicrosoftGraphMailboxSettings `json:"mailboxSettings,omitempty"`
	// The limit on the maximum number of devices that the user is permitted to enroll. Allowed values are 5 or 1000.
	DeviceEnrollmentLimit *int32 `json:"deviceEnrollmentLimit,omitempty"`
	// A freeform text entry field for the user to describe themselves. Returned only on $select.
	AboutMe NullableString `json:"aboutMe,omitempty"`
	// The birthday of the user. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Returned only on $select.
	Birthday *time.Time `json:"birthday,omitempty"`
	// The hire date of the user. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Returned only on $select.  Note: This property is specific to SharePoint Online. We recommend using the native employeeHireDate property to set and update hire date values using Microsoft Graph APIs.
	HireDate *time.Time `json:"hireDate,omitempty"`
	// A list for the user to describe their interests. Returned only on $select.
	Interests *[]*string `json:"interests,omitempty"`
	// The URL for the user's personal site. Returned only on $select.
	MySite NullableString `json:"mySite,omitempty"`
	// A list for the user to enumerate their past projects. Returned only on $select.
	PastProjects *[]*string `json:"pastProjects,omitempty"`
	// The preferred name for the user. Returned only on $select.
	PreferredName NullableString `json:"preferredName,omitempty"`
	// A list for the user to enumerate their responsibilities. Returned only on $select.
	Responsibilities *[]*string `json:"responsibilities,omitempty"`
	// A list for the user to enumerate the schools they have attended. Returned only on $select.
	Schools *[]*string `json:"schools,omitempty"`
	// A list for the user to enumerate their skills. Returned only on $select.
	Skills *[]*string `json:"skills,omitempty"`
	// Represents the app roles a user has been granted for an application. Supports $expand.
	AppRoleAssignments *[]MicrosoftGraphAppRoleAssignment `json:"appRoleAssignments,omitempty"`
	// Directory objects that were created by the user. Read-only. Nullable.
	CreatedObjects *[]MicrosoftGraphDirectoryObject `json:"createdObjects,omitempty"`
	// The users and contacts that report to the user. (The users and contacts that have their manager property set to this user.) Read-only. Nullable. Supports $expand.
	DirectReports *[]MicrosoftGraphDirectoryObject `json:"directReports,omitempty"`
	// A collection of this user's license details. Read-only.
	LicenseDetails *[]MicrosoftGraphLicenseDetails `json:"licenseDetails,omitempty"`
	// The user or contact that is this user's manager. Read-only. (HTTP Methods: GET, PUT, DELETE.). Supports $expand.
	Manager AnyOfmicrosoftGraphDirectoryObject `json:"manager,omitempty"`
	// The groups and directory roles that the user is a member of. Read-only. Nullable. Supports $expand.
	MemberOf *[]MicrosoftGraphDirectoryObject `json:"memberOf,omitempty"`
	Oauth2PermissionGrants *[]MicrosoftGraphOAuth2PermissionGrant `json:"oauth2PermissionGrants,omitempty"`
	// Devices that are owned by the user. Read-only. Nullable. Supports $expand.
	OwnedDevices *[]MicrosoftGraphDirectoryObject `json:"ownedDevices,omitempty"`
	// Directory objects that are owned by the user. Read-only. Nullable. Supports $expand.
	OwnedObjects *[]MicrosoftGraphDirectoryObject `json:"ownedObjects,omitempty"`
	// Devices that are registered for the user. Read-only. Nullable. Supports $expand.
	RegisteredDevices *[]MicrosoftGraphDirectoryObject `json:"registeredDevices,omitempty"`
	// The scoped-role administrative unit memberships for this user. Read-only. Nullable.
	ScopedRoleMemberOf *[]MicrosoftGraphScopedRoleMembership `json:"scopedRoleMemberOf,omitempty"`
	TransitiveMemberOf *[]MicrosoftGraphDirectoryObject `json:"transitiveMemberOf,omitempty"`
	// The user's primary calendar. Read-only.
	Calendar AnyOfmicrosoftGraphCalendar `json:"calendar,omitempty"`
	// The user's calendar groups. Read-only. Nullable.
	CalendarGroups *[]MicrosoftGraphCalendarGroup `json:"calendarGroups,omitempty"`
	// The user's calendars. Read-only. Nullable.
	Calendars *[]MicrosoftGraphCalendar `json:"calendars,omitempty"`
	// The calendar view for the calendar. Read-only. Nullable.
	CalendarView *[]MicrosoftGraphEvent `json:"calendarView,omitempty"`
	// The user's contacts folders. Read-only. Nullable.
	ContactFolders *[]MicrosoftGraphContactFolder `json:"contactFolders,omitempty"`
	// The user's contacts. Read-only. Nullable.
	Contacts *[]MicrosoftGraphContact `json:"contacts,omitempty"`
	// The user's events. Default is to show Events under the Default Calendar. Read-only. Nullable.
	Events *[]MicrosoftGraphEvent `json:"events,omitempty"`
	// Relevance classification of the user's messages based on explicit designations which override inferred relevance or importance.
	InferenceClassification AnyOfmicrosoftGraphInferenceClassification `json:"inferenceClassification,omitempty"`
	// The user's mail folders. Read-only. Nullable.
	MailFolders *[]MicrosoftGraphMailFolder `json:"mailFolders,omitempty"`
	// The messages in a mailbox or folder. Read-only. Nullable.
	Messages *[]MicrosoftGraphMessage `json:"messages,omitempty"`
	// Read-only.
	Outlook AnyOfmicrosoftGraphOutlookUser `json:"outlook,omitempty"`
	// People that are relevant to the user. Read-only. Nullable.
	People *[]MicrosoftGraphPerson `json:"people,omitempty"`
	// The user's OneDrive. Read-only.
	Drive AnyOfmicrosoftGraphDrive `json:"drive,omitempty"`
	// A collection of drives available for this user. Read-only.
	Drives *[]MicrosoftGraphDrive `json:"drives,omitempty"`
	FollowedSites *[]MicrosoftGraphSite `json:"followedSites,omitempty"`
	// The collection of open extensions defined for the user. Read-only. Nullable.
	Extensions *[]MicrosoftGraphExtension `json:"extensions,omitempty"`
	// The user's terms of use acceptance statuses. Read-only. Nullable.
	AgreementAcceptances *[]MicrosoftGraphAgreementAcceptance `json:"agreementAcceptances,omitempty"`
	// The managed devices associated with the user.
	ManagedDevices *[]MicrosoftGraphManagedDevice `json:"managedDevices,omitempty"`
	// Zero or more managed app registrations that belong to the user.
	ManagedAppRegistrations *[]MicrosoftGraphManagedAppRegistration `json:"managedAppRegistrations,omitempty"`
	// The list of troubleshooting events for this user.
	DeviceManagementTroubleshootingEvents *[]MicrosoftGraphDeviceManagementTroubleshootingEvent `json:"deviceManagementTroubleshootingEvents,omitempty"`
	// Entry-point to the Planner resource that might exist for a user. Read-only.
	Planner AnyOfmicrosoftGraphPlannerUser `json:"planner,omitempty"`
	// Read-only. Nullable.
	Insights AnyOfmicrosoftGraphOfficeGraphInsights `json:"insights,omitempty"`
	// Read-only. Nullable.
	Settings AnyOfmicrosoftGraphUserSettings `json:"settings,omitempty"`
	// Read-only.
	Onenote AnyOfmicrosoftGraphOnenote `json:"onenote,omitempty"`
	// The user's profile photo. Read-only.
	Photo AnyOfmicrosoftGraphProfilePhoto `json:"photo,omitempty"`
	// Read-only. Nullable.
	Photos *[]MicrosoftGraphProfilePhoto `json:"photos,omitempty"`
	// The user's activities across devices. Read-only. Nullable.
	Activities *[]MicrosoftGraphUserActivity `json:"activities,omitempty"`
	OnlineMeetings *[]MicrosoftGraphOnlineMeeting `json:"onlineMeetings,omitempty"`
	Presence AnyOfmicrosoftGraphPresence `json:"presence,omitempty"`
	Authentication AnyOfmicrosoftGraphAuthentication `json:"authentication,omitempty"`
	Chats *[]MicrosoftGraphChat `json:"chats,omitempty"`
	// The Microsoft Teams teams that the user is a member of. Read-only. Nullable.
	JoinedTeams *[]MicrosoftGraphTeam `json:"joinedTeams,omitempty"`
	// A container for Microsoft Teams features available for the user. Read-only. Nullable.
	Teamwork AnyOfmicrosoftGraphUserTeamwork `json:"teamwork,omitempty"`
	// Represents the To Do services available to a user.
	Todo AnyOfmicrosoftGraphTodo `json:"todo,omitempty"`
}

// NewMicrosoftGraphUser instantiates a new MicrosoftGraphUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMicrosoftGraphUser() *MicrosoftGraphUser {
	this := MicrosoftGraphUser{}
	return &this
}

// NewMicrosoftGraphUserWithDefaults instantiates a new MicrosoftGraphUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMicrosoftGraphUserWithDefaults() *MicrosoftGraphUser {
	this := MicrosoftGraphUser{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MicrosoftGraphUser) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUser) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MicrosoftGraphUser) SetId(v string) {
	o.Id = &v
}

// GetDeletedDateTime returns the DeletedDateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetDeletedDateTime() time.Time {
	if o == nil || o.DeletedDateTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.DeletedDateTime.Get()
}

// GetDeletedDateTimeOk returns a tuple with the DeletedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetDeletedDateTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DeletedDateTime.Get(), o.DeletedDateTime.IsSet()
}

// HasDeletedDateTime returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasDeletedDateTime() bool {
	if o != nil && o.DeletedDateTime.IsSet() {
		return true
	}

	return false
}

// SetDeletedDateTime gets a reference to the given NullableTime and assigns it to the DeletedDateTime field.
func (o *MicrosoftGraphUser) SetDeletedDateTime(v time.Time) {
	o.DeletedDateTime.Set(&v)
}
// SetDeletedDateTimeNil sets the value for DeletedDateTime to be an explicit nil
func (o *MicrosoftGraphUser) SetDeletedDateTimeNil() {
	o.DeletedDateTime.Set(nil)
}

// UnsetDeletedDateTime ensures that no value is present for DeletedDateTime, not even an explicit nil
func (o *MicrosoftGraphUser) UnsetDeletedDateTime() {
	o.DeletedDateTime.Unset()
}

// GetAccountEnabled returns the AccountEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetAccountEnabled() bool {
	if o == nil || o.AccountEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.AccountEnabled.Get()
}

// GetAccountEnabledOk returns a tuple with the AccountEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetAccountEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AccountEnabled.Get(), o.AccountEnabled.IsSet()
}

// HasAccountEnabled returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasAccountEnabled() bool {
	if o != nil && o.AccountEnabled.IsSet() {
		return true
	}

	return false
}

// SetAccountEnabled gets a reference to the given NullableBool and assigns it to the AccountEnabled field.
func (o *MicrosoftGraphUser) SetAccountEnabled(v bool) {
	o.AccountEnabled.Set(&v)
}
// SetAccountEnabledNil sets the value for AccountEnabled to be an explicit nil
func (o *MicrosoftGraphUser) SetAccountEnabledNil() {
	o.AccountEnabled.Set(nil)
}

// UnsetAccountEnabled ensures that no value is present for AccountEnabled, not even an explicit nil
func (o *MicrosoftGraphUser) UnsetAccountEnabled() {
	o.AccountEnabled.Unset()
}

// GetAgeGroup returns the AgeGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetAgeGroup() string {
	if o == nil || o.AgeGroup.Get() == nil {
		var ret string
		return ret
	}
	return *o.AgeGroup.Get()
}

// GetAgeGroupOk returns a tuple with the AgeGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetAgeGroupOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AgeGroup.Get(), o.AgeGroup.IsSet()
}

// HasAgeGroup returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasAgeGroup() bool {
	if o != nil && o.AgeGroup.IsSet() {
		return true
	}

	return false
}

// SetAgeGroup gets a reference to the given NullableString and assigns it to the AgeGroup field.
func (o *MicrosoftGraphUser) SetAgeGroup(v string) {
	o.AgeGroup.Set(&v)
}
// SetAgeGroupNil sets the value for AgeGroup to be an explicit nil
func (o *MicrosoftGraphUser) SetAgeGroupNil() {
	o.AgeGroup.Set(nil)
}

// UnsetAgeGroup ensures that no value is present for AgeGroup, not even an explicit nil
func (o *MicrosoftGraphUser) UnsetAgeGroup() {
	o.AgeGroup.Unset()
}

// GetAssignedLicenses returns the AssignedLicenses field value if set, zero value otherwise.
func (o *MicrosoftGraphUser) GetAssignedLicenses() []MicrosoftGraphAssignedLicense {
	if o == nil || o.AssignedLicenses == nil {
		var ret []MicrosoftGraphAssignedLicense
		return ret
	}
	return *o.AssignedLicenses
}

// GetAssignedLicensesOk returns a tuple with the AssignedLicenses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUser) GetAssignedLicensesOk() (*[]MicrosoftGraphAssignedLicense, bool) {
	if o == nil || o.AssignedLicenses == nil {
		return nil, false
	}
	return o.AssignedLicenses, true
}

// HasAssignedLicenses returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasAssignedLicenses() bool {
	if o != nil && o.AssignedLicenses != nil {
		return true
	}

	return false
}

// SetAssignedLicenses gets a reference to the given []MicrosoftGraphAssignedLicense and assigns it to the AssignedLicenses field.
func (o *MicrosoftGraphUser) SetAssignedLicenses(v []MicrosoftGraphAssignedLicense) {
	o.AssignedLicenses = &v
}

// GetAssignedPlans returns the AssignedPlans field value if set, zero value otherwise.
func (o *MicrosoftGraphUser) GetAssignedPlans() []MicrosoftGraphAssignedPlan {
	if o == nil || o.AssignedPlans == nil {
		var ret []MicrosoftGraphAssignedPlan
		return ret
	}
	return *o.AssignedPlans
}

// GetAssignedPlansOk returns a tuple with the AssignedPlans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUser) GetAssignedPlansOk() (*[]MicrosoftGraphAssignedPlan, bool) {
	if o == nil || o.AssignedPlans == nil {
		return nil, false
	}
	return o.AssignedPlans, true
}

// HasAssignedPlans returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasAssignedPlans() bool {
	if o != nil && o.AssignedPlans != nil {
		return true
	}

	return false
}

// SetAssignedPlans gets a reference to the given []MicrosoftGraphAssignedPlan and assigns it to the AssignedPlans field.
func (o *MicrosoftGraphUser) SetAssignedPlans(v []MicrosoftGraphAssignedPlan) {
	o.AssignedPlans = &v
}

// GetBusinessPhones returns the BusinessPhones field value if set, zero value otherwise.
func (o *MicrosoftGraphUser) GetBusinessPhones() []string {
	if o == nil || o.BusinessPhones == nil {
		var ret []string
		return ret
	}
	return *o.BusinessPhones
}

// GetBusinessPhonesOk returns a tuple with the BusinessPhones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUser) GetBusinessPhonesOk() (*[]string, bool) {
	if o == nil || o.BusinessPhones == nil {
		return nil, false
	}
	return o.BusinessPhones, true
}

// HasBusinessPhones returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasBusinessPhones() bool {
	if o != nil && o.BusinessPhones != nil {
		return true
	}

	return false
}

// SetBusinessPhones gets a reference to the given []string and assigns it to the BusinessPhones field.
func (o *MicrosoftGraphUser) SetBusinessPhones(v []string) {
	o.BusinessPhones = &v
}

// GetCity returns the City field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetCity() string {
	if o == nil || o.City.Get() == nil {
		var ret string
		return ret
	}
	return *o.City.Get()
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetCityOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.City.Get(), o.City.IsSet()
}

// HasCity returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasCity() bool {
	if o != nil && o.City.IsSet() {
		return true
	}

	return false
}

// SetCity gets a reference to the given NullableString and assigns it to the City field.
func (o *MicrosoftGraphUser) SetCity(v string) {
	o.City.Set(&v)
}
// SetCityNil sets the value for City to be an explicit nil
func (o *MicrosoftGraphUser) SetCityNil() {
	o.City.Set(nil)
}

// UnsetCity ensures that no value is present for City, not even an explicit nil
func (o *MicrosoftGraphUser) UnsetCity() {
	o.City.Unset()
}

// GetCompanyName returns the CompanyName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetCompanyName() string {
	if o == nil || o.CompanyName.Get() == nil {
		var ret string
		return ret
	}
	return *o.CompanyName.Get()
}

// GetCompanyNameOk returns a tuple with the CompanyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetCompanyNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CompanyName.Get(), o.CompanyName.IsSet()
}

// HasCompanyName returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasCompanyName() bool {
	if o != nil && o.CompanyName.IsSet() {
		return true
	}

	return false
}

// SetCompanyName gets a reference to the given NullableString and assigns it to the CompanyName field.
func (o *MicrosoftGraphUser) SetCompanyName(v string) {
	o.CompanyName.Set(&v)
}
// SetCompanyNameNil sets the value for CompanyName to be an explicit nil
func (o *MicrosoftGraphUser) SetCompanyNameNil() {
	o.CompanyName.Set(nil)
}

// UnsetCompanyName ensures that no value is present for CompanyName, not even an explicit nil
func (o *MicrosoftGraphUser) UnsetCompanyName() {
	o.CompanyName.Unset()
}

// GetConsentProvidedForMinor returns the ConsentProvidedForMinor field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetConsentProvidedForMinor() string {
	if o == nil || o.ConsentProvidedForMinor.Get() == nil {
		var ret string
		return ret
	}
	return *o.ConsentProvidedForMinor.Get()
}

// GetConsentProvidedForMinorOk returns a tuple with the ConsentProvidedForMinor field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetConsentProvidedForMinorOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ConsentProvidedForMinor.Get(), o.ConsentProvidedForMinor.IsSet()
}

// HasConsentProvidedForMinor returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasConsentProvidedForMinor() bool {
	if o != nil && o.ConsentProvidedForMinor.IsSet() {
		return true
	}

	return false
}

// SetConsentProvidedForMinor gets a reference to the given NullableString and assigns it to the ConsentProvidedForMinor field.
func (o *MicrosoftGraphUser) SetConsentProvidedForMinor(v string) {
	o.ConsentProvidedForMinor.Set(&v)
}
// SetConsentProvidedForMinorNil sets the value for ConsentProvidedForMinor to be an explicit nil
func (o *MicrosoftGraphUser) SetConsentProvidedForMinorNil() {
	o.ConsentProvidedForMinor.Set(nil)
}

// UnsetConsentProvidedForMinor ensures that no value is present for ConsentProvidedForMinor, not even an explicit nil
func (o *MicrosoftGraphUser) UnsetConsentProvidedForMinor() {
	o.ConsentProvidedForMinor.Unset()
}

// GetCountry returns the Country field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetCountry() string {
	if o == nil || o.Country.Get() == nil {
		var ret string
		return ret
	}
	return *o.Country.Get()
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetCountryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Country.Get(), o.Country.IsSet()
}

// HasCountry returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasCountry() bool {
	if o != nil && o.Country.IsSet() {
		return true
	}

	return false
}

// SetCountry gets a reference to the given NullableString and assigns it to the Country field.
func (o *MicrosoftGraphUser) SetCountry(v string) {
	o.Country.Set(&v)
}
// SetCountryNil sets the value for Country to be an explicit nil
func (o *MicrosoftGraphUser) SetCountryNil() {
	o.Country.Set(nil)
}

// UnsetCountry ensures that no value is present for Country, not even an explicit nil
func (o *MicrosoftGraphUser) UnsetCountry() {
	o.Country.Unset()
}

// GetCreatedDateTime returns the CreatedDateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetCreatedDateTime() time.Time {
	if o == nil || o.CreatedDateTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedDateTime.Get()
}

// GetCreatedDateTimeOk returns a tuple with the CreatedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetCreatedDateTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CreatedDateTime.Get(), o.CreatedDateTime.IsSet()
}

// HasCreatedDateTime returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasCreatedDateTime() bool {
	if o != nil && o.CreatedDateTime.IsSet() {
		return true
	}

	return false
}

// SetCreatedDateTime gets a reference to the given NullableTime and assigns it to the CreatedDateTime field.
func (o *MicrosoftGraphUser) SetCreatedDateTime(v time.Time) {
	o.CreatedDateTime.Set(&v)
}
// SetCreatedDateTimeNil sets the value for CreatedDateTime to be an explicit nil
func (o *MicrosoftGraphUser) SetCreatedDateTimeNil() {
	o.CreatedDateTime.Set(nil)
}

// UnsetCreatedDateTime ensures that no value is present for CreatedDateTime, not even an explicit nil
func (o *MicrosoftGraphUser) UnsetCreatedDateTime() {
	o.CreatedDateTime.Unset()
}

// GetCreationType returns the CreationType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetCreationType() string {
	if o == nil || o.CreationType.Get() == nil {
		var ret string
		return ret
	}
	return *o.CreationType.Get()
}

// GetCreationTypeOk returns a tuple with the CreationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetCreationTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CreationType.Get(), o.CreationType.IsSet()
}

// HasCreationType returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasCreationType() bool {
	if o != nil && o.CreationType.IsSet() {
		return true
	}

	return false
}

// SetCreationType gets a reference to the given NullableString and assigns it to the CreationType field.
func (o *MicrosoftGraphUser) SetCreationType(v string) {
	o.CreationType.Set(&v)
}
// SetCreationTypeNil sets the value for CreationType to be an explicit nil
func (o *MicrosoftGraphUser) SetCreationTypeNil() {
	o.CreationType.Set(nil)
}

// UnsetCreationType ensures that no value is present for CreationType, not even an explicit nil
func (o *MicrosoftGraphUser) UnsetCreationType() {
	o.CreationType.Unset()
}

// GetDepartment returns the Department field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetDepartment() string {
	if o == nil || o.Department.Get() == nil {
		var ret string
		return ret
	}
	return *o.Department.Get()
}

// GetDepartmentOk returns a tuple with the Department field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetDepartmentOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Department.Get(), o.Department.IsSet()
}

// HasDepartment returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasDepartment() bool {
	if o != nil && o.Department.IsSet() {
		return true
	}

	return false
}

// SetDepartment gets a reference to the given NullableString and assigns it to the Department field.
func (o *MicrosoftGraphUser) SetDepartment(v string) {
	o.Department.Set(&v)
}
// SetDepartmentNil sets the value for Department to be an explicit nil
func (o *MicrosoftGraphUser) SetDepartmentNil() {
	o.Department.Set(nil)
}

// UnsetDepartment ensures that no value is present for Department, not even an explicit nil
func (o *MicrosoftGraphUser) UnsetDepartment() {
	o.Department.Unset()
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetDisplayName() string {
	if o == nil || o.DisplayName.Get() == nil {
		var ret string
		return ret
	}
	return *o.DisplayName.Get()
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetDisplayNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DisplayName.Get(), o.DisplayName.IsSet()
}

// HasDisplayName returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasDisplayName() bool {
	if o != nil && o.DisplayName.IsSet() {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given NullableString and assigns it to the DisplayName field.
func (o *MicrosoftGraphUser) SetDisplayName(v string) {
	o.DisplayName.Set(&v)
}
// SetDisplayNameNil sets the value for DisplayName to be an explicit nil
func (o *MicrosoftGraphUser) SetDisplayNameNil() {
	o.DisplayName.Set(nil)
}

// UnsetDisplayName ensures that no value is present for DisplayName, not even an explicit nil
func (o *MicrosoftGraphUser) UnsetDisplayName() {
	o.DisplayName.Unset()
}

// GetEmployeeHireDate returns the EmployeeHireDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetEmployeeHireDate() time.Time {
	if o == nil || o.EmployeeHireDate.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.EmployeeHireDate.Get()
}

// GetEmployeeHireDateOk returns a tuple with the EmployeeHireDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetEmployeeHireDateOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EmployeeHireDate.Get(), o.EmployeeHireDate.IsSet()
}

// HasEmployeeHireDate returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasEmployeeHireDate() bool {
	if o != nil && o.EmployeeHireDate.IsSet() {
		return true
	}

	return false
}

// SetEmployeeHireDate gets a reference to the given NullableTime and assigns it to the EmployeeHireDate field.
func (o *MicrosoftGraphUser) SetEmployeeHireDate(v time.Time) {
	o.EmployeeHireDate.Set(&v)
}
// SetEmployeeHireDateNil sets the value for EmployeeHireDate to be an explicit nil
func (o *MicrosoftGraphUser) SetEmployeeHireDateNil() {
	o.EmployeeHireDate.Set(nil)
}

// UnsetEmployeeHireDate ensures that no value is present for EmployeeHireDate, not even an explicit nil
func (o *MicrosoftGraphUser) UnsetEmployeeHireDate() {
	o.EmployeeHireDate.Unset()
}

// GetEmployeeId returns the EmployeeId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetEmployeeId() string {
	if o == nil || o.EmployeeId.Get() == nil {
		var ret string
		return ret
	}
	return *o.EmployeeId.Get()
}

// GetEmployeeIdOk returns a tuple with the EmployeeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetEmployeeIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EmployeeId.Get(), o.EmployeeId.IsSet()
}

// HasEmployeeId returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasEmployeeId() bool {
	if o != nil && o.EmployeeId.IsSet() {
		return true
	}

	return false
}

// SetEmployeeId gets a reference to the given NullableString and assigns it to the EmployeeId field.
func (o *MicrosoftGraphUser) SetEmployeeId(v string) {
	o.EmployeeId.Set(&v)
}
// SetEmployeeIdNil sets the value for EmployeeId to be an explicit nil
func (o *MicrosoftGraphUser) SetEmployeeIdNil() {
	o.EmployeeId.Set(nil)
}

// UnsetEmployeeId ensures that no value is present for EmployeeId, not even an explicit nil
func (o *MicrosoftGraphUser) UnsetEmployeeId() {
	o.EmployeeId.Unset()
}

// GetEmployeeOrgData returns the EmployeeOrgData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetEmployeeOrgData() AnyOfmicrosoftGraphEmployeeOrgData {
	if o == nil  {
		var ret AnyOfmicrosoftGraphEmployeeOrgData
		return ret
	}
	return o.EmployeeOrgData
}

// GetEmployeeOrgDataOk returns a tuple with the EmployeeOrgData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetEmployeeOrgDataOk() (*AnyOfmicrosoftGraphEmployeeOrgData, bool) {
	if o == nil || o.EmployeeOrgData == nil {
		return nil, false
	}
	return &o.EmployeeOrgData, true
}

// HasEmployeeOrgData returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasEmployeeOrgData() bool {
	if o != nil && o.EmployeeOrgData != nil {
		return true
	}

	return false
}

// SetEmployeeOrgData gets a reference to the given AnyOfmicrosoftGraphEmployeeOrgData and assigns it to the EmployeeOrgData field.
func (o *MicrosoftGraphUser) SetEmployeeOrgData(v AnyOfmicrosoftGraphEmployeeOrgData) {
	o.EmployeeOrgData = v
}

// GetEmployeeType returns the EmployeeType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetEmployeeType() string {
	if o == nil || o.EmployeeType.Get() == nil {
		var ret string
		return ret
	}
	return *o.EmployeeType.Get()
}

// GetEmployeeTypeOk returns a tuple with the EmployeeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetEmployeeTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EmployeeType.Get(), o.EmployeeType.IsSet()
}

// HasEmployeeType returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasEmployeeType() bool {
	if o != nil && o.EmployeeType.IsSet() {
		return true
	}

	return false
}

// SetEmployeeType gets a reference to the given NullableString and assigns it to the EmployeeType field.
func (o *MicrosoftGraphUser) SetEmployeeType(v string) {
	o.EmployeeType.Set(&v)
}
// SetEmployeeTypeNil sets the value for EmployeeType to be an explicit nil
func (o *MicrosoftGraphUser) SetEmployeeTypeNil() {
	o.EmployeeType.Set(nil)
}

// UnsetEmployeeType ensures that no value is present for EmployeeType, not even an explicit nil
func (o *MicrosoftGraphUser) UnsetEmployeeType() {
	o.EmployeeType.Unset()
}

// GetExternalUserState returns the ExternalUserState field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetExternalUserState() string {
	if o == nil || o.ExternalUserState.Get() == nil {
		var ret string
		return ret
	}
	return *o.ExternalUserState.Get()
}

// GetExternalUserStateOk returns a tuple with the ExternalUserState field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetExternalUserStateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ExternalUserState.Get(), o.ExternalUserState.IsSet()
}

// HasExternalUserState returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasExternalUserState() bool {
	if o != nil && o.ExternalUserState.IsSet() {
		return true
	}

	return false
}

// SetExternalUserState gets a reference to the given NullableString and assigns it to the ExternalUserState field.
func (o *MicrosoftGraphUser) SetExternalUserState(v string) {
	o.ExternalUserState.Set(&v)
}
// SetExternalUserStateNil sets the value for ExternalUserState to be an explicit nil
func (o *MicrosoftGraphUser) SetExternalUserStateNil() {
	o.ExternalUserState.Set(nil)
}

// UnsetExternalUserState ensures that no value is present for ExternalUserState, not even an explicit nil
func (o *MicrosoftGraphUser) UnsetExternalUserState() {
	o.ExternalUserState.Unset()
}

// GetExternalUserStateChangeDateTime returns the ExternalUserStateChangeDateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetExternalUserStateChangeDateTime() time.Time {
	if o == nil || o.ExternalUserStateChangeDateTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.ExternalUserStateChangeDateTime.Get()
}

// GetExternalUserStateChangeDateTimeOk returns a tuple with the ExternalUserStateChangeDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetExternalUserStateChangeDateTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ExternalUserStateChangeDateTime.Get(), o.ExternalUserStateChangeDateTime.IsSet()
}

// HasExternalUserStateChangeDateTime returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasExternalUserStateChangeDateTime() bool {
	if o != nil && o.ExternalUserStateChangeDateTime.IsSet() {
		return true
	}

	return false
}

// SetExternalUserStateChangeDateTime gets a reference to the given NullableTime and assigns it to the ExternalUserStateChangeDateTime field.
func (o *MicrosoftGraphUser) SetExternalUserStateChangeDateTime(v time.Time) {
	o.ExternalUserStateChangeDateTime.Set(&v)
}
// SetExternalUserStateChangeDateTimeNil sets the value for ExternalUserStateChangeDateTime to be an explicit nil
func (o *MicrosoftGraphUser) SetExternalUserStateChangeDateTimeNil() {
	o.ExternalUserStateChangeDateTime.Set(nil)
}

// UnsetExternalUserStateChangeDateTime ensures that no value is present for ExternalUserStateChangeDateTime, not even an explicit nil
func (o *MicrosoftGraphUser) UnsetExternalUserStateChangeDateTime() {
	o.ExternalUserStateChangeDateTime.Unset()
}

// GetFaxNumber returns the FaxNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetFaxNumber() string {
	if o == nil || o.FaxNumber.Get() == nil {
		var ret string
		return ret
	}
	return *o.FaxNumber.Get()
}

// GetFaxNumberOk returns a tuple with the FaxNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetFaxNumberOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FaxNumber.Get(), o.FaxNumber.IsSet()
}

// HasFaxNumber returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasFaxNumber() bool {
	if o != nil && o.FaxNumber.IsSet() {
		return true
	}

	return false
}

// SetFaxNumber gets a reference to the given NullableString and assigns it to the FaxNumber field.
func (o *MicrosoftGraphUser) SetFaxNumber(v string) {
	o.FaxNumber.Set(&v)
}
// SetFaxNumberNil sets the value for FaxNumber to be an explicit nil
func (o *MicrosoftGraphUser) SetFaxNumberNil() {
	o.FaxNumber.Set(nil)
}

// UnsetFaxNumber ensures that no value is present for FaxNumber, not even an explicit nil
func (o *MicrosoftGraphUser) UnsetFaxNumber() {
	o.FaxNumber.Unset()
}

// GetGivenName returns the GivenName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetGivenName() string {
	if o == nil || o.GivenName.Get() == nil {
		var ret string
		return ret
	}
	return *o.GivenName.Get()
}

// GetGivenNameOk returns a tuple with the GivenName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetGivenNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.GivenName.Get(), o.GivenName.IsSet()
}

// HasGivenName returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasGivenName() bool {
	if o != nil && o.GivenName.IsSet() {
		return true
	}

	return false
}

// SetGivenName gets a reference to the given NullableString and assigns it to the GivenName field.
func (o *MicrosoftGraphUser) SetGivenName(v string) {
	o.GivenName.Set(&v)
}
// SetGivenNameNil sets the value for GivenName to be an explicit nil
func (o *MicrosoftGraphUser) SetGivenNameNil() {
	o.GivenName.Set(nil)
}

// UnsetGivenName ensures that no value is present for GivenName, not even an explicit nil
func (o *MicrosoftGraphUser) UnsetGivenName() {
	o.GivenName.Unset()
}

// GetIdentities returns the Identities field value if set, zero value otherwise.
func (o *MicrosoftGraphUser) GetIdentities() []*AnyOfmicrosoftGraphObjectIdentity {
	if o == nil || o.Identities == nil {
		var ret []*AnyOfmicrosoftGraphObjectIdentity
		return ret
	}
	return *o.Identities
}

// GetIdentitiesOk returns a tuple with the Identities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUser) GetIdentitiesOk() (*[]*AnyOfmicrosoftGraphObjectIdentity, bool) {
	if o == nil || o.Identities == nil {
		return nil, false
	}
	return o.Identities, true
}

// HasIdentities returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasIdentities() bool {
	if o != nil && o.Identities != nil {
		return true
	}

	return false
}

// SetIdentities gets a reference to the given []*AnyOfmicrosoftGraphObjectIdentity and assigns it to the Identities field.
func (o *MicrosoftGraphUser) SetIdentities(v []*AnyOfmicrosoftGraphObjectIdentity) {
	o.Identities = &v
}

// GetImAddresses returns the ImAddresses field value if set, zero value otherwise.
func (o *MicrosoftGraphUser) GetImAddresses() []*string {
	if o == nil || o.ImAddresses == nil {
		var ret []*string
		return ret
	}
	return *o.ImAddresses
}

// GetImAddressesOk returns a tuple with the ImAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUser) GetImAddressesOk() (*[]*string, bool) {
	if o == nil || o.ImAddresses == nil {
		return nil, false
	}
	return o.ImAddresses, true
}

// HasImAddresses returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasImAddresses() bool {
	if o != nil && o.ImAddresses != nil {
		return true
	}

	return false
}

// SetImAddresses gets a reference to the given []*string and assigns it to the ImAddresses field.
func (o *MicrosoftGraphUser) SetImAddresses(v []*string) {
	o.ImAddresses = &v
}

// GetIsResourceAccount returns the IsResourceAccount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetIsResourceAccount() bool {
	if o == nil || o.IsResourceAccount.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsResourceAccount.Get()
}

// GetIsResourceAccountOk returns a tuple with the IsResourceAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetIsResourceAccountOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsResourceAccount.Get(), o.IsResourceAccount.IsSet()
}

// HasIsResourceAccount returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasIsResourceAccount() bool {
	if o != nil && o.IsResourceAccount.IsSet() {
		return true
	}

	return false
}

// SetIsResourceAccount gets a reference to the given NullableBool and assigns it to the IsResourceAccount field.
func (o *MicrosoftGraphUser) SetIsResourceAccount(v bool) {
	o.IsResourceAccount.Set(&v)
}
// SetIsResourceAccountNil sets the value for IsResourceAccount to be an explicit nil
func (o *MicrosoftGraphUser) SetIsResourceAccountNil() {
	o.IsResourceAccount.Set(nil)
}

// UnsetIsResourceAccount ensures that no value is present for IsResourceAccount, not even an explicit nil
func (o *MicrosoftGraphUser) UnsetIsResourceAccount() {
	o.IsResourceAccount.Unset()
}

// GetJobTitle returns the JobTitle field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetJobTitle() string {
	if o == nil || o.JobTitle.Get() == nil {
		var ret string
		return ret
	}
	return *o.JobTitle.Get()
}

// GetJobTitleOk returns a tuple with the JobTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetJobTitleOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.JobTitle.Get(), o.JobTitle.IsSet()
}

// HasJobTitle returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasJobTitle() bool {
	if o != nil && o.JobTitle.IsSet() {
		return true
	}

	return false
}

// SetJobTitle gets a reference to the given NullableString and assigns it to the JobTitle field.
func (o *MicrosoftGraphUser) SetJobTitle(v string) {
	o.JobTitle.Set(&v)
}
// SetJobTitleNil sets the value for JobTitle to be an explicit nil
func (o *MicrosoftGraphUser) SetJobTitleNil() {
	o.JobTitle.Set(nil)
}

// UnsetJobTitle ensures that no value is present for JobTitle, not even an explicit nil
func (o *MicrosoftGraphUser) UnsetJobTitle() {
	o.JobTitle.Unset()
}

// GetLastPasswordChangeDateTime returns the LastPasswordChangeDateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetLastPasswordChangeDateTime() time.Time {
	if o == nil || o.LastPasswordChangeDateTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.LastPasswordChangeDateTime.Get()
}

// GetLastPasswordChangeDateTimeOk returns a tuple with the LastPasswordChangeDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetLastPasswordChangeDateTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LastPasswordChangeDateTime.Get(), o.LastPasswordChangeDateTime.IsSet()
}

// HasLastPasswordChangeDateTime returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasLastPasswordChangeDateTime() bool {
	if o != nil && o.LastPasswordChangeDateTime.IsSet() {
		return true
	}

	return false
}

// SetLastPasswordChangeDateTime gets a reference to the given NullableTime and assigns it to the LastPasswordChangeDateTime field.
func (o *MicrosoftGraphUser) SetLastPasswordChangeDateTime(v time.Time) {
	o.LastPasswordChangeDateTime.Set(&v)
}
// SetLastPasswordChangeDateTimeNil sets the value for LastPasswordChangeDateTime to be an explicit nil
func (o *MicrosoftGraphUser) SetLastPasswordChangeDateTimeNil() {
	o.LastPasswordChangeDateTime.Set(nil)
}

// UnsetLastPasswordChangeDateTime ensures that no value is present for LastPasswordChangeDateTime, not even an explicit nil
func (o *MicrosoftGraphUser) UnsetLastPasswordChangeDateTime() {
	o.LastPasswordChangeDateTime.Unset()
}

// GetLegalAgeGroupClassification returns the LegalAgeGroupClassification field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetLegalAgeGroupClassification() string {
	if o == nil || o.LegalAgeGroupClassification.Get() == nil {
		var ret string
		return ret
	}
	return *o.LegalAgeGroupClassification.Get()
}

// GetLegalAgeGroupClassificationOk returns a tuple with the LegalAgeGroupClassification field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetLegalAgeGroupClassificationOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LegalAgeGroupClassification.Get(), o.LegalAgeGroupClassification.IsSet()
}

// HasLegalAgeGroupClassification returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasLegalAgeGroupClassification() bool {
	if o != nil && o.LegalAgeGroupClassification.IsSet() {
		return true
	}

	return false
}

// SetLegalAgeGroupClassification gets a reference to the given NullableString and assigns it to the LegalAgeGroupClassification field.
func (o *MicrosoftGraphUser) SetLegalAgeGroupClassification(v string) {
	o.LegalAgeGroupClassification.Set(&v)
}
// SetLegalAgeGroupClassificationNil sets the value for LegalAgeGroupClassification to be an explicit nil
func (o *MicrosoftGraphUser) SetLegalAgeGroupClassificationNil() {
	o.LegalAgeGroupClassification.Set(nil)
}

// UnsetLegalAgeGroupClassification ensures that no value is present for LegalAgeGroupClassification, not even an explicit nil
func (o *MicrosoftGraphUser) UnsetLegalAgeGroupClassification() {
	o.LegalAgeGroupClassification.Unset()
}

// GetLicenseAssignmentStates returns the LicenseAssignmentStates field value if set, zero value otherwise.
func (o *MicrosoftGraphUser) GetLicenseAssignmentStates() []*AnyOfmicrosoftGraphLicenseAssignmentState {
	if o == nil || o.LicenseAssignmentStates == nil {
		var ret []*AnyOfmicrosoftGraphLicenseAssignmentState
		return ret
	}
	return *o.LicenseAssignmentStates
}

// GetLicenseAssignmentStatesOk returns a tuple with the LicenseAssignmentStates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUser) GetLicenseAssignmentStatesOk() (*[]*AnyOfmicrosoftGraphLicenseAssignmentState, bool) {
	if o == nil || o.LicenseAssignmentStates == nil {
		return nil, false
	}
	return o.LicenseAssignmentStates, true
}

// HasLicenseAssignmentStates returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasLicenseAssignmentStates() bool {
	if o != nil && o.LicenseAssignmentStates != nil {
		return true
	}

	return false
}

// SetLicenseAssignmentStates gets a reference to the given []*AnyOfmicrosoftGraphLicenseAssignmentState and assigns it to the LicenseAssignmentStates field.
func (o *MicrosoftGraphUser) SetLicenseAssignmentStates(v []*AnyOfmicrosoftGraphLicenseAssignmentState) {
	o.LicenseAssignmentStates = &v
}

// GetMail returns the Mail field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetMail() string {
	if o == nil || o.Mail.Get() == nil {
		var ret string
		return ret
	}
	return *o.Mail.Get()
}

// GetMailOk returns a tuple with the Mail field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetMailOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Mail.Get(), o.Mail.IsSet()
}

// HasMail returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasMail() bool {
	if o != nil && o.Mail.IsSet() {
		return true
	}

	return false
}

// SetMail gets a reference to the given NullableString and assigns it to the Mail field.
func (o *MicrosoftGraphUser) SetMail(v string) {
	o.Mail.Set(&v)
}
// SetMailNil sets the value for Mail to be an explicit nil
func (o *MicrosoftGraphUser) SetMailNil() {
	o.Mail.Set(nil)
}

// UnsetMail ensures that no value is present for Mail, not even an explicit nil
func (o *MicrosoftGraphUser) UnsetMail() {
	o.Mail.Unset()
}

// GetMailNickname returns the MailNickname field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetMailNickname() string {
	if o == nil || o.MailNickname.Get() == nil {
		var ret string
		return ret
	}
	return *o.MailNickname.Get()
}

// GetMailNicknameOk returns a tuple with the MailNickname field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetMailNicknameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MailNickname.Get(), o.MailNickname.IsSet()
}

// HasMailNickname returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasMailNickname() bool {
	if o != nil && o.MailNickname.IsSet() {
		return true
	}

	return false
}

// SetMailNickname gets a reference to the given NullableString and assigns it to the MailNickname field.
func (o *MicrosoftGraphUser) SetMailNickname(v string) {
	o.MailNickname.Set(&v)
}
// SetMailNicknameNil sets the value for MailNickname to be an explicit nil
func (o *MicrosoftGraphUser) SetMailNicknameNil() {
	o.MailNickname.Set(nil)
}

// UnsetMailNickname ensures that no value is present for MailNickname, not even an explicit nil
func (o *MicrosoftGraphUser) UnsetMailNickname() {
	o.MailNickname.Unset()
}

// GetMobilePhone returns the MobilePhone field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetMobilePhone() string {
	if o == nil || o.MobilePhone.Get() == nil {
		var ret string
		return ret
	}
	return *o.MobilePhone.Get()
}

// GetMobilePhoneOk returns a tuple with the MobilePhone field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetMobilePhoneOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MobilePhone.Get(), o.MobilePhone.IsSet()
}

// HasMobilePhone returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasMobilePhone() bool {
	if o != nil && o.MobilePhone.IsSet() {
		return true
	}

	return false
}

// SetMobilePhone gets a reference to the given NullableString and assigns it to the MobilePhone field.
func (o *MicrosoftGraphUser) SetMobilePhone(v string) {
	o.MobilePhone.Set(&v)
}
// SetMobilePhoneNil sets the value for MobilePhone to be an explicit nil
func (o *MicrosoftGraphUser) SetMobilePhoneNil() {
	o.MobilePhone.Set(nil)
}

// UnsetMobilePhone ensures that no value is present for MobilePhone, not even an explicit nil
func (o *MicrosoftGraphUser) UnsetMobilePhone() {
	o.MobilePhone.Unset()
}

// GetOfficeLocation returns the OfficeLocation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetOfficeLocation() string {
	if o == nil || o.OfficeLocation.Get() == nil {
		var ret string
		return ret
	}
	return *o.OfficeLocation.Get()
}

// GetOfficeLocationOk returns a tuple with the OfficeLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetOfficeLocationOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OfficeLocation.Get(), o.OfficeLocation.IsSet()
}

// HasOfficeLocation returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasOfficeLocation() bool {
	if o != nil && o.OfficeLocation.IsSet() {
		return true
	}

	return false
}

// SetOfficeLocation gets a reference to the given NullableString and assigns it to the OfficeLocation field.
func (o *MicrosoftGraphUser) SetOfficeLocation(v string) {
	o.OfficeLocation.Set(&v)
}
// SetOfficeLocationNil sets the value for OfficeLocation to be an explicit nil
func (o *MicrosoftGraphUser) SetOfficeLocationNil() {
	o.OfficeLocation.Set(nil)
}

// UnsetOfficeLocation ensures that no value is present for OfficeLocation, not even an explicit nil
func (o *MicrosoftGraphUser) UnsetOfficeLocation() {
	o.OfficeLocation.Unset()
}

// GetOnPremisesDistinguishedName returns the OnPremisesDistinguishedName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetOnPremisesDistinguishedName() string {
	if o == nil || o.OnPremisesDistinguishedName.Get() == nil {
		var ret string
		return ret
	}
	return *o.OnPremisesDistinguishedName.Get()
}

// GetOnPremisesDistinguishedNameOk returns a tuple with the OnPremisesDistinguishedName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetOnPremisesDistinguishedNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OnPremisesDistinguishedName.Get(), o.OnPremisesDistinguishedName.IsSet()
}

// HasOnPremisesDistinguishedName returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasOnPremisesDistinguishedName() bool {
	if o != nil && o.OnPremisesDistinguishedName.IsSet() {
		return true
	}

	return false
}

// SetOnPremisesDistinguishedName gets a reference to the given NullableString and assigns it to the OnPremisesDistinguishedName field.
func (o *MicrosoftGraphUser) SetOnPremisesDistinguishedName(v string) {
	o.OnPremisesDistinguishedName.Set(&v)
}
// SetOnPremisesDistinguishedNameNil sets the value for OnPremisesDistinguishedName to be an explicit nil
func (o *MicrosoftGraphUser) SetOnPremisesDistinguishedNameNil() {
	o.OnPremisesDistinguishedName.Set(nil)
}

// UnsetOnPremisesDistinguishedName ensures that no value is present for OnPremisesDistinguishedName, not even an explicit nil
func (o *MicrosoftGraphUser) UnsetOnPremisesDistinguishedName() {
	o.OnPremisesDistinguishedName.Unset()
}

// GetOnPremisesDomainName returns the OnPremisesDomainName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetOnPremisesDomainName() string {
	if o == nil || o.OnPremisesDomainName.Get() == nil {
		var ret string
		return ret
	}
	return *o.OnPremisesDomainName.Get()
}

// GetOnPremisesDomainNameOk returns a tuple with the OnPremisesDomainName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetOnPremisesDomainNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OnPremisesDomainName.Get(), o.OnPremisesDomainName.IsSet()
}

// HasOnPremisesDomainName returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasOnPremisesDomainName() bool {
	if o != nil && o.OnPremisesDomainName.IsSet() {
		return true
	}

	return false
}

// SetOnPremisesDomainName gets a reference to the given NullableString and assigns it to the OnPremisesDomainName field.
func (o *MicrosoftGraphUser) SetOnPremisesDomainName(v string) {
	o.OnPremisesDomainName.Set(&v)
}
// SetOnPremisesDomainNameNil sets the value for OnPremisesDomainName to be an explicit nil
func (o *MicrosoftGraphUser) SetOnPremisesDomainNameNil() {
	o.OnPremisesDomainName.Set(nil)
}

// UnsetOnPremisesDomainName ensures that no value is present for OnPremisesDomainName, not even an explicit nil
func (o *MicrosoftGraphUser) UnsetOnPremisesDomainName() {
	o.OnPremisesDomainName.Unset()
}

// GetOnPremisesExtensionAttributes returns the OnPremisesExtensionAttributes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetOnPremisesExtensionAttributes() AnyOfmicrosoftGraphOnPremisesExtensionAttributes {
	if o == nil  {
		var ret AnyOfmicrosoftGraphOnPremisesExtensionAttributes
		return ret
	}
	return o.OnPremisesExtensionAttributes
}

// GetOnPremisesExtensionAttributesOk returns a tuple with the OnPremisesExtensionAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetOnPremisesExtensionAttributesOk() (*AnyOfmicrosoftGraphOnPremisesExtensionAttributes, bool) {
	if o == nil || o.OnPremisesExtensionAttributes == nil {
		return nil, false
	}
	return &o.OnPremisesExtensionAttributes, true
}

// HasOnPremisesExtensionAttributes returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasOnPremisesExtensionAttributes() bool {
	if o != nil && o.OnPremisesExtensionAttributes != nil {
		return true
	}

	return false
}

// SetOnPremisesExtensionAttributes gets a reference to the given AnyOfmicrosoftGraphOnPremisesExtensionAttributes and assigns it to the OnPremisesExtensionAttributes field.
func (o *MicrosoftGraphUser) SetOnPremisesExtensionAttributes(v AnyOfmicrosoftGraphOnPremisesExtensionAttributes) {
	o.OnPremisesExtensionAttributes = v
}

// GetOnPremisesImmutableId returns the OnPremisesImmutableId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetOnPremisesImmutableId() string {
	if o == nil || o.OnPremisesImmutableId.Get() == nil {
		var ret string
		return ret
	}
	return *o.OnPremisesImmutableId.Get()
}

// GetOnPremisesImmutableIdOk returns a tuple with the OnPremisesImmutableId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetOnPremisesImmutableIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OnPremisesImmutableId.Get(), o.OnPremisesImmutableId.IsSet()
}

// HasOnPremisesImmutableId returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasOnPremisesImmutableId() bool {
	if o != nil && o.OnPremisesImmutableId.IsSet() {
		return true
	}

	return false
}

// SetOnPremisesImmutableId gets a reference to the given NullableString and assigns it to the OnPremisesImmutableId field.
func (o *MicrosoftGraphUser) SetOnPremisesImmutableId(v string) {
	o.OnPremisesImmutableId.Set(&v)
}
// SetOnPremisesImmutableIdNil sets the value for OnPremisesImmutableId to be an explicit nil
func (o *MicrosoftGraphUser) SetOnPremisesImmutableIdNil() {
	o.OnPremisesImmutableId.Set(nil)
}

// UnsetOnPremisesImmutableId ensures that no value is present for OnPremisesImmutableId, not even an explicit nil
func (o *MicrosoftGraphUser) UnsetOnPremisesImmutableId() {
	o.OnPremisesImmutableId.Unset()
}

// GetOnPremisesLastSyncDateTime returns the OnPremisesLastSyncDateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetOnPremisesLastSyncDateTime() time.Time {
	if o == nil || o.OnPremisesLastSyncDateTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.OnPremisesLastSyncDateTime.Get()
}

// GetOnPremisesLastSyncDateTimeOk returns a tuple with the OnPremisesLastSyncDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetOnPremisesLastSyncDateTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OnPremisesLastSyncDateTime.Get(), o.OnPremisesLastSyncDateTime.IsSet()
}

// HasOnPremisesLastSyncDateTime returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasOnPremisesLastSyncDateTime() bool {
	if o != nil && o.OnPremisesLastSyncDateTime.IsSet() {
		return true
	}

	return false
}

// SetOnPremisesLastSyncDateTime gets a reference to the given NullableTime and assigns it to the OnPremisesLastSyncDateTime field.
func (o *MicrosoftGraphUser) SetOnPremisesLastSyncDateTime(v time.Time) {
	o.OnPremisesLastSyncDateTime.Set(&v)
}
// SetOnPremisesLastSyncDateTimeNil sets the value for OnPremisesLastSyncDateTime to be an explicit nil
func (o *MicrosoftGraphUser) SetOnPremisesLastSyncDateTimeNil() {
	o.OnPremisesLastSyncDateTime.Set(nil)
}

// UnsetOnPremisesLastSyncDateTime ensures that no value is present for OnPremisesLastSyncDateTime, not even an explicit nil
func (o *MicrosoftGraphUser) UnsetOnPremisesLastSyncDateTime() {
	o.OnPremisesLastSyncDateTime.Unset()
}

// GetOnPremisesProvisioningErrors returns the OnPremisesProvisioningErrors field value if set, zero value otherwise.
func (o *MicrosoftGraphUser) GetOnPremisesProvisioningErrors() []*AnyOfmicrosoftGraphOnPremisesProvisioningError {
	if o == nil || o.OnPremisesProvisioningErrors == nil {
		var ret []*AnyOfmicrosoftGraphOnPremisesProvisioningError
		return ret
	}
	return *o.OnPremisesProvisioningErrors
}

// GetOnPremisesProvisioningErrorsOk returns a tuple with the OnPremisesProvisioningErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUser) GetOnPremisesProvisioningErrorsOk() (*[]*AnyOfmicrosoftGraphOnPremisesProvisioningError, bool) {
	if o == nil || o.OnPremisesProvisioningErrors == nil {
		return nil, false
	}
	return o.OnPremisesProvisioningErrors, true
}

// HasOnPremisesProvisioningErrors returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasOnPremisesProvisioningErrors() bool {
	if o != nil && o.OnPremisesProvisioningErrors != nil {
		return true
	}

	return false
}

// SetOnPremisesProvisioningErrors gets a reference to the given []*AnyOfmicrosoftGraphOnPremisesProvisioningError and assigns it to the OnPremisesProvisioningErrors field.
func (o *MicrosoftGraphUser) SetOnPremisesProvisioningErrors(v []*AnyOfmicrosoftGraphOnPremisesProvisioningError) {
	o.OnPremisesProvisioningErrors = &v
}

// GetOnPremisesSamAccountName returns the OnPremisesSamAccountName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetOnPremisesSamAccountName() string {
	if o == nil || o.OnPremisesSamAccountName.Get() == nil {
		var ret string
		return ret
	}
	return *o.OnPremisesSamAccountName.Get()
}

// GetOnPremisesSamAccountNameOk returns a tuple with the OnPremisesSamAccountName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetOnPremisesSamAccountNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OnPremisesSamAccountName.Get(), o.OnPremisesSamAccountName.IsSet()
}

// HasOnPremisesSamAccountName returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasOnPremisesSamAccountName() bool {
	if o != nil && o.OnPremisesSamAccountName.IsSet() {
		return true
	}

	return false
}

// SetOnPremisesSamAccountName gets a reference to the given NullableString and assigns it to the OnPremisesSamAccountName field.
func (o *MicrosoftGraphUser) SetOnPremisesSamAccountName(v string) {
	o.OnPremisesSamAccountName.Set(&v)
}
// SetOnPremisesSamAccountNameNil sets the value for OnPremisesSamAccountName to be an explicit nil
func (o *MicrosoftGraphUser) SetOnPremisesSamAccountNameNil() {
	o.OnPremisesSamAccountName.Set(nil)
}

// UnsetOnPremisesSamAccountName ensures that no value is present for OnPremisesSamAccountName, not even an explicit nil
func (o *MicrosoftGraphUser) UnsetOnPremisesSamAccountName() {
	o.OnPremisesSamAccountName.Unset()
}

// GetOnPremisesSecurityIdentifier returns the OnPremisesSecurityIdentifier field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetOnPremisesSecurityIdentifier() string {
	if o == nil || o.OnPremisesSecurityIdentifier.Get() == nil {
		var ret string
		return ret
	}
	return *o.OnPremisesSecurityIdentifier.Get()
}

// GetOnPremisesSecurityIdentifierOk returns a tuple with the OnPremisesSecurityIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetOnPremisesSecurityIdentifierOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OnPremisesSecurityIdentifier.Get(), o.OnPremisesSecurityIdentifier.IsSet()
}

// HasOnPremisesSecurityIdentifier returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasOnPremisesSecurityIdentifier() bool {
	if o != nil && o.OnPremisesSecurityIdentifier.IsSet() {
		return true
	}

	return false
}

// SetOnPremisesSecurityIdentifier gets a reference to the given NullableString and assigns it to the OnPremisesSecurityIdentifier field.
func (o *MicrosoftGraphUser) SetOnPremisesSecurityIdentifier(v string) {
	o.OnPremisesSecurityIdentifier.Set(&v)
}
// SetOnPremisesSecurityIdentifierNil sets the value for OnPremisesSecurityIdentifier to be an explicit nil
func (o *MicrosoftGraphUser) SetOnPremisesSecurityIdentifierNil() {
	o.OnPremisesSecurityIdentifier.Set(nil)
}

// UnsetOnPremisesSecurityIdentifier ensures that no value is present for OnPremisesSecurityIdentifier, not even an explicit nil
func (o *MicrosoftGraphUser) UnsetOnPremisesSecurityIdentifier() {
	o.OnPremisesSecurityIdentifier.Unset()
}

// GetOnPremisesSyncEnabled returns the OnPremisesSyncEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetOnPremisesSyncEnabled() bool {
	if o == nil || o.OnPremisesSyncEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.OnPremisesSyncEnabled.Get()
}

// GetOnPremisesSyncEnabledOk returns a tuple with the OnPremisesSyncEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetOnPremisesSyncEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OnPremisesSyncEnabled.Get(), o.OnPremisesSyncEnabled.IsSet()
}

// HasOnPremisesSyncEnabled returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasOnPremisesSyncEnabled() bool {
	if o != nil && o.OnPremisesSyncEnabled.IsSet() {
		return true
	}

	return false
}

// SetOnPremisesSyncEnabled gets a reference to the given NullableBool and assigns it to the OnPremisesSyncEnabled field.
func (o *MicrosoftGraphUser) SetOnPremisesSyncEnabled(v bool) {
	o.OnPremisesSyncEnabled.Set(&v)
}
// SetOnPremisesSyncEnabledNil sets the value for OnPremisesSyncEnabled to be an explicit nil
func (o *MicrosoftGraphUser) SetOnPremisesSyncEnabledNil() {
	o.OnPremisesSyncEnabled.Set(nil)
}

// UnsetOnPremisesSyncEnabled ensures that no value is present for OnPremisesSyncEnabled, not even an explicit nil
func (o *MicrosoftGraphUser) UnsetOnPremisesSyncEnabled() {
	o.OnPremisesSyncEnabled.Unset()
}

// GetOnPremisesUserPrincipalName returns the OnPremisesUserPrincipalName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetOnPremisesUserPrincipalName() string {
	if o == nil || o.OnPremisesUserPrincipalName.Get() == nil {
		var ret string
		return ret
	}
	return *o.OnPremisesUserPrincipalName.Get()
}

// GetOnPremisesUserPrincipalNameOk returns a tuple with the OnPremisesUserPrincipalName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetOnPremisesUserPrincipalNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OnPremisesUserPrincipalName.Get(), o.OnPremisesUserPrincipalName.IsSet()
}

// HasOnPremisesUserPrincipalName returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasOnPremisesUserPrincipalName() bool {
	if o != nil && o.OnPremisesUserPrincipalName.IsSet() {
		return true
	}

	return false
}

// SetOnPremisesUserPrincipalName gets a reference to the given NullableString and assigns it to the OnPremisesUserPrincipalName field.
func (o *MicrosoftGraphUser) SetOnPremisesUserPrincipalName(v string) {
	o.OnPremisesUserPrincipalName.Set(&v)
}
// SetOnPremisesUserPrincipalNameNil sets the value for OnPremisesUserPrincipalName to be an explicit nil
func (o *MicrosoftGraphUser) SetOnPremisesUserPrincipalNameNil() {
	o.OnPremisesUserPrincipalName.Set(nil)
}

// UnsetOnPremisesUserPrincipalName ensures that no value is present for OnPremisesUserPrincipalName, not even an explicit nil
func (o *MicrosoftGraphUser) UnsetOnPremisesUserPrincipalName() {
	o.OnPremisesUserPrincipalName.Unset()
}

// GetOtherMails returns the OtherMails field value if set, zero value otherwise.
func (o *MicrosoftGraphUser) GetOtherMails() []string {
	if o == nil || o.OtherMails == nil {
		var ret []string
		return ret
	}
	return *o.OtherMails
}

// GetOtherMailsOk returns a tuple with the OtherMails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUser) GetOtherMailsOk() (*[]string, bool) {
	if o == nil || o.OtherMails == nil {
		return nil, false
	}
	return o.OtherMails, true
}

// HasOtherMails returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasOtherMails() bool {
	if o != nil && o.OtherMails != nil {
		return true
	}

	return false
}

// SetOtherMails gets a reference to the given []string and assigns it to the OtherMails field.
func (o *MicrosoftGraphUser) SetOtherMails(v []string) {
	o.OtherMails = &v
}

// GetPasswordPolicies returns the PasswordPolicies field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetPasswordPolicies() string {
	if o == nil || o.PasswordPolicies.Get() == nil {
		var ret string
		return ret
	}
	return *o.PasswordPolicies.Get()
}

// GetPasswordPoliciesOk returns a tuple with the PasswordPolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetPasswordPoliciesOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PasswordPolicies.Get(), o.PasswordPolicies.IsSet()
}

// HasPasswordPolicies returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasPasswordPolicies() bool {
	if o != nil && o.PasswordPolicies.IsSet() {
		return true
	}

	return false
}

// SetPasswordPolicies gets a reference to the given NullableString and assigns it to the PasswordPolicies field.
func (o *MicrosoftGraphUser) SetPasswordPolicies(v string) {
	o.PasswordPolicies.Set(&v)
}
// SetPasswordPoliciesNil sets the value for PasswordPolicies to be an explicit nil
func (o *MicrosoftGraphUser) SetPasswordPoliciesNil() {
	o.PasswordPolicies.Set(nil)
}

// UnsetPasswordPolicies ensures that no value is present for PasswordPolicies, not even an explicit nil
func (o *MicrosoftGraphUser) UnsetPasswordPolicies() {
	o.PasswordPolicies.Unset()
}

// GetPasswordProfile returns the PasswordProfile field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetPasswordProfile() AnyOfmicrosoftGraphPasswordProfile {
	if o == nil  {
		var ret AnyOfmicrosoftGraphPasswordProfile
		return ret
	}
	return o.PasswordProfile
}

// GetPasswordProfileOk returns a tuple with the PasswordProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetPasswordProfileOk() (*AnyOfmicrosoftGraphPasswordProfile, bool) {
	if o == nil || o.PasswordProfile == nil {
		return nil, false
	}
	return &o.PasswordProfile, true
}

// HasPasswordProfile returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasPasswordProfile() bool {
	if o != nil && o.PasswordProfile != nil {
		return true
	}

	return false
}

// SetPasswordProfile gets a reference to the given AnyOfmicrosoftGraphPasswordProfile and assigns it to the PasswordProfile field.
func (o *MicrosoftGraphUser) SetPasswordProfile(v AnyOfmicrosoftGraphPasswordProfile) {
	o.PasswordProfile = v
}

// GetPostalCode returns the PostalCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetPostalCode() string {
	if o == nil || o.PostalCode.Get() == nil {
		var ret string
		return ret
	}
	return *o.PostalCode.Get()
}

// GetPostalCodeOk returns a tuple with the PostalCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetPostalCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PostalCode.Get(), o.PostalCode.IsSet()
}

// HasPostalCode returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasPostalCode() bool {
	if o != nil && o.PostalCode.IsSet() {
		return true
	}

	return false
}

// SetPostalCode gets a reference to the given NullableString and assigns it to the PostalCode field.
func (o *MicrosoftGraphUser) SetPostalCode(v string) {
	o.PostalCode.Set(&v)
}
// SetPostalCodeNil sets the value for PostalCode to be an explicit nil
func (o *MicrosoftGraphUser) SetPostalCodeNil() {
	o.PostalCode.Set(nil)
}

// UnsetPostalCode ensures that no value is present for PostalCode, not even an explicit nil
func (o *MicrosoftGraphUser) UnsetPostalCode() {
	o.PostalCode.Unset()
}

// GetPreferredLanguage returns the PreferredLanguage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetPreferredLanguage() string {
	if o == nil || o.PreferredLanguage.Get() == nil {
		var ret string
		return ret
	}
	return *o.PreferredLanguage.Get()
}

// GetPreferredLanguageOk returns a tuple with the PreferredLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetPreferredLanguageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PreferredLanguage.Get(), o.PreferredLanguage.IsSet()
}

// HasPreferredLanguage returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasPreferredLanguage() bool {
	if o != nil && o.PreferredLanguage.IsSet() {
		return true
	}

	return false
}

// SetPreferredLanguage gets a reference to the given NullableString and assigns it to the PreferredLanguage field.
func (o *MicrosoftGraphUser) SetPreferredLanguage(v string) {
	o.PreferredLanguage.Set(&v)
}
// SetPreferredLanguageNil sets the value for PreferredLanguage to be an explicit nil
func (o *MicrosoftGraphUser) SetPreferredLanguageNil() {
	o.PreferredLanguage.Set(nil)
}

// UnsetPreferredLanguage ensures that no value is present for PreferredLanguage, not even an explicit nil
func (o *MicrosoftGraphUser) UnsetPreferredLanguage() {
	o.PreferredLanguage.Unset()
}

// GetProvisionedPlans returns the ProvisionedPlans field value if set, zero value otherwise.
func (o *MicrosoftGraphUser) GetProvisionedPlans() []MicrosoftGraphProvisionedPlan {
	if o == nil || o.ProvisionedPlans == nil {
		var ret []MicrosoftGraphProvisionedPlan
		return ret
	}
	return *o.ProvisionedPlans
}

// GetProvisionedPlansOk returns a tuple with the ProvisionedPlans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUser) GetProvisionedPlansOk() (*[]MicrosoftGraphProvisionedPlan, bool) {
	if o == nil || o.ProvisionedPlans == nil {
		return nil, false
	}
	return o.ProvisionedPlans, true
}

// HasProvisionedPlans returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasProvisionedPlans() bool {
	if o != nil && o.ProvisionedPlans != nil {
		return true
	}

	return false
}

// SetProvisionedPlans gets a reference to the given []MicrosoftGraphProvisionedPlan and assigns it to the ProvisionedPlans field.
func (o *MicrosoftGraphUser) SetProvisionedPlans(v []MicrosoftGraphProvisionedPlan) {
	o.ProvisionedPlans = &v
}

// GetProxyAddresses returns the ProxyAddresses field value if set, zero value otherwise.
func (o *MicrosoftGraphUser) GetProxyAddresses() []string {
	if o == nil || o.ProxyAddresses == nil {
		var ret []string
		return ret
	}
	return *o.ProxyAddresses
}

// GetProxyAddressesOk returns a tuple with the ProxyAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUser) GetProxyAddressesOk() (*[]string, bool) {
	if o == nil || o.ProxyAddresses == nil {
		return nil, false
	}
	return o.ProxyAddresses, true
}

// HasProxyAddresses returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasProxyAddresses() bool {
	if o != nil && o.ProxyAddresses != nil {
		return true
	}

	return false
}

// SetProxyAddresses gets a reference to the given []string and assigns it to the ProxyAddresses field.
func (o *MicrosoftGraphUser) SetProxyAddresses(v []string) {
	o.ProxyAddresses = &v
}

// GetShowInAddressList returns the ShowInAddressList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetShowInAddressList() bool {
	if o == nil || o.ShowInAddressList.Get() == nil {
		var ret bool
		return ret
	}
	return *o.ShowInAddressList.Get()
}

// GetShowInAddressListOk returns a tuple with the ShowInAddressList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetShowInAddressListOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ShowInAddressList.Get(), o.ShowInAddressList.IsSet()
}

// HasShowInAddressList returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasShowInAddressList() bool {
	if o != nil && o.ShowInAddressList.IsSet() {
		return true
	}

	return false
}

// SetShowInAddressList gets a reference to the given NullableBool and assigns it to the ShowInAddressList field.
func (o *MicrosoftGraphUser) SetShowInAddressList(v bool) {
	o.ShowInAddressList.Set(&v)
}
// SetShowInAddressListNil sets the value for ShowInAddressList to be an explicit nil
func (o *MicrosoftGraphUser) SetShowInAddressListNil() {
	o.ShowInAddressList.Set(nil)
}

// UnsetShowInAddressList ensures that no value is present for ShowInAddressList, not even an explicit nil
func (o *MicrosoftGraphUser) UnsetShowInAddressList() {
	o.ShowInAddressList.Unset()
}

// GetSignInSessionsValidFromDateTime returns the SignInSessionsValidFromDateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetSignInSessionsValidFromDateTime() time.Time {
	if o == nil || o.SignInSessionsValidFromDateTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.SignInSessionsValidFromDateTime.Get()
}

// GetSignInSessionsValidFromDateTimeOk returns a tuple with the SignInSessionsValidFromDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetSignInSessionsValidFromDateTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SignInSessionsValidFromDateTime.Get(), o.SignInSessionsValidFromDateTime.IsSet()
}

// HasSignInSessionsValidFromDateTime returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasSignInSessionsValidFromDateTime() bool {
	if o != nil && o.SignInSessionsValidFromDateTime.IsSet() {
		return true
	}

	return false
}

// SetSignInSessionsValidFromDateTime gets a reference to the given NullableTime and assigns it to the SignInSessionsValidFromDateTime field.
func (o *MicrosoftGraphUser) SetSignInSessionsValidFromDateTime(v time.Time) {
	o.SignInSessionsValidFromDateTime.Set(&v)
}
// SetSignInSessionsValidFromDateTimeNil sets the value for SignInSessionsValidFromDateTime to be an explicit nil
func (o *MicrosoftGraphUser) SetSignInSessionsValidFromDateTimeNil() {
	o.SignInSessionsValidFromDateTime.Set(nil)
}

// UnsetSignInSessionsValidFromDateTime ensures that no value is present for SignInSessionsValidFromDateTime, not even an explicit nil
func (o *MicrosoftGraphUser) UnsetSignInSessionsValidFromDateTime() {
	o.SignInSessionsValidFromDateTime.Unset()
}

// GetState returns the State field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetState() string {
	if o == nil || o.State.Get() == nil {
		var ret string
		return ret
	}
	return *o.State.Get()
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetStateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.State.Get(), o.State.IsSet()
}

// HasState returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasState() bool {
	if o != nil && o.State.IsSet() {
		return true
	}

	return false
}

// SetState gets a reference to the given NullableString and assigns it to the State field.
func (o *MicrosoftGraphUser) SetState(v string) {
	o.State.Set(&v)
}
// SetStateNil sets the value for State to be an explicit nil
func (o *MicrosoftGraphUser) SetStateNil() {
	o.State.Set(nil)
}

// UnsetState ensures that no value is present for State, not even an explicit nil
func (o *MicrosoftGraphUser) UnsetState() {
	o.State.Unset()
}

// GetStreetAddress returns the StreetAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetStreetAddress() string {
	if o == nil || o.StreetAddress.Get() == nil {
		var ret string
		return ret
	}
	return *o.StreetAddress.Get()
}

// GetStreetAddressOk returns a tuple with the StreetAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetStreetAddressOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StreetAddress.Get(), o.StreetAddress.IsSet()
}

// HasStreetAddress returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasStreetAddress() bool {
	if o != nil && o.StreetAddress.IsSet() {
		return true
	}

	return false
}

// SetStreetAddress gets a reference to the given NullableString and assigns it to the StreetAddress field.
func (o *MicrosoftGraphUser) SetStreetAddress(v string) {
	o.StreetAddress.Set(&v)
}
// SetStreetAddressNil sets the value for StreetAddress to be an explicit nil
func (o *MicrosoftGraphUser) SetStreetAddressNil() {
	o.StreetAddress.Set(nil)
}

// UnsetStreetAddress ensures that no value is present for StreetAddress, not even an explicit nil
func (o *MicrosoftGraphUser) UnsetStreetAddress() {
	o.StreetAddress.Unset()
}

// GetSurname returns the Surname field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetSurname() string {
	if o == nil || o.Surname.Get() == nil {
		var ret string
		return ret
	}
	return *o.Surname.Get()
}

// GetSurnameOk returns a tuple with the Surname field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetSurnameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Surname.Get(), o.Surname.IsSet()
}

// HasSurname returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasSurname() bool {
	if o != nil && o.Surname.IsSet() {
		return true
	}

	return false
}

// SetSurname gets a reference to the given NullableString and assigns it to the Surname field.
func (o *MicrosoftGraphUser) SetSurname(v string) {
	o.Surname.Set(&v)
}
// SetSurnameNil sets the value for Surname to be an explicit nil
func (o *MicrosoftGraphUser) SetSurnameNil() {
	o.Surname.Set(nil)
}

// UnsetSurname ensures that no value is present for Surname, not even an explicit nil
func (o *MicrosoftGraphUser) UnsetSurname() {
	o.Surname.Unset()
}

// GetUsageLocation returns the UsageLocation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetUsageLocation() string {
	if o == nil || o.UsageLocation.Get() == nil {
		var ret string
		return ret
	}
	return *o.UsageLocation.Get()
}

// GetUsageLocationOk returns a tuple with the UsageLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetUsageLocationOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UsageLocation.Get(), o.UsageLocation.IsSet()
}

// HasUsageLocation returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasUsageLocation() bool {
	if o != nil && o.UsageLocation.IsSet() {
		return true
	}

	return false
}

// SetUsageLocation gets a reference to the given NullableString and assigns it to the UsageLocation field.
func (o *MicrosoftGraphUser) SetUsageLocation(v string) {
	o.UsageLocation.Set(&v)
}
// SetUsageLocationNil sets the value for UsageLocation to be an explicit nil
func (o *MicrosoftGraphUser) SetUsageLocationNil() {
	o.UsageLocation.Set(nil)
}

// UnsetUsageLocation ensures that no value is present for UsageLocation, not even an explicit nil
func (o *MicrosoftGraphUser) UnsetUsageLocation() {
	o.UsageLocation.Unset()
}

// GetUserPrincipalName returns the UserPrincipalName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetUserPrincipalName() string {
	if o == nil || o.UserPrincipalName.Get() == nil {
		var ret string
		return ret
	}
	return *o.UserPrincipalName.Get()
}

// GetUserPrincipalNameOk returns a tuple with the UserPrincipalName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetUserPrincipalNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UserPrincipalName.Get(), o.UserPrincipalName.IsSet()
}

// HasUserPrincipalName returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasUserPrincipalName() bool {
	if o != nil && o.UserPrincipalName.IsSet() {
		return true
	}

	return false
}

// SetUserPrincipalName gets a reference to the given NullableString and assigns it to the UserPrincipalName field.
func (o *MicrosoftGraphUser) SetUserPrincipalName(v string) {
	o.UserPrincipalName.Set(&v)
}
// SetUserPrincipalNameNil sets the value for UserPrincipalName to be an explicit nil
func (o *MicrosoftGraphUser) SetUserPrincipalNameNil() {
	o.UserPrincipalName.Set(nil)
}

// UnsetUserPrincipalName ensures that no value is present for UserPrincipalName, not even an explicit nil
func (o *MicrosoftGraphUser) UnsetUserPrincipalName() {
	o.UserPrincipalName.Unset()
}

// GetUserType returns the UserType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetUserType() string {
	if o == nil || o.UserType.Get() == nil {
		var ret string
		return ret
	}
	return *o.UserType.Get()
}

// GetUserTypeOk returns a tuple with the UserType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetUserTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UserType.Get(), o.UserType.IsSet()
}

// HasUserType returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasUserType() bool {
	if o != nil && o.UserType.IsSet() {
		return true
	}

	return false
}

// SetUserType gets a reference to the given NullableString and assigns it to the UserType field.
func (o *MicrosoftGraphUser) SetUserType(v string) {
	o.UserType.Set(&v)
}
// SetUserTypeNil sets the value for UserType to be an explicit nil
func (o *MicrosoftGraphUser) SetUserTypeNil() {
	o.UserType.Set(nil)
}

// UnsetUserType ensures that no value is present for UserType, not even an explicit nil
func (o *MicrosoftGraphUser) UnsetUserType() {
	o.UserType.Unset()
}

// GetMailboxSettings returns the MailboxSettings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetMailboxSettings() AnyOfmicrosoftGraphMailboxSettings {
	if o == nil  {
		var ret AnyOfmicrosoftGraphMailboxSettings
		return ret
	}
	return o.MailboxSettings
}

// GetMailboxSettingsOk returns a tuple with the MailboxSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetMailboxSettingsOk() (*AnyOfmicrosoftGraphMailboxSettings, bool) {
	if o == nil || o.MailboxSettings == nil {
		return nil, false
	}
	return &o.MailboxSettings, true
}

// HasMailboxSettings returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasMailboxSettings() bool {
	if o != nil && o.MailboxSettings != nil {
		return true
	}

	return false
}

// SetMailboxSettings gets a reference to the given AnyOfmicrosoftGraphMailboxSettings and assigns it to the MailboxSettings field.
func (o *MicrosoftGraphUser) SetMailboxSettings(v AnyOfmicrosoftGraphMailboxSettings) {
	o.MailboxSettings = v
}

// GetDeviceEnrollmentLimit returns the DeviceEnrollmentLimit field value if set, zero value otherwise.
func (o *MicrosoftGraphUser) GetDeviceEnrollmentLimit() int32 {
	if o == nil || o.DeviceEnrollmentLimit == nil {
		var ret int32
		return ret
	}
	return *o.DeviceEnrollmentLimit
}

// GetDeviceEnrollmentLimitOk returns a tuple with the DeviceEnrollmentLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUser) GetDeviceEnrollmentLimitOk() (*int32, bool) {
	if o == nil || o.DeviceEnrollmentLimit == nil {
		return nil, false
	}
	return o.DeviceEnrollmentLimit, true
}

// HasDeviceEnrollmentLimit returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasDeviceEnrollmentLimit() bool {
	if o != nil && o.DeviceEnrollmentLimit != nil {
		return true
	}

	return false
}

// SetDeviceEnrollmentLimit gets a reference to the given int32 and assigns it to the DeviceEnrollmentLimit field.
func (o *MicrosoftGraphUser) SetDeviceEnrollmentLimit(v int32) {
	o.DeviceEnrollmentLimit = &v
}

// GetAboutMe returns the AboutMe field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetAboutMe() string {
	if o == nil || o.AboutMe.Get() == nil {
		var ret string
		return ret
	}
	return *o.AboutMe.Get()
}

// GetAboutMeOk returns a tuple with the AboutMe field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetAboutMeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AboutMe.Get(), o.AboutMe.IsSet()
}

// HasAboutMe returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasAboutMe() bool {
	if o != nil && o.AboutMe.IsSet() {
		return true
	}

	return false
}

// SetAboutMe gets a reference to the given NullableString and assigns it to the AboutMe field.
func (o *MicrosoftGraphUser) SetAboutMe(v string) {
	o.AboutMe.Set(&v)
}
// SetAboutMeNil sets the value for AboutMe to be an explicit nil
func (o *MicrosoftGraphUser) SetAboutMeNil() {
	o.AboutMe.Set(nil)
}

// UnsetAboutMe ensures that no value is present for AboutMe, not even an explicit nil
func (o *MicrosoftGraphUser) UnsetAboutMe() {
	o.AboutMe.Unset()
}

// GetBirthday returns the Birthday field value if set, zero value otherwise.
func (o *MicrosoftGraphUser) GetBirthday() time.Time {
	if o == nil || o.Birthday == nil {
		var ret time.Time
		return ret
	}
	return *o.Birthday
}

// GetBirthdayOk returns a tuple with the Birthday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUser) GetBirthdayOk() (*time.Time, bool) {
	if o == nil || o.Birthday == nil {
		return nil, false
	}
	return o.Birthday, true
}

// HasBirthday returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasBirthday() bool {
	if o != nil && o.Birthday != nil {
		return true
	}

	return false
}

// SetBirthday gets a reference to the given time.Time and assigns it to the Birthday field.
func (o *MicrosoftGraphUser) SetBirthday(v time.Time) {
	o.Birthday = &v
}

// GetHireDate returns the HireDate field value if set, zero value otherwise.
func (o *MicrosoftGraphUser) GetHireDate() time.Time {
	if o == nil || o.HireDate == nil {
		var ret time.Time
		return ret
	}
	return *o.HireDate
}

// GetHireDateOk returns a tuple with the HireDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUser) GetHireDateOk() (*time.Time, bool) {
	if o == nil || o.HireDate == nil {
		return nil, false
	}
	return o.HireDate, true
}

// HasHireDate returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasHireDate() bool {
	if o != nil && o.HireDate != nil {
		return true
	}

	return false
}

// SetHireDate gets a reference to the given time.Time and assigns it to the HireDate field.
func (o *MicrosoftGraphUser) SetHireDate(v time.Time) {
	o.HireDate = &v
}

// GetInterests returns the Interests field value if set, zero value otherwise.
func (o *MicrosoftGraphUser) GetInterests() []*string {
	if o == nil || o.Interests == nil {
		var ret []*string
		return ret
	}
	return *o.Interests
}

// GetInterestsOk returns a tuple with the Interests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUser) GetInterestsOk() (*[]*string, bool) {
	if o == nil || o.Interests == nil {
		return nil, false
	}
	return o.Interests, true
}

// HasInterests returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasInterests() bool {
	if o != nil && o.Interests != nil {
		return true
	}

	return false
}

// SetInterests gets a reference to the given []*string and assigns it to the Interests field.
func (o *MicrosoftGraphUser) SetInterests(v []*string) {
	o.Interests = &v
}

// GetMySite returns the MySite field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetMySite() string {
	if o == nil || o.MySite.Get() == nil {
		var ret string
		return ret
	}
	return *o.MySite.Get()
}

// GetMySiteOk returns a tuple with the MySite field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetMySiteOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MySite.Get(), o.MySite.IsSet()
}

// HasMySite returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasMySite() bool {
	if o != nil && o.MySite.IsSet() {
		return true
	}

	return false
}

// SetMySite gets a reference to the given NullableString and assigns it to the MySite field.
func (o *MicrosoftGraphUser) SetMySite(v string) {
	o.MySite.Set(&v)
}
// SetMySiteNil sets the value for MySite to be an explicit nil
func (o *MicrosoftGraphUser) SetMySiteNil() {
	o.MySite.Set(nil)
}

// UnsetMySite ensures that no value is present for MySite, not even an explicit nil
func (o *MicrosoftGraphUser) UnsetMySite() {
	o.MySite.Unset()
}

// GetPastProjects returns the PastProjects field value if set, zero value otherwise.
func (o *MicrosoftGraphUser) GetPastProjects() []*string {
	if o == nil || o.PastProjects == nil {
		var ret []*string
		return ret
	}
	return *o.PastProjects
}

// GetPastProjectsOk returns a tuple with the PastProjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUser) GetPastProjectsOk() (*[]*string, bool) {
	if o == nil || o.PastProjects == nil {
		return nil, false
	}
	return o.PastProjects, true
}

// HasPastProjects returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasPastProjects() bool {
	if o != nil && o.PastProjects != nil {
		return true
	}

	return false
}

// SetPastProjects gets a reference to the given []*string and assigns it to the PastProjects field.
func (o *MicrosoftGraphUser) SetPastProjects(v []*string) {
	o.PastProjects = &v
}

// GetPreferredName returns the PreferredName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetPreferredName() string {
	if o == nil || o.PreferredName.Get() == nil {
		var ret string
		return ret
	}
	return *o.PreferredName.Get()
}

// GetPreferredNameOk returns a tuple with the PreferredName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetPreferredNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PreferredName.Get(), o.PreferredName.IsSet()
}

// HasPreferredName returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasPreferredName() bool {
	if o != nil && o.PreferredName.IsSet() {
		return true
	}

	return false
}

// SetPreferredName gets a reference to the given NullableString and assigns it to the PreferredName field.
func (o *MicrosoftGraphUser) SetPreferredName(v string) {
	o.PreferredName.Set(&v)
}
// SetPreferredNameNil sets the value for PreferredName to be an explicit nil
func (o *MicrosoftGraphUser) SetPreferredNameNil() {
	o.PreferredName.Set(nil)
}

// UnsetPreferredName ensures that no value is present for PreferredName, not even an explicit nil
func (o *MicrosoftGraphUser) UnsetPreferredName() {
	o.PreferredName.Unset()
}

// GetResponsibilities returns the Responsibilities field value if set, zero value otherwise.
func (o *MicrosoftGraphUser) GetResponsibilities() []*string {
	if o == nil || o.Responsibilities == nil {
		var ret []*string
		return ret
	}
	return *o.Responsibilities
}

// GetResponsibilitiesOk returns a tuple with the Responsibilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUser) GetResponsibilitiesOk() (*[]*string, bool) {
	if o == nil || o.Responsibilities == nil {
		return nil, false
	}
	return o.Responsibilities, true
}

// HasResponsibilities returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasResponsibilities() bool {
	if o != nil && o.Responsibilities != nil {
		return true
	}

	return false
}

// SetResponsibilities gets a reference to the given []*string and assigns it to the Responsibilities field.
func (o *MicrosoftGraphUser) SetResponsibilities(v []*string) {
	o.Responsibilities = &v
}

// GetSchools returns the Schools field value if set, zero value otherwise.
func (o *MicrosoftGraphUser) GetSchools() []*string {
	if o == nil || o.Schools == nil {
		var ret []*string
		return ret
	}
	return *o.Schools
}

// GetSchoolsOk returns a tuple with the Schools field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUser) GetSchoolsOk() (*[]*string, bool) {
	if o == nil || o.Schools == nil {
		return nil, false
	}
	return o.Schools, true
}

// HasSchools returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasSchools() bool {
	if o != nil && o.Schools != nil {
		return true
	}

	return false
}

// SetSchools gets a reference to the given []*string and assigns it to the Schools field.
func (o *MicrosoftGraphUser) SetSchools(v []*string) {
	o.Schools = &v
}

// GetSkills returns the Skills field value if set, zero value otherwise.
func (o *MicrosoftGraphUser) GetSkills() []*string {
	if o == nil || o.Skills == nil {
		var ret []*string
		return ret
	}
	return *o.Skills
}

// GetSkillsOk returns a tuple with the Skills field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUser) GetSkillsOk() (*[]*string, bool) {
	if o == nil || o.Skills == nil {
		return nil, false
	}
	return o.Skills, true
}

// HasSkills returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasSkills() bool {
	if o != nil && o.Skills != nil {
		return true
	}

	return false
}

// SetSkills gets a reference to the given []*string and assigns it to the Skills field.
func (o *MicrosoftGraphUser) SetSkills(v []*string) {
	o.Skills = &v
}

// GetAppRoleAssignments returns the AppRoleAssignments field value if set, zero value otherwise.
func (o *MicrosoftGraphUser) GetAppRoleAssignments() []MicrosoftGraphAppRoleAssignment {
	if o == nil || o.AppRoleAssignments == nil {
		var ret []MicrosoftGraphAppRoleAssignment
		return ret
	}
	return *o.AppRoleAssignments
}

// GetAppRoleAssignmentsOk returns a tuple with the AppRoleAssignments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUser) GetAppRoleAssignmentsOk() (*[]MicrosoftGraphAppRoleAssignment, bool) {
	if o == nil || o.AppRoleAssignments == nil {
		return nil, false
	}
	return o.AppRoleAssignments, true
}

// HasAppRoleAssignments returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasAppRoleAssignments() bool {
	if o != nil && o.AppRoleAssignments != nil {
		return true
	}

	return false
}

// SetAppRoleAssignments gets a reference to the given []MicrosoftGraphAppRoleAssignment and assigns it to the AppRoleAssignments field.
func (o *MicrosoftGraphUser) SetAppRoleAssignments(v []MicrosoftGraphAppRoleAssignment) {
	o.AppRoleAssignments = &v
}

// GetCreatedObjects returns the CreatedObjects field value if set, zero value otherwise.
func (o *MicrosoftGraphUser) GetCreatedObjects() []MicrosoftGraphDirectoryObject {
	if o == nil || o.CreatedObjects == nil {
		var ret []MicrosoftGraphDirectoryObject
		return ret
	}
	return *o.CreatedObjects
}

// GetCreatedObjectsOk returns a tuple with the CreatedObjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUser) GetCreatedObjectsOk() (*[]MicrosoftGraphDirectoryObject, bool) {
	if o == nil || o.CreatedObjects == nil {
		return nil, false
	}
	return o.CreatedObjects, true
}

// HasCreatedObjects returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasCreatedObjects() bool {
	if o != nil && o.CreatedObjects != nil {
		return true
	}

	return false
}

// SetCreatedObjects gets a reference to the given []MicrosoftGraphDirectoryObject and assigns it to the CreatedObjects field.
func (o *MicrosoftGraphUser) SetCreatedObjects(v []MicrosoftGraphDirectoryObject) {
	o.CreatedObjects = &v
}

// GetDirectReports returns the DirectReports field value if set, zero value otherwise.
func (o *MicrosoftGraphUser) GetDirectReports() []MicrosoftGraphDirectoryObject {
	if o == nil || o.DirectReports == nil {
		var ret []MicrosoftGraphDirectoryObject
		return ret
	}
	return *o.DirectReports
}

// GetDirectReportsOk returns a tuple with the DirectReports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUser) GetDirectReportsOk() (*[]MicrosoftGraphDirectoryObject, bool) {
	if o == nil || o.DirectReports == nil {
		return nil, false
	}
	return o.DirectReports, true
}

// HasDirectReports returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasDirectReports() bool {
	if o != nil && o.DirectReports != nil {
		return true
	}

	return false
}

// SetDirectReports gets a reference to the given []MicrosoftGraphDirectoryObject and assigns it to the DirectReports field.
func (o *MicrosoftGraphUser) SetDirectReports(v []MicrosoftGraphDirectoryObject) {
	o.DirectReports = &v
}

// GetLicenseDetails returns the LicenseDetails field value if set, zero value otherwise.
func (o *MicrosoftGraphUser) GetLicenseDetails() []MicrosoftGraphLicenseDetails {
	if o == nil || o.LicenseDetails == nil {
		var ret []MicrosoftGraphLicenseDetails
		return ret
	}
	return *o.LicenseDetails
}

// GetLicenseDetailsOk returns a tuple with the LicenseDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUser) GetLicenseDetailsOk() (*[]MicrosoftGraphLicenseDetails, bool) {
	if o == nil || o.LicenseDetails == nil {
		return nil, false
	}
	return o.LicenseDetails, true
}

// HasLicenseDetails returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasLicenseDetails() bool {
	if o != nil && o.LicenseDetails != nil {
		return true
	}

	return false
}

// SetLicenseDetails gets a reference to the given []MicrosoftGraphLicenseDetails and assigns it to the LicenseDetails field.
func (o *MicrosoftGraphUser) SetLicenseDetails(v []MicrosoftGraphLicenseDetails) {
	o.LicenseDetails = &v
}

// GetManager returns the Manager field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetManager() AnyOfmicrosoftGraphDirectoryObject {
	if o == nil  {
		var ret AnyOfmicrosoftGraphDirectoryObject
		return ret
	}
	return o.Manager
}

// GetManagerOk returns a tuple with the Manager field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetManagerOk() (*AnyOfmicrosoftGraphDirectoryObject, bool) {
	if o == nil || o.Manager == nil {
		return nil, false
	}
	return &o.Manager, true
}

// HasManager returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasManager() bool {
	if o != nil && o.Manager != nil {
		return true
	}

	return false
}

// SetManager gets a reference to the given AnyOfmicrosoftGraphDirectoryObject and assigns it to the Manager field.
func (o *MicrosoftGraphUser) SetManager(v AnyOfmicrosoftGraphDirectoryObject) {
	o.Manager = v
}

// GetMemberOf returns the MemberOf field value if set, zero value otherwise.
func (o *MicrosoftGraphUser) GetMemberOf() []MicrosoftGraphDirectoryObject {
	if o == nil || o.MemberOf == nil {
		var ret []MicrosoftGraphDirectoryObject
		return ret
	}
	return *o.MemberOf
}

// GetMemberOfOk returns a tuple with the MemberOf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUser) GetMemberOfOk() (*[]MicrosoftGraphDirectoryObject, bool) {
	if o == nil || o.MemberOf == nil {
		return nil, false
	}
	return o.MemberOf, true
}

// HasMemberOf returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasMemberOf() bool {
	if o != nil && o.MemberOf != nil {
		return true
	}

	return false
}

// SetMemberOf gets a reference to the given []MicrosoftGraphDirectoryObject and assigns it to the MemberOf field.
func (o *MicrosoftGraphUser) SetMemberOf(v []MicrosoftGraphDirectoryObject) {
	o.MemberOf = &v
}

// GetOauth2PermissionGrants returns the Oauth2PermissionGrants field value if set, zero value otherwise.
func (o *MicrosoftGraphUser) GetOauth2PermissionGrants() []MicrosoftGraphOAuth2PermissionGrant {
	if o == nil || o.Oauth2PermissionGrants == nil {
		var ret []MicrosoftGraphOAuth2PermissionGrant
		return ret
	}
	return *o.Oauth2PermissionGrants
}

// GetOauth2PermissionGrantsOk returns a tuple with the Oauth2PermissionGrants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUser) GetOauth2PermissionGrantsOk() (*[]MicrosoftGraphOAuth2PermissionGrant, bool) {
	if o == nil || o.Oauth2PermissionGrants == nil {
		return nil, false
	}
	return o.Oauth2PermissionGrants, true
}

// HasOauth2PermissionGrants returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasOauth2PermissionGrants() bool {
	if o != nil && o.Oauth2PermissionGrants != nil {
		return true
	}

	return false
}

// SetOauth2PermissionGrants gets a reference to the given []MicrosoftGraphOAuth2PermissionGrant and assigns it to the Oauth2PermissionGrants field.
func (o *MicrosoftGraphUser) SetOauth2PermissionGrants(v []MicrosoftGraphOAuth2PermissionGrant) {
	o.Oauth2PermissionGrants = &v
}

// GetOwnedDevices returns the OwnedDevices field value if set, zero value otherwise.
func (o *MicrosoftGraphUser) GetOwnedDevices() []MicrosoftGraphDirectoryObject {
	if o == nil || o.OwnedDevices == nil {
		var ret []MicrosoftGraphDirectoryObject
		return ret
	}
	return *o.OwnedDevices
}

// GetOwnedDevicesOk returns a tuple with the OwnedDevices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUser) GetOwnedDevicesOk() (*[]MicrosoftGraphDirectoryObject, bool) {
	if o == nil || o.OwnedDevices == nil {
		return nil, false
	}
	return o.OwnedDevices, true
}

// HasOwnedDevices returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasOwnedDevices() bool {
	if o != nil && o.OwnedDevices != nil {
		return true
	}

	return false
}

// SetOwnedDevices gets a reference to the given []MicrosoftGraphDirectoryObject and assigns it to the OwnedDevices field.
func (o *MicrosoftGraphUser) SetOwnedDevices(v []MicrosoftGraphDirectoryObject) {
	o.OwnedDevices = &v
}

// GetOwnedObjects returns the OwnedObjects field value if set, zero value otherwise.
func (o *MicrosoftGraphUser) GetOwnedObjects() []MicrosoftGraphDirectoryObject {
	if o == nil || o.OwnedObjects == nil {
		var ret []MicrosoftGraphDirectoryObject
		return ret
	}
	return *o.OwnedObjects
}

// GetOwnedObjectsOk returns a tuple with the OwnedObjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUser) GetOwnedObjectsOk() (*[]MicrosoftGraphDirectoryObject, bool) {
	if o == nil || o.OwnedObjects == nil {
		return nil, false
	}
	return o.OwnedObjects, true
}

// HasOwnedObjects returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasOwnedObjects() bool {
	if o != nil && o.OwnedObjects != nil {
		return true
	}

	return false
}

// SetOwnedObjects gets a reference to the given []MicrosoftGraphDirectoryObject and assigns it to the OwnedObjects field.
func (o *MicrosoftGraphUser) SetOwnedObjects(v []MicrosoftGraphDirectoryObject) {
	o.OwnedObjects = &v
}

// GetRegisteredDevices returns the RegisteredDevices field value if set, zero value otherwise.
func (o *MicrosoftGraphUser) GetRegisteredDevices() []MicrosoftGraphDirectoryObject {
	if o == nil || o.RegisteredDevices == nil {
		var ret []MicrosoftGraphDirectoryObject
		return ret
	}
	return *o.RegisteredDevices
}

// GetRegisteredDevicesOk returns a tuple with the RegisteredDevices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUser) GetRegisteredDevicesOk() (*[]MicrosoftGraphDirectoryObject, bool) {
	if o == nil || o.RegisteredDevices == nil {
		return nil, false
	}
	return o.RegisteredDevices, true
}

// HasRegisteredDevices returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasRegisteredDevices() bool {
	if o != nil && o.RegisteredDevices != nil {
		return true
	}

	return false
}

// SetRegisteredDevices gets a reference to the given []MicrosoftGraphDirectoryObject and assigns it to the RegisteredDevices field.
func (o *MicrosoftGraphUser) SetRegisteredDevices(v []MicrosoftGraphDirectoryObject) {
	o.RegisteredDevices = &v
}

// GetScopedRoleMemberOf returns the ScopedRoleMemberOf field value if set, zero value otherwise.
func (o *MicrosoftGraphUser) GetScopedRoleMemberOf() []MicrosoftGraphScopedRoleMembership {
	if o == nil || o.ScopedRoleMemberOf == nil {
		var ret []MicrosoftGraphScopedRoleMembership
		return ret
	}
	return *o.ScopedRoleMemberOf
}

// GetScopedRoleMemberOfOk returns a tuple with the ScopedRoleMemberOf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUser) GetScopedRoleMemberOfOk() (*[]MicrosoftGraphScopedRoleMembership, bool) {
	if o == nil || o.ScopedRoleMemberOf == nil {
		return nil, false
	}
	return o.ScopedRoleMemberOf, true
}

// HasScopedRoleMemberOf returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasScopedRoleMemberOf() bool {
	if o != nil && o.ScopedRoleMemberOf != nil {
		return true
	}

	return false
}

// SetScopedRoleMemberOf gets a reference to the given []MicrosoftGraphScopedRoleMembership and assigns it to the ScopedRoleMemberOf field.
func (o *MicrosoftGraphUser) SetScopedRoleMemberOf(v []MicrosoftGraphScopedRoleMembership) {
	o.ScopedRoleMemberOf = &v
}

// GetTransitiveMemberOf returns the TransitiveMemberOf field value if set, zero value otherwise.
func (o *MicrosoftGraphUser) GetTransitiveMemberOf() []MicrosoftGraphDirectoryObject {
	if o == nil || o.TransitiveMemberOf == nil {
		var ret []MicrosoftGraphDirectoryObject
		return ret
	}
	return *o.TransitiveMemberOf
}

// GetTransitiveMemberOfOk returns a tuple with the TransitiveMemberOf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUser) GetTransitiveMemberOfOk() (*[]MicrosoftGraphDirectoryObject, bool) {
	if o == nil || o.TransitiveMemberOf == nil {
		return nil, false
	}
	return o.TransitiveMemberOf, true
}

// HasTransitiveMemberOf returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasTransitiveMemberOf() bool {
	if o != nil && o.TransitiveMemberOf != nil {
		return true
	}

	return false
}

// SetTransitiveMemberOf gets a reference to the given []MicrosoftGraphDirectoryObject and assigns it to the TransitiveMemberOf field.
func (o *MicrosoftGraphUser) SetTransitiveMemberOf(v []MicrosoftGraphDirectoryObject) {
	o.TransitiveMemberOf = &v
}

// GetCalendar returns the Calendar field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetCalendar() AnyOfmicrosoftGraphCalendar {
	if o == nil  {
		var ret AnyOfmicrosoftGraphCalendar
		return ret
	}
	return o.Calendar
}

// GetCalendarOk returns a tuple with the Calendar field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetCalendarOk() (*AnyOfmicrosoftGraphCalendar, bool) {
	if o == nil || o.Calendar == nil {
		return nil, false
	}
	return &o.Calendar, true
}

// HasCalendar returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasCalendar() bool {
	if o != nil && o.Calendar != nil {
		return true
	}

	return false
}

// SetCalendar gets a reference to the given AnyOfmicrosoftGraphCalendar and assigns it to the Calendar field.
func (o *MicrosoftGraphUser) SetCalendar(v AnyOfmicrosoftGraphCalendar) {
	o.Calendar = v
}

// GetCalendarGroups returns the CalendarGroups field value if set, zero value otherwise.
func (o *MicrosoftGraphUser) GetCalendarGroups() []MicrosoftGraphCalendarGroup {
	if o == nil || o.CalendarGroups == nil {
		var ret []MicrosoftGraphCalendarGroup
		return ret
	}
	return *o.CalendarGroups
}

// GetCalendarGroupsOk returns a tuple with the CalendarGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUser) GetCalendarGroupsOk() (*[]MicrosoftGraphCalendarGroup, bool) {
	if o == nil || o.CalendarGroups == nil {
		return nil, false
	}
	return o.CalendarGroups, true
}

// HasCalendarGroups returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasCalendarGroups() bool {
	if o != nil && o.CalendarGroups != nil {
		return true
	}

	return false
}

// SetCalendarGroups gets a reference to the given []MicrosoftGraphCalendarGroup and assigns it to the CalendarGroups field.
func (o *MicrosoftGraphUser) SetCalendarGroups(v []MicrosoftGraphCalendarGroup) {
	o.CalendarGroups = &v
}

// GetCalendars returns the Calendars field value if set, zero value otherwise.
func (o *MicrosoftGraphUser) GetCalendars() []MicrosoftGraphCalendar {
	if o == nil || o.Calendars == nil {
		var ret []MicrosoftGraphCalendar
		return ret
	}
	return *o.Calendars
}

// GetCalendarsOk returns a tuple with the Calendars field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUser) GetCalendarsOk() (*[]MicrosoftGraphCalendar, bool) {
	if o == nil || o.Calendars == nil {
		return nil, false
	}
	return o.Calendars, true
}

// HasCalendars returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasCalendars() bool {
	if o != nil && o.Calendars != nil {
		return true
	}

	return false
}

// SetCalendars gets a reference to the given []MicrosoftGraphCalendar and assigns it to the Calendars field.
func (o *MicrosoftGraphUser) SetCalendars(v []MicrosoftGraphCalendar) {
	o.Calendars = &v
}

// GetCalendarView returns the CalendarView field value if set, zero value otherwise.
func (o *MicrosoftGraphUser) GetCalendarView() []MicrosoftGraphEvent {
	if o == nil || o.CalendarView == nil {
		var ret []MicrosoftGraphEvent
		return ret
	}
	return *o.CalendarView
}

// GetCalendarViewOk returns a tuple with the CalendarView field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUser) GetCalendarViewOk() (*[]MicrosoftGraphEvent, bool) {
	if o == nil || o.CalendarView == nil {
		return nil, false
	}
	return o.CalendarView, true
}

// HasCalendarView returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasCalendarView() bool {
	if o != nil && o.CalendarView != nil {
		return true
	}

	return false
}

// SetCalendarView gets a reference to the given []MicrosoftGraphEvent and assigns it to the CalendarView field.
func (o *MicrosoftGraphUser) SetCalendarView(v []MicrosoftGraphEvent) {
	o.CalendarView = &v
}

// GetContactFolders returns the ContactFolders field value if set, zero value otherwise.
func (o *MicrosoftGraphUser) GetContactFolders() []MicrosoftGraphContactFolder {
	if o == nil || o.ContactFolders == nil {
		var ret []MicrosoftGraphContactFolder
		return ret
	}
	return *o.ContactFolders
}

// GetContactFoldersOk returns a tuple with the ContactFolders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUser) GetContactFoldersOk() (*[]MicrosoftGraphContactFolder, bool) {
	if o == nil || o.ContactFolders == nil {
		return nil, false
	}
	return o.ContactFolders, true
}

// HasContactFolders returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasContactFolders() bool {
	if o != nil && o.ContactFolders != nil {
		return true
	}

	return false
}

// SetContactFolders gets a reference to the given []MicrosoftGraphContactFolder and assigns it to the ContactFolders field.
func (o *MicrosoftGraphUser) SetContactFolders(v []MicrosoftGraphContactFolder) {
	o.ContactFolders = &v
}

// GetContacts returns the Contacts field value if set, zero value otherwise.
func (o *MicrosoftGraphUser) GetContacts() []MicrosoftGraphContact {
	if o == nil || o.Contacts == nil {
		var ret []MicrosoftGraphContact
		return ret
	}
	return *o.Contacts
}

// GetContactsOk returns a tuple with the Contacts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUser) GetContactsOk() (*[]MicrosoftGraphContact, bool) {
	if o == nil || o.Contacts == nil {
		return nil, false
	}
	return o.Contacts, true
}

// HasContacts returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasContacts() bool {
	if o != nil && o.Contacts != nil {
		return true
	}

	return false
}

// SetContacts gets a reference to the given []MicrosoftGraphContact and assigns it to the Contacts field.
func (o *MicrosoftGraphUser) SetContacts(v []MicrosoftGraphContact) {
	o.Contacts = &v
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *MicrosoftGraphUser) GetEvents() []MicrosoftGraphEvent {
	if o == nil || o.Events == nil {
		var ret []MicrosoftGraphEvent
		return ret
	}
	return *o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUser) GetEventsOk() (*[]MicrosoftGraphEvent, bool) {
	if o == nil || o.Events == nil {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasEvents() bool {
	if o != nil && o.Events != nil {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []MicrosoftGraphEvent and assigns it to the Events field.
func (o *MicrosoftGraphUser) SetEvents(v []MicrosoftGraphEvent) {
	o.Events = &v
}

// GetInferenceClassification returns the InferenceClassification field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetInferenceClassification() AnyOfmicrosoftGraphInferenceClassification {
	if o == nil  {
		var ret AnyOfmicrosoftGraphInferenceClassification
		return ret
	}
	return o.InferenceClassification
}

// GetInferenceClassificationOk returns a tuple with the InferenceClassification field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetInferenceClassificationOk() (*AnyOfmicrosoftGraphInferenceClassification, bool) {
	if o == nil || o.InferenceClassification == nil {
		return nil, false
	}
	return &o.InferenceClassification, true
}

// HasInferenceClassification returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasInferenceClassification() bool {
	if o != nil && o.InferenceClassification != nil {
		return true
	}

	return false
}

// SetInferenceClassification gets a reference to the given AnyOfmicrosoftGraphInferenceClassification and assigns it to the InferenceClassification field.
func (o *MicrosoftGraphUser) SetInferenceClassification(v AnyOfmicrosoftGraphInferenceClassification) {
	o.InferenceClassification = v
}

// GetMailFolders returns the MailFolders field value if set, zero value otherwise.
func (o *MicrosoftGraphUser) GetMailFolders() []MicrosoftGraphMailFolder {
	if o == nil || o.MailFolders == nil {
		var ret []MicrosoftGraphMailFolder
		return ret
	}
	return *o.MailFolders
}

// GetMailFoldersOk returns a tuple with the MailFolders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUser) GetMailFoldersOk() (*[]MicrosoftGraphMailFolder, bool) {
	if o == nil || o.MailFolders == nil {
		return nil, false
	}
	return o.MailFolders, true
}

// HasMailFolders returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasMailFolders() bool {
	if o != nil && o.MailFolders != nil {
		return true
	}

	return false
}

// SetMailFolders gets a reference to the given []MicrosoftGraphMailFolder and assigns it to the MailFolders field.
func (o *MicrosoftGraphUser) SetMailFolders(v []MicrosoftGraphMailFolder) {
	o.MailFolders = &v
}

// GetMessages returns the Messages field value if set, zero value otherwise.
func (o *MicrosoftGraphUser) GetMessages() []MicrosoftGraphMessage {
	if o == nil || o.Messages == nil {
		var ret []MicrosoftGraphMessage
		return ret
	}
	return *o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUser) GetMessagesOk() (*[]MicrosoftGraphMessage, bool) {
	if o == nil || o.Messages == nil {
		return nil, false
	}
	return o.Messages, true
}

// HasMessages returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasMessages() bool {
	if o != nil && o.Messages != nil {
		return true
	}

	return false
}

// SetMessages gets a reference to the given []MicrosoftGraphMessage and assigns it to the Messages field.
func (o *MicrosoftGraphUser) SetMessages(v []MicrosoftGraphMessage) {
	o.Messages = &v
}

// GetOutlook returns the Outlook field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetOutlook() AnyOfmicrosoftGraphOutlookUser {
	if o == nil  {
		var ret AnyOfmicrosoftGraphOutlookUser
		return ret
	}
	return o.Outlook
}

// GetOutlookOk returns a tuple with the Outlook field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetOutlookOk() (*AnyOfmicrosoftGraphOutlookUser, bool) {
	if o == nil || o.Outlook == nil {
		return nil, false
	}
	return &o.Outlook, true
}

// HasOutlook returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasOutlook() bool {
	if o != nil && o.Outlook != nil {
		return true
	}

	return false
}

// SetOutlook gets a reference to the given AnyOfmicrosoftGraphOutlookUser and assigns it to the Outlook field.
func (o *MicrosoftGraphUser) SetOutlook(v AnyOfmicrosoftGraphOutlookUser) {
	o.Outlook = v
}

// GetPeople returns the People field value if set, zero value otherwise.
func (o *MicrosoftGraphUser) GetPeople() []MicrosoftGraphPerson {
	if o == nil || o.People == nil {
		var ret []MicrosoftGraphPerson
		return ret
	}
	return *o.People
}

// GetPeopleOk returns a tuple with the People field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUser) GetPeopleOk() (*[]MicrosoftGraphPerson, bool) {
	if o == nil || o.People == nil {
		return nil, false
	}
	return o.People, true
}

// HasPeople returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasPeople() bool {
	if o != nil && o.People != nil {
		return true
	}

	return false
}

// SetPeople gets a reference to the given []MicrosoftGraphPerson and assigns it to the People field.
func (o *MicrosoftGraphUser) SetPeople(v []MicrosoftGraphPerson) {
	o.People = &v
}

// GetDrive returns the Drive field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetDrive() AnyOfmicrosoftGraphDrive {
	if o == nil  {
		var ret AnyOfmicrosoftGraphDrive
		return ret
	}
	return o.Drive
}

// GetDriveOk returns a tuple with the Drive field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetDriveOk() (*AnyOfmicrosoftGraphDrive, bool) {
	if o == nil || o.Drive == nil {
		return nil, false
	}
	return &o.Drive, true
}

// HasDrive returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasDrive() bool {
	if o != nil && o.Drive != nil {
		return true
	}

	return false
}

// SetDrive gets a reference to the given AnyOfmicrosoftGraphDrive and assigns it to the Drive field.
func (o *MicrosoftGraphUser) SetDrive(v AnyOfmicrosoftGraphDrive) {
	o.Drive = v
}

// GetDrives returns the Drives field value if set, zero value otherwise.
func (o *MicrosoftGraphUser) GetDrives() []MicrosoftGraphDrive {
	if o == nil || o.Drives == nil {
		var ret []MicrosoftGraphDrive
		return ret
	}
	return *o.Drives
}

// GetDrivesOk returns a tuple with the Drives field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUser) GetDrivesOk() (*[]MicrosoftGraphDrive, bool) {
	if o == nil || o.Drives == nil {
		return nil, false
	}
	return o.Drives, true
}

// HasDrives returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasDrives() bool {
	if o != nil && o.Drives != nil {
		return true
	}

	return false
}

// SetDrives gets a reference to the given []MicrosoftGraphDrive and assigns it to the Drives field.
func (o *MicrosoftGraphUser) SetDrives(v []MicrosoftGraphDrive) {
	o.Drives = &v
}

// GetFollowedSites returns the FollowedSites field value if set, zero value otherwise.
func (o *MicrosoftGraphUser) GetFollowedSites() []MicrosoftGraphSite {
	if o == nil || o.FollowedSites == nil {
		var ret []MicrosoftGraphSite
		return ret
	}
	return *o.FollowedSites
}

// GetFollowedSitesOk returns a tuple with the FollowedSites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUser) GetFollowedSitesOk() (*[]MicrosoftGraphSite, bool) {
	if o == nil || o.FollowedSites == nil {
		return nil, false
	}
	return o.FollowedSites, true
}

// HasFollowedSites returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasFollowedSites() bool {
	if o != nil && o.FollowedSites != nil {
		return true
	}

	return false
}

// SetFollowedSites gets a reference to the given []MicrosoftGraphSite and assigns it to the FollowedSites field.
func (o *MicrosoftGraphUser) SetFollowedSites(v []MicrosoftGraphSite) {
	o.FollowedSites = &v
}

// GetExtensions returns the Extensions field value if set, zero value otherwise.
func (o *MicrosoftGraphUser) GetExtensions() []MicrosoftGraphExtension {
	if o == nil || o.Extensions == nil {
		var ret []MicrosoftGraphExtension
		return ret
	}
	return *o.Extensions
}

// GetExtensionsOk returns a tuple with the Extensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUser) GetExtensionsOk() (*[]MicrosoftGraphExtension, bool) {
	if o == nil || o.Extensions == nil {
		return nil, false
	}
	return o.Extensions, true
}

// HasExtensions returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasExtensions() bool {
	if o != nil && o.Extensions != nil {
		return true
	}

	return false
}

// SetExtensions gets a reference to the given []MicrosoftGraphExtension and assigns it to the Extensions field.
func (o *MicrosoftGraphUser) SetExtensions(v []MicrosoftGraphExtension) {
	o.Extensions = &v
}

// GetAgreementAcceptances returns the AgreementAcceptances field value if set, zero value otherwise.
func (o *MicrosoftGraphUser) GetAgreementAcceptances() []MicrosoftGraphAgreementAcceptance {
	if o == nil || o.AgreementAcceptances == nil {
		var ret []MicrosoftGraphAgreementAcceptance
		return ret
	}
	return *o.AgreementAcceptances
}

// GetAgreementAcceptancesOk returns a tuple with the AgreementAcceptances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUser) GetAgreementAcceptancesOk() (*[]MicrosoftGraphAgreementAcceptance, bool) {
	if o == nil || o.AgreementAcceptances == nil {
		return nil, false
	}
	return o.AgreementAcceptances, true
}

// HasAgreementAcceptances returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasAgreementAcceptances() bool {
	if o != nil && o.AgreementAcceptances != nil {
		return true
	}

	return false
}

// SetAgreementAcceptances gets a reference to the given []MicrosoftGraphAgreementAcceptance and assigns it to the AgreementAcceptances field.
func (o *MicrosoftGraphUser) SetAgreementAcceptances(v []MicrosoftGraphAgreementAcceptance) {
	o.AgreementAcceptances = &v
}

// GetManagedDevices returns the ManagedDevices field value if set, zero value otherwise.
func (o *MicrosoftGraphUser) GetManagedDevices() []MicrosoftGraphManagedDevice {
	if o == nil || o.ManagedDevices == nil {
		var ret []MicrosoftGraphManagedDevice
		return ret
	}
	return *o.ManagedDevices
}

// GetManagedDevicesOk returns a tuple with the ManagedDevices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUser) GetManagedDevicesOk() (*[]MicrosoftGraphManagedDevice, bool) {
	if o == nil || o.ManagedDevices == nil {
		return nil, false
	}
	return o.ManagedDevices, true
}

// HasManagedDevices returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasManagedDevices() bool {
	if o != nil && o.ManagedDevices != nil {
		return true
	}

	return false
}

// SetManagedDevices gets a reference to the given []MicrosoftGraphManagedDevice and assigns it to the ManagedDevices field.
func (o *MicrosoftGraphUser) SetManagedDevices(v []MicrosoftGraphManagedDevice) {
	o.ManagedDevices = &v
}

// GetManagedAppRegistrations returns the ManagedAppRegistrations field value if set, zero value otherwise.
func (o *MicrosoftGraphUser) GetManagedAppRegistrations() []MicrosoftGraphManagedAppRegistration {
	if o == nil || o.ManagedAppRegistrations == nil {
		var ret []MicrosoftGraphManagedAppRegistration
		return ret
	}
	return *o.ManagedAppRegistrations
}

// GetManagedAppRegistrationsOk returns a tuple with the ManagedAppRegistrations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUser) GetManagedAppRegistrationsOk() (*[]MicrosoftGraphManagedAppRegistration, bool) {
	if o == nil || o.ManagedAppRegistrations == nil {
		return nil, false
	}
	return o.ManagedAppRegistrations, true
}

// HasManagedAppRegistrations returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasManagedAppRegistrations() bool {
	if o != nil && o.ManagedAppRegistrations != nil {
		return true
	}

	return false
}

// SetManagedAppRegistrations gets a reference to the given []MicrosoftGraphManagedAppRegistration and assigns it to the ManagedAppRegistrations field.
func (o *MicrosoftGraphUser) SetManagedAppRegistrations(v []MicrosoftGraphManagedAppRegistration) {
	o.ManagedAppRegistrations = &v
}

// GetDeviceManagementTroubleshootingEvents returns the DeviceManagementTroubleshootingEvents field value if set, zero value otherwise.
func (o *MicrosoftGraphUser) GetDeviceManagementTroubleshootingEvents() []MicrosoftGraphDeviceManagementTroubleshootingEvent {
	if o == nil || o.DeviceManagementTroubleshootingEvents == nil {
		var ret []MicrosoftGraphDeviceManagementTroubleshootingEvent
		return ret
	}
	return *o.DeviceManagementTroubleshootingEvents
}

// GetDeviceManagementTroubleshootingEventsOk returns a tuple with the DeviceManagementTroubleshootingEvents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUser) GetDeviceManagementTroubleshootingEventsOk() (*[]MicrosoftGraphDeviceManagementTroubleshootingEvent, bool) {
	if o == nil || o.DeviceManagementTroubleshootingEvents == nil {
		return nil, false
	}
	return o.DeviceManagementTroubleshootingEvents, true
}

// HasDeviceManagementTroubleshootingEvents returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasDeviceManagementTroubleshootingEvents() bool {
	if o != nil && o.DeviceManagementTroubleshootingEvents != nil {
		return true
	}

	return false
}

// SetDeviceManagementTroubleshootingEvents gets a reference to the given []MicrosoftGraphDeviceManagementTroubleshootingEvent and assigns it to the DeviceManagementTroubleshootingEvents field.
func (o *MicrosoftGraphUser) SetDeviceManagementTroubleshootingEvents(v []MicrosoftGraphDeviceManagementTroubleshootingEvent) {
	o.DeviceManagementTroubleshootingEvents = &v
}

// GetPlanner returns the Planner field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetPlanner() AnyOfmicrosoftGraphPlannerUser {
	if o == nil  {
		var ret AnyOfmicrosoftGraphPlannerUser
		return ret
	}
	return o.Planner
}

// GetPlannerOk returns a tuple with the Planner field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetPlannerOk() (*AnyOfmicrosoftGraphPlannerUser, bool) {
	if o == nil || o.Planner == nil {
		return nil, false
	}
	return &o.Planner, true
}

// HasPlanner returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasPlanner() bool {
	if o != nil && o.Planner != nil {
		return true
	}

	return false
}

// SetPlanner gets a reference to the given AnyOfmicrosoftGraphPlannerUser and assigns it to the Planner field.
func (o *MicrosoftGraphUser) SetPlanner(v AnyOfmicrosoftGraphPlannerUser) {
	o.Planner = v
}

// GetInsights returns the Insights field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetInsights() AnyOfmicrosoftGraphOfficeGraphInsights {
	if o == nil  {
		var ret AnyOfmicrosoftGraphOfficeGraphInsights
		return ret
	}
	return o.Insights
}

// GetInsightsOk returns a tuple with the Insights field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetInsightsOk() (*AnyOfmicrosoftGraphOfficeGraphInsights, bool) {
	if o == nil || o.Insights == nil {
		return nil, false
	}
	return &o.Insights, true
}

// HasInsights returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasInsights() bool {
	if o != nil && o.Insights != nil {
		return true
	}

	return false
}

// SetInsights gets a reference to the given AnyOfmicrosoftGraphOfficeGraphInsights and assigns it to the Insights field.
func (o *MicrosoftGraphUser) SetInsights(v AnyOfmicrosoftGraphOfficeGraphInsights) {
	o.Insights = v
}

// GetSettings returns the Settings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetSettings() AnyOfmicrosoftGraphUserSettings {
	if o == nil  {
		var ret AnyOfmicrosoftGraphUserSettings
		return ret
	}
	return o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetSettingsOk() (*AnyOfmicrosoftGraphUserSettings, bool) {
	if o == nil || o.Settings == nil {
		return nil, false
	}
	return &o.Settings, true
}

// HasSettings returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasSettings() bool {
	if o != nil && o.Settings != nil {
		return true
	}

	return false
}

// SetSettings gets a reference to the given AnyOfmicrosoftGraphUserSettings and assigns it to the Settings field.
func (o *MicrosoftGraphUser) SetSettings(v AnyOfmicrosoftGraphUserSettings) {
	o.Settings = v
}

// GetOnenote returns the Onenote field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetOnenote() AnyOfmicrosoftGraphOnenote {
	if o == nil  {
		var ret AnyOfmicrosoftGraphOnenote
		return ret
	}
	return o.Onenote
}

// GetOnenoteOk returns a tuple with the Onenote field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetOnenoteOk() (*AnyOfmicrosoftGraphOnenote, bool) {
	if o == nil || o.Onenote == nil {
		return nil, false
	}
	return &o.Onenote, true
}

// HasOnenote returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasOnenote() bool {
	if o != nil && o.Onenote != nil {
		return true
	}

	return false
}

// SetOnenote gets a reference to the given AnyOfmicrosoftGraphOnenote and assigns it to the Onenote field.
func (o *MicrosoftGraphUser) SetOnenote(v AnyOfmicrosoftGraphOnenote) {
	o.Onenote = v
}

// GetPhoto returns the Photo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetPhoto() AnyOfmicrosoftGraphProfilePhoto {
	if o == nil  {
		var ret AnyOfmicrosoftGraphProfilePhoto
		return ret
	}
	return o.Photo
}

// GetPhotoOk returns a tuple with the Photo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetPhotoOk() (*AnyOfmicrosoftGraphProfilePhoto, bool) {
	if o == nil || o.Photo == nil {
		return nil, false
	}
	return &o.Photo, true
}

// HasPhoto returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasPhoto() bool {
	if o != nil && o.Photo != nil {
		return true
	}

	return false
}

// SetPhoto gets a reference to the given AnyOfmicrosoftGraphProfilePhoto and assigns it to the Photo field.
func (o *MicrosoftGraphUser) SetPhoto(v AnyOfmicrosoftGraphProfilePhoto) {
	o.Photo = v
}

// GetPhotos returns the Photos field value if set, zero value otherwise.
func (o *MicrosoftGraphUser) GetPhotos() []MicrosoftGraphProfilePhoto {
	if o == nil || o.Photos == nil {
		var ret []MicrosoftGraphProfilePhoto
		return ret
	}
	return *o.Photos
}

// GetPhotosOk returns a tuple with the Photos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUser) GetPhotosOk() (*[]MicrosoftGraphProfilePhoto, bool) {
	if o == nil || o.Photos == nil {
		return nil, false
	}
	return o.Photos, true
}

// HasPhotos returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasPhotos() bool {
	if o != nil && o.Photos != nil {
		return true
	}

	return false
}

// SetPhotos gets a reference to the given []MicrosoftGraphProfilePhoto and assigns it to the Photos field.
func (o *MicrosoftGraphUser) SetPhotos(v []MicrosoftGraphProfilePhoto) {
	o.Photos = &v
}

// GetActivities returns the Activities field value if set, zero value otherwise.
func (o *MicrosoftGraphUser) GetActivities() []MicrosoftGraphUserActivity {
	if o == nil || o.Activities == nil {
		var ret []MicrosoftGraphUserActivity
		return ret
	}
	return *o.Activities
}

// GetActivitiesOk returns a tuple with the Activities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUser) GetActivitiesOk() (*[]MicrosoftGraphUserActivity, bool) {
	if o == nil || o.Activities == nil {
		return nil, false
	}
	return o.Activities, true
}

// HasActivities returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasActivities() bool {
	if o != nil && o.Activities != nil {
		return true
	}

	return false
}

// SetActivities gets a reference to the given []MicrosoftGraphUserActivity and assigns it to the Activities field.
func (o *MicrosoftGraphUser) SetActivities(v []MicrosoftGraphUserActivity) {
	o.Activities = &v
}

// GetOnlineMeetings returns the OnlineMeetings field value if set, zero value otherwise.
func (o *MicrosoftGraphUser) GetOnlineMeetings() []MicrosoftGraphOnlineMeeting {
	if o == nil || o.OnlineMeetings == nil {
		var ret []MicrosoftGraphOnlineMeeting
		return ret
	}
	return *o.OnlineMeetings
}

// GetOnlineMeetingsOk returns a tuple with the OnlineMeetings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUser) GetOnlineMeetingsOk() (*[]MicrosoftGraphOnlineMeeting, bool) {
	if o == nil || o.OnlineMeetings == nil {
		return nil, false
	}
	return o.OnlineMeetings, true
}

// HasOnlineMeetings returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasOnlineMeetings() bool {
	if o != nil && o.OnlineMeetings != nil {
		return true
	}

	return false
}

// SetOnlineMeetings gets a reference to the given []MicrosoftGraphOnlineMeeting and assigns it to the OnlineMeetings field.
func (o *MicrosoftGraphUser) SetOnlineMeetings(v []MicrosoftGraphOnlineMeeting) {
	o.OnlineMeetings = &v
}

// GetPresence returns the Presence field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetPresence() AnyOfmicrosoftGraphPresence {
	if o == nil  {
		var ret AnyOfmicrosoftGraphPresence
		return ret
	}
	return o.Presence
}

// GetPresenceOk returns a tuple with the Presence field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetPresenceOk() (*AnyOfmicrosoftGraphPresence, bool) {
	if o == nil || o.Presence == nil {
		return nil, false
	}
	return &o.Presence, true
}

// HasPresence returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasPresence() bool {
	if o != nil && o.Presence != nil {
		return true
	}

	return false
}

// SetPresence gets a reference to the given AnyOfmicrosoftGraphPresence and assigns it to the Presence field.
func (o *MicrosoftGraphUser) SetPresence(v AnyOfmicrosoftGraphPresence) {
	o.Presence = v
}

// GetAuthentication returns the Authentication field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetAuthentication() AnyOfmicrosoftGraphAuthentication {
	if o == nil  {
		var ret AnyOfmicrosoftGraphAuthentication
		return ret
	}
	return o.Authentication
}

// GetAuthenticationOk returns a tuple with the Authentication field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetAuthenticationOk() (*AnyOfmicrosoftGraphAuthentication, bool) {
	if o == nil || o.Authentication == nil {
		return nil, false
	}
	return &o.Authentication, true
}

// HasAuthentication returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasAuthentication() bool {
	if o != nil && o.Authentication != nil {
		return true
	}

	return false
}

// SetAuthentication gets a reference to the given AnyOfmicrosoftGraphAuthentication and assigns it to the Authentication field.
func (o *MicrosoftGraphUser) SetAuthentication(v AnyOfmicrosoftGraphAuthentication) {
	o.Authentication = v
}

// GetChats returns the Chats field value if set, zero value otherwise.
func (o *MicrosoftGraphUser) GetChats() []MicrosoftGraphChat {
	if o == nil || o.Chats == nil {
		var ret []MicrosoftGraphChat
		return ret
	}
	return *o.Chats
}

// GetChatsOk returns a tuple with the Chats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUser) GetChatsOk() (*[]MicrosoftGraphChat, bool) {
	if o == nil || o.Chats == nil {
		return nil, false
	}
	return o.Chats, true
}

// HasChats returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasChats() bool {
	if o != nil && o.Chats != nil {
		return true
	}

	return false
}

// SetChats gets a reference to the given []MicrosoftGraphChat and assigns it to the Chats field.
func (o *MicrosoftGraphUser) SetChats(v []MicrosoftGraphChat) {
	o.Chats = &v
}

// GetJoinedTeams returns the JoinedTeams field value if set, zero value otherwise.
func (o *MicrosoftGraphUser) GetJoinedTeams() []MicrosoftGraphTeam {
	if o == nil || o.JoinedTeams == nil {
		var ret []MicrosoftGraphTeam
		return ret
	}
	return *o.JoinedTeams
}

// GetJoinedTeamsOk returns a tuple with the JoinedTeams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphUser) GetJoinedTeamsOk() (*[]MicrosoftGraphTeam, bool) {
	if o == nil || o.JoinedTeams == nil {
		return nil, false
	}
	return o.JoinedTeams, true
}

// HasJoinedTeams returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasJoinedTeams() bool {
	if o != nil && o.JoinedTeams != nil {
		return true
	}

	return false
}

// SetJoinedTeams gets a reference to the given []MicrosoftGraphTeam and assigns it to the JoinedTeams field.
func (o *MicrosoftGraphUser) SetJoinedTeams(v []MicrosoftGraphTeam) {
	o.JoinedTeams = &v
}

// GetTeamwork returns the Teamwork field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetTeamwork() AnyOfmicrosoftGraphUserTeamwork {
	if o == nil  {
		var ret AnyOfmicrosoftGraphUserTeamwork
		return ret
	}
	return o.Teamwork
}

// GetTeamworkOk returns a tuple with the Teamwork field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetTeamworkOk() (*AnyOfmicrosoftGraphUserTeamwork, bool) {
	if o == nil || o.Teamwork == nil {
		return nil, false
	}
	return &o.Teamwork, true
}

// HasTeamwork returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasTeamwork() bool {
	if o != nil && o.Teamwork != nil {
		return true
	}

	return false
}

// SetTeamwork gets a reference to the given AnyOfmicrosoftGraphUserTeamwork and assigns it to the Teamwork field.
func (o *MicrosoftGraphUser) SetTeamwork(v AnyOfmicrosoftGraphUserTeamwork) {
	o.Teamwork = v
}

// GetTodo returns the Todo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphUser) GetTodo() AnyOfmicrosoftGraphTodo {
	if o == nil  {
		var ret AnyOfmicrosoftGraphTodo
		return ret
	}
	return o.Todo
}

// GetTodoOk returns a tuple with the Todo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphUser) GetTodoOk() (*AnyOfmicrosoftGraphTodo, bool) {
	if o == nil || o.Todo == nil {
		return nil, false
	}
	return &o.Todo, true
}

// HasTodo returns a boolean if a field has been set.
func (o *MicrosoftGraphUser) HasTodo() bool {
	if o != nil && o.Todo != nil {
		return true
	}

	return false
}

// SetTodo gets a reference to the given AnyOfmicrosoftGraphTodo and assigns it to the Todo field.
func (o *MicrosoftGraphUser) SetTodo(v AnyOfmicrosoftGraphTodo) {
	o.Todo = v
}

func (o MicrosoftGraphUser) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.DeletedDateTime.IsSet() {
		toSerialize["deletedDateTime"] = o.DeletedDateTime.Get()
	}
	if o.AccountEnabled.IsSet() {
		toSerialize["accountEnabled"] = o.AccountEnabled.Get()
	}
	if o.AgeGroup.IsSet() {
		toSerialize["ageGroup"] = o.AgeGroup.Get()
	}
	if o.AssignedLicenses != nil {
		toSerialize["assignedLicenses"] = o.AssignedLicenses
	}
	if o.AssignedPlans != nil {
		toSerialize["assignedPlans"] = o.AssignedPlans
	}
	if o.BusinessPhones != nil {
		toSerialize["businessPhones"] = o.BusinessPhones
	}
	if o.City.IsSet() {
		toSerialize["city"] = o.City.Get()
	}
	if o.CompanyName.IsSet() {
		toSerialize["companyName"] = o.CompanyName.Get()
	}
	if o.ConsentProvidedForMinor.IsSet() {
		toSerialize["consentProvidedForMinor"] = o.ConsentProvidedForMinor.Get()
	}
	if o.Country.IsSet() {
		toSerialize["country"] = o.Country.Get()
	}
	if o.CreatedDateTime.IsSet() {
		toSerialize["createdDateTime"] = o.CreatedDateTime.Get()
	}
	if o.CreationType.IsSet() {
		toSerialize["creationType"] = o.CreationType.Get()
	}
	if o.Department.IsSet() {
		toSerialize["department"] = o.Department.Get()
	}
	if o.DisplayName.IsSet() {
		toSerialize["displayName"] = o.DisplayName.Get()
	}
	if o.EmployeeHireDate.IsSet() {
		toSerialize["employeeHireDate"] = o.EmployeeHireDate.Get()
	}
	if o.EmployeeId.IsSet() {
		toSerialize["employeeId"] = o.EmployeeId.Get()
	}
	if o.EmployeeOrgData != nil {
		toSerialize["employeeOrgData"] = o.EmployeeOrgData
	}
	if o.EmployeeType.IsSet() {
		toSerialize["employeeType"] = o.EmployeeType.Get()
	}
	if o.ExternalUserState.IsSet() {
		toSerialize["externalUserState"] = o.ExternalUserState.Get()
	}
	if o.ExternalUserStateChangeDateTime.IsSet() {
		toSerialize["externalUserStateChangeDateTime"] = o.ExternalUserStateChangeDateTime.Get()
	}
	if o.FaxNumber.IsSet() {
		toSerialize["faxNumber"] = o.FaxNumber.Get()
	}
	if o.GivenName.IsSet() {
		toSerialize["givenName"] = o.GivenName.Get()
	}
	if o.Identities != nil {
		toSerialize["identities"] = o.Identities
	}
	if o.ImAddresses != nil {
		toSerialize["imAddresses"] = o.ImAddresses
	}
	if o.IsResourceAccount.IsSet() {
		toSerialize["isResourceAccount"] = o.IsResourceAccount.Get()
	}
	if o.JobTitle.IsSet() {
		toSerialize["jobTitle"] = o.JobTitle.Get()
	}
	if o.LastPasswordChangeDateTime.IsSet() {
		toSerialize["lastPasswordChangeDateTime"] = o.LastPasswordChangeDateTime.Get()
	}
	if o.LegalAgeGroupClassification.IsSet() {
		toSerialize["legalAgeGroupClassification"] = o.LegalAgeGroupClassification.Get()
	}
	if o.LicenseAssignmentStates != nil {
		toSerialize["licenseAssignmentStates"] = o.LicenseAssignmentStates
	}
	if o.Mail.IsSet() {
		toSerialize["mail"] = o.Mail.Get()
	}
	if o.MailNickname.IsSet() {
		toSerialize["mailNickname"] = o.MailNickname.Get()
	}
	if o.MobilePhone.IsSet() {
		toSerialize["mobilePhone"] = o.MobilePhone.Get()
	}
	if o.OfficeLocation.IsSet() {
		toSerialize["officeLocation"] = o.OfficeLocation.Get()
	}
	if o.OnPremisesDistinguishedName.IsSet() {
		toSerialize["onPremisesDistinguishedName"] = o.OnPremisesDistinguishedName.Get()
	}
	if o.OnPremisesDomainName.IsSet() {
		toSerialize["onPremisesDomainName"] = o.OnPremisesDomainName.Get()
	}
	if o.OnPremisesExtensionAttributes != nil {
		toSerialize["onPremisesExtensionAttributes"] = o.OnPremisesExtensionAttributes
	}
	if o.OnPremisesImmutableId.IsSet() {
		toSerialize["onPremisesImmutableId"] = o.OnPremisesImmutableId.Get()
	}
	if o.OnPremisesLastSyncDateTime.IsSet() {
		toSerialize["onPremisesLastSyncDateTime"] = o.OnPremisesLastSyncDateTime.Get()
	}
	if o.OnPremisesProvisioningErrors != nil {
		toSerialize["onPremisesProvisioningErrors"] = o.OnPremisesProvisioningErrors
	}
	if o.OnPremisesSamAccountName.IsSet() {
		toSerialize["onPremisesSamAccountName"] = o.OnPremisesSamAccountName.Get()
	}
	if o.OnPremisesSecurityIdentifier.IsSet() {
		toSerialize["onPremisesSecurityIdentifier"] = o.OnPremisesSecurityIdentifier.Get()
	}
	if o.OnPremisesSyncEnabled.IsSet() {
		toSerialize["onPremisesSyncEnabled"] = o.OnPremisesSyncEnabled.Get()
	}
	if o.OnPremisesUserPrincipalName.IsSet() {
		toSerialize["onPremisesUserPrincipalName"] = o.OnPremisesUserPrincipalName.Get()
	}
	if o.OtherMails != nil {
		toSerialize["otherMails"] = o.OtherMails
	}
	if o.PasswordPolicies.IsSet() {
		toSerialize["passwordPolicies"] = o.PasswordPolicies.Get()
	}
	if o.PasswordProfile != nil {
		toSerialize["passwordProfile"] = o.PasswordProfile
	}
	if o.PostalCode.IsSet() {
		toSerialize["postalCode"] = o.PostalCode.Get()
	}
	if o.PreferredLanguage.IsSet() {
		toSerialize["preferredLanguage"] = o.PreferredLanguage.Get()
	}
	if o.ProvisionedPlans != nil {
		toSerialize["provisionedPlans"] = o.ProvisionedPlans
	}
	if o.ProxyAddresses != nil {
		toSerialize["proxyAddresses"] = o.ProxyAddresses
	}
	if o.ShowInAddressList.IsSet() {
		toSerialize["showInAddressList"] = o.ShowInAddressList.Get()
	}
	if o.SignInSessionsValidFromDateTime.IsSet() {
		toSerialize["signInSessionsValidFromDateTime"] = o.SignInSessionsValidFromDateTime.Get()
	}
	if o.State.IsSet() {
		toSerialize["state"] = o.State.Get()
	}
	if o.StreetAddress.IsSet() {
		toSerialize["streetAddress"] = o.StreetAddress.Get()
	}
	if o.Surname.IsSet() {
		toSerialize["surname"] = o.Surname.Get()
	}
	if o.UsageLocation.IsSet() {
		toSerialize["usageLocation"] = o.UsageLocation.Get()
	}
	if o.UserPrincipalName.IsSet() {
		toSerialize["userPrincipalName"] = o.UserPrincipalName.Get()
	}
	if o.UserType.IsSet() {
		toSerialize["userType"] = o.UserType.Get()
	}
	if o.MailboxSettings != nil {
		toSerialize["mailboxSettings"] = o.MailboxSettings
	}
	if o.DeviceEnrollmentLimit != nil {
		toSerialize["deviceEnrollmentLimit"] = o.DeviceEnrollmentLimit
	}
	if o.AboutMe.IsSet() {
		toSerialize["aboutMe"] = o.AboutMe.Get()
	}
	if o.Birthday != nil {
		toSerialize["birthday"] = o.Birthday
	}
	if o.HireDate != nil {
		toSerialize["hireDate"] = o.HireDate
	}
	if o.Interests != nil {
		toSerialize["interests"] = o.Interests
	}
	if o.MySite.IsSet() {
		toSerialize["mySite"] = o.MySite.Get()
	}
	if o.PastProjects != nil {
		toSerialize["pastProjects"] = o.PastProjects
	}
	if o.PreferredName.IsSet() {
		toSerialize["preferredName"] = o.PreferredName.Get()
	}
	if o.Responsibilities != nil {
		toSerialize["responsibilities"] = o.Responsibilities
	}
	if o.Schools != nil {
		toSerialize["schools"] = o.Schools
	}
	if o.Skills != nil {
		toSerialize["skills"] = o.Skills
	}
	if o.AppRoleAssignments != nil {
		toSerialize["appRoleAssignments"] = o.AppRoleAssignments
	}
	if o.CreatedObjects != nil {
		toSerialize["createdObjects"] = o.CreatedObjects
	}
	if o.DirectReports != nil {
		toSerialize["directReports"] = o.DirectReports
	}
	if o.LicenseDetails != nil {
		toSerialize["licenseDetails"] = o.LicenseDetails
	}
	if o.Manager != nil {
		toSerialize["manager"] = o.Manager
	}
	if o.MemberOf != nil {
		toSerialize["memberOf"] = o.MemberOf
	}
	if o.Oauth2PermissionGrants != nil {
		toSerialize["oauth2PermissionGrants"] = o.Oauth2PermissionGrants
	}
	if o.OwnedDevices != nil {
		toSerialize["ownedDevices"] = o.OwnedDevices
	}
	if o.OwnedObjects != nil {
		toSerialize["ownedObjects"] = o.OwnedObjects
	}
	if o.RegisteredDevices != nil {
		toSerialize["registeredDevices"] = o.RegisteredDevices
	}
	if o.ScopedRoleMemberOf != nil {
		toSerialize["scopedRoleMemberOf"] = o.ScopedRoleMemberOf
	}
	if o.TransitiveMemberOf != nil {
		toSerialize["transitiveMemberOf"] = o.TransitiveMemberOf
	}
	if o.Calendar != nil {
		toSerialize["calendar"] = o.Calendar
	}
	if o.CalendarGroups != nil {
		toSerialize["calendarGroups"] = o.CalendarGroups
	}
	if o.Calendars != nil {
		toSerialize["calendars"] = o.Calendars
	}
	if o.CalendarView != nil {
		toSerialize["calendarView"] = o.CalendarView
	}
	if o.ContactFolders != nil {
		toSerialize["contactFolders"] = o.ContactFolders
	}
	if o.Contacts != nil {
		toSerialize["contacts"] = o.Contacts
	}
	if o.Events != nil {
		toSerialize["events"] = o.Events
	}
	if o.InferenceClassification != nil {
		toSerialize["inferenceClassification"] = o.InferenceClassification
	}
	if o.MailFolders != nil {
		toSerialize["mailFolders"] = o.MailFolders
	}
	if o.Messages != nil {
		toSerialize["messages"] = o.Messages
	}
	if o.Outlook != nil {
		toSerialize["outlook"] = o.Outlook
	}
	if o.People != nil {
		toSerialize["people"] = o.People
	}
	if o.Drive != nil {
		toSerialize["drive"] = o.Drive
	}
	if o.Drives != nil {
		toSerialize["drives"] = o.Drives
	}
	if o.FollowedSites != nil {
		toSerialize["followedSites"] = o.FollowedSites
	}
	if o.Extensions != nil {
		toSerialize["extensions"] = o.Extensions
	}
	if o.AgreementAcceptances != nil {
		toSerialize["agreementAcceptances"] = o.AgreementAcceptances
	}
	if o.ManagedDevices != nil {
		toSerialize["managedDevices"] = o.ManagedDevices
	}
	if o.ManagedAppRegistrations != nil {
		toSerialize["managedAppRegistrations"] = o.ManagedAppRegistrations
	}
	if o.DeviceManagementTroubleshootingEvents != nil {
		toSerialize["deviceManagementTroubleshootingEvents"] = o.DeviceManagementTroubleshootingEvents
	}
	if o.Planner != nil {
		toSerialize["planner"] = o.Planner
	}
	if o.Insights != nil {
		toSerialize["insights"] = o.Insights
	}
	if o.Settings != nil {
		toSerialize["settings"] = o.Settings
	}
	if o.Onenote != nil {
		toSerialize["onenote"] = o.Onenote
	}
	if o.Photo != nil {
		toSerialize["photo"] = o.Photo
	}
	if o.Photos != nil {
		toSerialize["photos"] = o.Photos
	}
	if o.Activities != nil {
		toSerialize["activities"] = o.Activities
	}
	if o.OnlineMeetings != nil {
		toSerialize["onlineMeetings"] = o.OnlineMeetings
	}
	if o.Presence != nil {
		toSerialize["presence"] = o.Presence
	}
	if o.Authentication != nil {
		toSerialize["authentication"] = o.Authentication
	}
	if o.Chats != nil {
		toSerialize["chats"] = o.Chats
	}
	if o.JoinedTeams != nil {
		toSerialize["joinedTeams"] = o.JoinedTeams
	}
	if o.Teamwork != nil {
		toSerialize["teamwork"] = o.Teamwork
	}
	if o.Todo != nil {
		toSerialize["todo"] = o.Todo
	}
	return json.Marshal(toSerialize)
}

type NullableMicrosoftGraphUser struct {
	value *MicrosoftGraphUser
	isSet bool
}

func (v NullableMicrosoftGraphUser) Get() *MicrosoftGraphUser {
	return v.value
}

func (v *NullableMicrosoftGraphUser) Set(val *MicrosoftGraphUser) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphUser) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphUser(val *MicrosoftGraphUser) *NullableMicrosoftGraphUser {
	return &NullableMicrosoftGraphUser{value: val, isSet: true}
}

func (v NullableMicrosoftGraphUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


