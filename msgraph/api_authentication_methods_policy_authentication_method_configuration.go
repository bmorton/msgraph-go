/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// AuthenticationMethodsPolicyAuthenticationMethodConfigurationApiService AuthenticationMethodsPolicyAuthenticationMethodConfigurationApi service
type AuthenticationMethodsPolicyAuthenticationMethodConfigurationApiService service

type ApiAuthenticationMethodsPolicyCreateAuthenticationMethodConfigurationsRequest struct {
	ctx _context.Context
	ApiService *AuthenticationMethodsPolicyAuthenticationMethodConfigurationApiService
	microsoftGraphAuthenticationMethodConfiguration *MicrosoftGraphAuthenticationMethodConfiguration
}

// New navigation property
func (r ApiAuthenticationMethodsPolicyCreateAuthenticationMethodConfigurationsRequest) MicrosoftGraphAuthenticationMethodConfiguration(microsoftGraphAuthenticationMethodConfiguration MicrosoftGraphAuthenticationMethodConfiguration) ApiAuthenticationMethodsPolicyCreateAuthenticationMethodConfigurationsRequest {
	r.microsoftGraphAuthenticationMethodConfiguration = &microsoftGraphAuthenticationMethodConfiguration
	return r
}

func (r ApiAuthenticationMethodsPolicyCreateAuthenticationMethodConfigurationsRequest) Execute() (MicrosoftGraphAuthenticationMethodConfiguration, *_nethttp.Response, error) {
	return r.ApiService.AuthenticationMethodsPolicyCreateAuthenticationMethodConfigurationsExecute(r)
}

/*
AuthenticationMethodsPolicyCreateAuthenticationMethodConfigurations Create new navigation property to authenticationMethodConfigurations for authenticationMethodsPolicy

Represents the settings for each authentication method.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAuthenticationMethodsPolicyCreateAuthenticationMethodConfigurationsRequest
*/
func (a *AuthenticationMethodsPolicyAuthenticationMethodConfigurationApiService) AuthenticationMethodsPolicyCreateAuthenticationMethodConfigurations(ctx _context.Context) ApiAuthenticationMethodsPolicyCreateAuthenticationMethodConfigurationsRequest {
	return ApiAuthenticationMethodsPolicyCreateAuthenticationMethodConfigurationsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphAuthenticationMethodConfiguration
func (a *AuthenticationMethodsPolicyAuthenticationMethodConfigurationApiService) AuthenticationMethodsPolicyCreateAuthenticationMethodConfigurationsExecute(r ApiAuthenticationMethodsPolicyCreateAuthenticationMethodConfigurationsRequest) (MicrosoftGraphAuthenticationMethodConfiguration, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphAuthenticationMethodConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthenticationMethodsPolicyAuthenticationMethodConfigurationApiService.AuthenticationMethodsPolicyCreateAuthenticationMethodConfigurations")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/authenticationMethodsPolicy/authenticationMethodConfigurations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphAuthenticationMethodConfiguration == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphAuthenticationMethodConfiguration is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphAuthenticationMethodConfiguration
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAuthenticationMethodsPolicyDeleteAuthenticationMethodConfigurationsRequest struct {
	ctx _context.Context
	ApiService *AuthenticationMethodsPolicyAuthenticationMethodConfigurationApiService
	authenticationMethodConfigurationId string
	ifMatch *string
}

// ETag
func (r ApiAuthenticationMethodsPolicyDeleteAuthenticationMethodConfigurationsRequest) IfMatch(ifMatch string) ApiAuthenticationMethodsPolicyDeleteAuthenticationMethodConfigurationsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiAuthenticationMethodsPolicyDeleteAuthenticationMethodConfigurationsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.AuthenticationMethodsPolicyDeleteAuthenticationMethodConfigurationsExecute(r)
}

/*
AuthenticationMethodsPolicyDeleteAuthenticationMethodConfigurations Delete navigation property authenticationMethodConfigurations for authenticationMethodsPolicy

Represents the settings for each authentication method.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param authenticationMethodConfigurationId key: id of authenticationMethodConfiguration
 @return ApiAuthenticationMethodsPolicyDeleteAuthenticationMethodConfigurationsRequest
*/
func (a *AuthenticationMethodsPolicyAuthenticationMethodConfigurationApiService) AuthenticationMethodsPolicyDeleteAuthenticationMethodConfigurations(ctx _context.Context, authenticationMethodConfigurationId string) ApiAuthenticationMethodsPolicyDeleteAuthenticationMethodConfigurationsRequest {
	return ApiAuthenticationMethodsPolicyDeleteAuthenticationMethodConfigurationsRequest{
		ApiService: a,
		ctx: ctx,
		authenticationMethodConfigurationId: authenticationMethodConfigurationId,
	}
}

// Execute executes the request
func (a *AuthenticationMethodsPolicyAuthenticationMethodConfigurationApiService) AuthenticationMethodsPolicyDeleteAuthenticationMethodConfigurationsExecute(r ApiAuthenticationMethodsPolicyDeleteAuthenticationMethodConfigurationsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthenticationMethodsPolicyAuthenticationMethodConfigurationApiService.AuthenticationMethodsPolicyDeleteAuthenticationMethodConfigurations")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/authenticationMethodsPolicy/authenticationMethodConfigurations/{authenticationMethodConfiguration-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"authenticationMethodConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.authenticationMethodConfigurationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAuthenticationMethodsPolicyGetAuthenticationMethodConfigurationsRequest struct {
	ctx _context.Context
	ApiService *AuthenticationMethodsPolicyAuthenticationMethodConfigurationApiService
	authenticationMethodConfigurationId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiAuthenticationMethodsPolicyGetAuthenticationMethodConfigurationsRequest) Select_(select_ []string) ApiAuthenticationMethodsPolicyGetAuthenticationMethodConfigurationsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiAuthenticationMethodsPolicyGetAuthenticationMethodConfigurationsRequest) Expand(expand []string) ApiAuthenticationMethodsPolicyGetAuthenticationMethodConfigurationsRequest {
	r.expand = &expand
	return r
}

func (r ApiAuthenticationMethodsPolicyGetAuthenticationMethodConfigurationsRequest) Execute() (MicrosoftGraphAuthenticationMethodConfiguration, *_nethttp.Response, error) {
	return r.ApiService.AuthenticationMethodsPolicyGetAuthenticationMethodConfigurationsExecute(r)
}

/*
AuthenticationMethodsPolicyGetAuthenticationMethodConfigurations Get authenticationMethodConfigurations from authenticationMethodsPolicy

Represents the settings for each authentication method.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param authenticationMethodConfigurationId key: id of authenticationMethodConfiguration
 @return ApiAuthenticationMethodsPolicyGetAuthenticationMethodConfigurationsRequest
*/
func (a *AuthenticationMethodsPolicyAuthenticationMethodConfigurationApiService) AuthenticationMethodsPolicyGetAuthenticationMethodConfigurations(ctx _context.Context, authenticationMethodConfigurationId string) ApiAuthenticationMethodsPolicyGetAuthenticationMethodConfigurationsRequest {
	return ApiAuthenticationMethodsPolicyGetAuthenticationMethodConfigurationsRequest{
		ApiService: a,
		ctx: ctx,
		authenticationMethodConfigurationId: authenticationMethodConfigurationId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphAuthenticationMethodConfiguration
func (a *AuthenticationMethodsPolicyAuthenticationMethodConfigurationApiService) AuthenticationMethodsPolicyGetAuthenticationMethodConfigurationsExecute(r ApiAuthenticationMethodsPolicyGetAuthenticationMethodConfigurationsRequest) (MicrosoftGraphAuthenticationMethodConfiguration, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphAuthenticationMethodConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthenticationMethodsPolicyAuthenticationMethodConfigurationApiService.AuthenticationMethodsPolicyGetAuthenticationMethodConfigurations")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/authenticationMethodsPolicy/authenticationMethodConfigurations/{authenticationMethodConfiguration-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"authenticationMethodConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.authenticationMethodConfigurationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAuthenticationMethodsPolicyListAuthenticationMethodConfigurationsRequest struct {
	ctx _context.Context
	ApiService *AuthenticationMethodsPolicyAuthenticationMethodConfigurationApiService
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiAuthenticationMethodsPolicyListAuthenticationMethodConfigurationsRequest) Top(top int32) ApiAuthenticationMethodsPolicyListAuthenticationMethodConfigurationsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiAuthenticationMethodsPolicyListAuthenticationMethodConfigurationsRequest) Skip(skip int32) ApiAuthenticationMethodsPolicyListAuthenticationMethodConfigurationsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiAuthenticationMethodsPolicyListAuthenticationMethodConfigurationsRequest) Search(search string) ApiAuthenticationMethodsPolicyListAuthenticationMethodConfigurationsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiAuthenticationMethodsPolicyListAuthenticationMethodConfigurationsRequest) Filter(filter string) ApiAuthenticationMethodsPolicyListAuthenticationMethodConfigurationsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiAuthenticationMethodsPolicyListAuthenticationMethodConfigurationsRequest) Count(count bool) ApiAuthenticationMethodsPolicyListAuthenticationMethodConfigurationsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiAuthenticationMethodsPolicyListAuthenticationMethodConfigurationsRequest) Orderby(orderby []string) ApiAuthenticationMethodsPolicyListAuthenticationMethodConfigurationsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiAuthenticationMethodsPolicyListAuthenticationMethodConfigurationsRequest) Select_(select_ []string) ApiAuthenticationMethodsPolicyListAuthenticationMethodConfigurationsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiAuthenticationMethodsPolicyListAuthenticationMethodConfigurationsRequest) Expand(expand []string) ApiAuthenticationMethodsPolicyListAuthenticationMethodConfigurationsRequest {
	r.expand = &expand
	return r
}

func (r ApiAuthenticationMethodsPolicyListAuthenticationMethodConfigurationsRequest) Execute() (CollectionOfAuthenticationMethodConfiguration, *_nethttp.Response, error) {
	return r.ApiService.AuthenticationMethodsPolicyListAuthenticationMethodConfigurationsExecute(r)
}

/*
AuthenticationMethodsPolicyListAuthenticationMethodConfigurations Get authenticationMethodConfigurations from authenticationMethodsPolicy

Represents the settings for each authentication method.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAuthenticationMethodsPolicyListAuthenticationMethodConfigurationsRequest
*/
func (a *AuthenticationMethodsPolicyAuthenticationMethodConfigurationApiService) AuthenticationMethodsPolicyListAuthenticationMethodConfigurations(ctx _context.Context) ApiAuthenticationMethodsPolicyListAuthenticationMethodConfigurationsRequest {
	return ApiAuthenticationMethodsPolicyListAuthenticationMethodConfigurationsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfAuthenticationMethodConfiguration
func (a *AuthenticationMethodsPolicyAuthenticationMethodConfigurationApiService) AuthenticationMethodsPolicyListAuthenticationMethodConfigurationsExecute(r ApiAuthenticationMethodsPolicyListAuthenticationMethodConfigurationsRequest) (CollectionOfAuthenticationMethodConfiguration, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfAuthenticationMethodConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthenticationMethodsPolicyAuthenticationMethodConfigurationApiService.AuthenticationMethodsPolicyListAuthenticationMethodConfigurations")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/authenticationMethodsPolicy/authenticationMethodConfigurations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAuthenticationMethodsPolicyUpdateAuthenticationMethodConfigurationsRequest struct {
	ctx _context.Context
	ApiService *AuthenticationMethodsPolicyAuthenticationMethodConfigurationApiService
	authenticationMethodConfigurationId string
	microsoftGraphAuthenticationMethodConfiguration *MicrosoftGraphAuthenticationMethodConfiguration
}

// New navigation property values
func (r ApiAuthenticationMethodsPolicyUpdateAuthenticationMethodConfigurationsRequest) MicrosoftGraphAuthenticationMethodConfiguration(microsoftGraphAuthenticationMethodConfiguration MicrosoftGraphAuthenticationMethodConfiguration) ApiAuthenticationMethodsPolicyUpdateAuthenticationMethodConfigurationsRequest {
	r.microsoftGraphAuthenticationMethodConfiguration = &microsoftGraphAuthenticationMethodConfiguration
	return r
}

func (r ApiAuthenticationMethodsPolicyUpdateAuthenticationMethodConfigurationsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.AuthenticationMethodsPolicyUpdateAuthenticationMethodConfigurationsExecute(r)
}

/*
AuthenticationMethodsPolicyUpdateAuthenticationMethodConfigurations Update the navigation property authenticationMethodConfigurations in authenticationMethodsPolicy

Represents the settings for each authentication method.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param authenticationMethodConfigurationId key: id of authenticationMethodConfiguration
 @return ApiAuthenticationMethodsPolicyUpdateAuthenticationMethodConfigurationsRequest
*/
func (a *AuthenticationMethodsPolicyAuthenticationMethodConfigurationApiService) AuthenticationMethodsPolicyUpdateAuthenticationMethodConfigurations(ctx _context.Context, authenticationMethodConfigurationId string) ApiAuthenticationMethodsPolicyUpdateAuthenticationMethodConfigurationsRequest {
	return ApiAuthenticationMethodsPolicyUpdateAuthenticationMethodConfigurationsRequest{
		ApiService: a,
		ctx: ctx,
		authenticationMethodConfigurationId: authenticationMethodConfigurationId,
	}
}

// Execute executes the request
func (a *AuthenticationMethodsPolicyAuthenticationMethodConfigurationApiService) AuthenticationMethodsPolicyUpdateAuthenticationMethodConfigurationsExecute(r ApiAuthenticationMethodsPolicyUpdateAuthenticationMethodConfigurationsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AuthenticationMethodsPolicyAuthenticationMethodConfigurationApiService.AuthenticationMethodsPolicyUpdateAuthenticationMethodConfigurations")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/authenticationMethodsPolicy/authenticationMethodConfigurations/{authenticationMethodConfiguration-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"authenticationMethodConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.authenticationMethodConfigurationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphAuthenticationMethodConfiguration == nil {
		return nil, reportError("microsoftGraphAuthenticationMethodConfiguration is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphAuthenticationMethodConfiguration
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
