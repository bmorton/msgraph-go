/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphLocationUniqueIdType the model 'MicrosoftGraphLocationUniqueIdType'
type MicrosoftGraphLocationUniqueIdType string

// List of microsoft.graph.locationUniqueIdType
const (
	UNKNOWN MicrosoftGraphLocationUniqueIdType = "unknown"
	LOCATION_STORE MicrosoftGraphLocationUniqueIdType = "locationStore"
	DIRECTORY MicrosoftGraphLocationUniqueIdType = "directory"
	PRIVATE MicrosoftGraphLocationUniqueIdType = "private"
	BING MicrosoftGraphLocationUniqueIdType = "bing"
)

// All allowed values of MicrosoftGraphLocationUniqueIdType enum
var AllowedMicrosoftGraphLocationUniqueIdTypeEnumValues = []MicrosoftGraphLocationUniqueIdType{
	"unknown",
	"locationStore",
	"directory",
	"private",
	"bing",
}

func (v *MicrosoftGraphLocationUniqueIdType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphLocationUniqueIdType(value)
	for _, existing := range AllowedMicrosoftGraphLocationUniqueIdTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphLocationUniqueIdType", value)
}

// NewMicrosoftGraphLocationUniqueIdTypeFromValue returns a pointer to a valid MicrosoftGraphLocationUniqueIdType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphLocationUniqueIdTypeFromValue(v string) (*MicrosoftGraphLocationUniqueIdType, error) {
	ev := MicrosoftGraphLocationUniqueIdType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphLocationUniqueIdType: valid values are %v", v, AllowedMicrosoftGraphLocationUniqueIdTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphLocationUniqueIdType) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphLocationUniqueIdTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.locationUniqueIdType value
func (v MicrosoftGraphLocationUniqueIdType) Ptr() *MicrosoftGraphLocationUniqueIdType {
	return &v
}

type NullableMicrosoftGraphLocationUniqueIdType struct {
	value *MicrosoftGraphLocationUniqueIdType
	isSet bool
}

func (v NullableMicrosoftGraphLocationUniqueIdType) Get() *MicrosoftGraphLocationUniqueIdType {
	return v.value
}

func (v *NullableMicrosoftGraphLocationUniqueIdType) Set(val *MicrosoftGraphLocationUniqueIdType) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphLocationUniqueIdType) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphLocationUniqueIdType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphLocationUniqueIdType(val *MicrosoftGraphLocationUniqueIdType) *NullableMicrosoftGraphLocationUniqueIdType {
	return &NullableMicrosoftGraphLocationUniqueIdType{value: val, isSet: true}
}

func (v NullableMicrosoftGraphLocationUniqueIdType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphLocationUniqueIdType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

