/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// DeviceManagementImportedWindowsAutopilotDeviceIdentityApiService DeviceManagementImportedWindowsAutopilotDeviceIdentityApi service
type DeviceManagementImportedWindowsAutopilotDeviceIdentityApiService service

type ApiDeviceManagementCreateImportedWindowsAutopilotDeviceIdentitiesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementImportedWindowsAutopilotDeviceIdentityApiService
	microsoftGraphImportedWindowsAutopilotDeviceIdentity *MicrosoftGraphImportedWindowsAutopilotDeviceIdentity
}

// New navigation property
func (r ApiDeviceManagementCreateImportedWindowsAutopilotDeviceIdentitiesRequest) MicrosoftGraphImportedWindowsAutopilotDeviceIdentity(microsoftGraphImportedWindowsAutopilotDeviceIdentity MicrosoftGraphImportedWindowsAutopilotDeviceIdentity) ApiDeviceManagementCreateImportedWindowsAutopilotDeviceIdentitiesRequest {
	r.microsoftGraphImportedWindowsAutopilotDeviceIdentity = &microsoftGraphImportedWindowsAutopilotDeviceIdentity
	return r
}

func (r ApiDeviceManagementCreateImportedWindowsAutopilotDeviceIdentitiesRequest) Execute() (MicrosoftGraphImportedWindowsAutopilotDeviceIdentity, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementCreateImportedWindowsAutopilotDeviceIdentitiesExecute(r)
}

/*
DeviceManagementCreateImportedWindowsAutopilotDeviceIdentities Create new navigation property to importedWindowsAutopilotDeviceIdentities for deviceManagement

Collection of imported Windows autopilot devices.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeviceManagementCreateImportedWindowsAutopilotDeviceIdentitiesRequest
*/
func (a *DeviceManagementImportedWindowsAutopilotDeviceIdentityApiService) DeviceManagementCreateImportedWindowsAutopilotDeviceIdentities(ctx _context.Context) ApiDeviceManagementCreateImportedWindowsAutopilotDeviceIdentitiesRequest {
	return ApiDeviceManagementCreateImportedWindowsAutopilotDeviceIdentitiesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphImportedWindowsAutopilotDeviceIdentity
func (a *DeviceManagementImportedWindowsAutopilotDeviceIdentityApiService) DeviceManagementCreateImportedWindowsAutopilotDeviceIdentitiesExecute(r ApiDeviceManagementCreateImportedWindowsAutopilotDeviceIdentitiesRequest) (MicrosoftGraphImportedWindowsAutopilotDeviceIdentity, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphImportedWindowsAutopilotDeviceIdentity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementImportedWindowsAutopilotDeviceIdentityApiService.DeviceManagementCreateImportedWindowsAutopilotDeviceIdentities")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/importedWindowsAutopilotDeviceIdentities"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphImportedWindowsAutopilotDeviceIdentity == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphImportedWindowsAutopilotDeviceIdentity is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphImportedWindowsAutopilotDeviceIdentity
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementDeleteImportedWindowsAutopilotDeviceIdentitiesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementImportedWindowsAutopilotDeviceIdentityApiService
	importedWindowsAutopilotDeviceIdentityId string
	ifMatch *string
}

// ETag
func (r ApiDeviceManagementDeleteImportedWindowsAutopilotDeviceIdentitiesRequest) IfMatch(ifMatch string) ApiDeviceManagementDeleteImportedWindowsAutopilotDeviceIdentitiesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceManagementDeleteImportedWindowsAutopilotDeviceIdentitiesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeleteImportedWindowsAutopilotDeviceIdentitiesExecute(r)
}

/*
DeviceManagementDeleteImportedWindowsAutopilotDeviceIdentities Delete navigation property importedWindowsAutopilotDeviceIdentities for deviceManagement

Collection of imported Windows autopilot devices.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param importedWindowsAutopilotDeviceIdentityId key: id of importedWindowsAutopilotDeviceIdentity
 @return ApiDeviceManagementDeleteImportedWindowsAutopilotDeviceIdentitiesRequest
*/
func (a *DeviceManagementImportedWindowsAutopilotDeviceIdentityApiService) DeviceManagementDeleteImportedWindowsAutopilotDeviceIdentities(ctx _context.Context, importedWindowsAutopilotDeviceIdentityId string) ApiDeviceManagementDeleteImportedWindowsAutopilotDeviceIdentitiesRequest {
	return ApiDeviceManagementDeleteImportedWindowsAutopilotDeviceIdentitiesRequest{
		ApiService: a,
		ctx: ctx,
		importedWindowsAutopilotDeviceIdentityId: importedWindowsAutopilotDeviceIdentityId,
	}
}

// Execute executes the request
func (a *DeviceManagementImportedWindowsAutopilotDeviceIdentityApiService) DeviceManagementDeleteImportedWindowsAutopilotDeviceIdentitiesExecute(r ApiDeviceManagementDeleteImportedWindowsAutopilotDeviceIdentitiesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementImportedWindowsAutopilotDeviceIdentityApiService.DeviceManagementDeleteImportedWindowsAutopilotDeviceIdentities")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/importedWindowsAutopilotDeviceIdentities/{importedWindowsAutopilotDeviceIdentity-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"importedWindowsAutopilotDeviceIdentity-id"+"}", _neturl.PathEscape(parameterToString(r.importedWindowsAutopilotDeviceIdentityId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementGetImportedWindowsAutopilotDeviceIdentitiesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementImportedWindowsAutopilotDeviceIdentityApiService
	importedWindowsAutopilotDeviceIdentityId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceManagementGetImportedWindowsAutopilotDeviceIdentitiesRequest) Select_(select_ []string) ApiDeviceManagementGetImportedWindowsAutopilotDeviceIdentitiesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementGetImportedWindowsAutopilotDeviceIdentitiesRequest) Expand(expand []string) ApiDeviceManagementGetImportedWindowsAutopilotDeviceIdentitiesRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementGetImportedWindowsAutopilotDeviceIdentitiesRequest) Execute() (MicrosoftGraphImportedWindowsAutopilotDeviceIdentity, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementGetImportedWindowsAutopilotDeviceIdentitiesExecute(r)
}

/*
DeviceManagementGetImportedWindowsAutopilotDeviceIdentities Get importedWindowsAutopilotDeviceIdentities from deviceManagement

Collection of imported Windows autopilot devices.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param importedWindowsAutopilotDeviceIdentityId key: id of importedWindowsAutopilotDeviceIdentity
 @return ApiDeviceManagementGetImportedWindowsAutopilotDeviceIdentitiesRequest
*/
func (a *DeviceManagementImportedWindowsAutopilotDeviceIdentityApiService) DeviceManagementGetImportedWindowsAutopilotDeviceIdentities(ctx _context.Context, importedWindowsAutopilotDeviceIdentityId string) ApiDeviceManagementGetImportedWindowsAutopilotDeviceIdentitiesRequest {
	return ApiDeviceManagementGetImportedWindowsAutopilotDeviceIdentitiesRequest{
		ApiService: a,
		ctx: ctx,
		importedWindowsAutopilotDeviceIdentityId: importedWindowsAutopilotDeviceIdentityId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphImportedWindowsAutopilotDeviceIdentity
func (a *DeviceManagementImportedWindowsAutopilotDeviceIdentityApiService) DeviceManagementGetImportedWindowsAutopilotDeviceIdentitiesExecute(r ApiDeviceManagementGetImportedWindowsAutopilotDeviceIdentitiesRequest) (MicrosoftGraphImportedWindowsAutopilotDeviceIdentity, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphImportedWindowsAutopilotDeviceIdentity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementImportedWindowsAutopilotDeviceIdentityApiService.DeviceManagementGetImportedWindowsAutopilotDeviceIdentities")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/importedWindowsAutopilotDeviceIdentities/{importedWindowsAutopilotDeviceIdentity-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"importedWindowsAutopilotDeviceIdentity-id"+"}", _neturl.PathEscape(parameterToString(r.importedWindowsAutopilotDeviceIdentityId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementListImportedWindowsAutopilotDeviceIdentitiesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementImportedWindowsAutopilotDeviceIdentityApiService
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiDeviceManagementListImportedWindowsAutopilotDeviceIdentitiesRequest) Top(top int32) ApiDeviceManagementListImportedWindowsAutopilotDeviceIdentitiesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiDeviceManagementListImportedWindowsAutopilotDeviceIdentitiesRequest) Skip(skip int32) ApiDeviceManagementListImportedWindowsAutopilotDeviceIdentitiesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiDeviceManagementListImportedWindowsAutopilotDeviceIdentitiesRequest) Search(search string) ApiDeviceManagementListImportedWindowsAutopilotDeviceIdentitiesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiDeviceManagementListImportedWindowsAutopilotDeviceIdentitiesRequest) Filter(filter string) ApiDeviceManagementListImportedWindowsAutopilotDeviceIdentitiesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiDeviceManagementListImportedWindowsAutopilotDeviceIdentitiesRequest) Count(count bool) ApiDeviceManagementListImportedWindowsAutopilotDeviceIdentitiesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiDeviceManagementListImportedWindowsAutopilotDeviceIdentitiesRequest) Orderby(orderby []string) ApiDeviceManagementListImportedWindowsAutopilotDeviceIdentitiesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiDeviceManagementListImportedWindowsAutopilotDeviceIdentitiesRequest) Select_(select_ []string) ApiDeviceManagementListImportedWindowsAutopilotDeviceIdentitiesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementListImportedWindowsAutopilotDeviceIdentitiesRequest) Expand(expand []string) ApiDeviceManagementListImportedWindowsAutopilotDeviceIdentitiesRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementListImportedWindowsAutopilotDeviceIdentitiesRequest) Execute() (CollectionOfImportedWindowsAutopilotDeviceIdentity, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementListImportedWindowsAutopilotDeviceIdentitiesExecute(r)
}

/*
DeviceManagementListImportedWindowsAutopilotDeviceIdentities Get importedWindowsAutopilotDeviceIdentities from deviceManagement

Collection of imported Windows autopilot devices.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeviceManagementListImportedWindowsAutopilotDeviceIdentitiesRequest
*/
func (a *DeviceManagementImportedWindowsAutopilotDeviceIdentityApiService) DeviceManagementListImportedWindowsAutopilotDeviceIdentities(ctx _context.Context) ApiDeviceManagementListImportedWindowsAutopilotDeviceIdentitiesRequest {
	return ApiDeviceManagementListImportedWindowsAutopilotDeviceIdentitiesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfImportedWindowsAutopilotDeviceIdentity
func (a *DeviceManagementImportedWindowsAutopilotDeviceIdentityApiService) DeviceManagementListImportedWindowsAutopilotDeviceIdentitiesExecute(r ApiDeviceManagementListImportedWindowsAutopilotDeviceIdentitiesRequest) (CollectionOfImportedWindowsAutopilotDeviceIdentity, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfImportedWindowsAutopilotDeviceIdentity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementImportedWindowsAutopilotDeviceIdentityApiService.DeviceManagementListImportedWindowsAutopilotDeviceIdentities")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/importedWindowsAutopilotDeviceIdentities"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementUpdateImportedWindowsAutopilotDeviceIdentitiesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementImportedWindowsAutopilotDeviceIdentityApiService
	importedWindowsAutopilotDeviceIdentityId string
	microsoftGraphImportedWindowsAutopilotDeviceIdentity *MicrosoftGraphImportedWindowsAutopilotDeviceIdentity
}

// New navigation property values
func (r ApiDeviceManagementUpdateImportedWindowsAutopilotDeviceIdentitiesRequest) MicrosoftGraphImportedWindowsAutopilotDeviceIdentity(microsoftGraphImportedWindowsAutopilotDeviceIdentity MicrosoftGraphImportedWindowsAutopilotDeviceIdentity) ApiDeviceManagementUpdateImportedWindowsAutopilotDeviceIdentitiesRequest {
	r.microsoftGraphImportedWindowsAutopilotDeviceIdentity = &microsoftGraphImportedWindowsAutopilotDeviceIdentity
	return r
}

func (r ApiDeviceManagementUpdateImportedWindowsAutopilotDeviceIdentitiesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementUpdateImportedWindowsAutopilotDeviceIdentitiesExecute(r)
}

/*
DeviceManagementUpdateImportedWindowsAutopilotDeviceIdentities Update the navigation property importedWindowsAutopilotDeviceIdentities in deviceManagement

Collection of imported Windows autopilot devices.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param importedWindowsAutopilotDeviceIdentityId key: id of importedWindowsAutopilotDeviceIdentity
 @return ApiDeviceManagementUpdateImportedWindowsAutopilotDeviceIdentitiesRequest
*/
func (a *DeviceManagementImportedWindowsAutopilotDeviceIdentityApiService) DeviceManagementUpdateImportedWindowsAutopilotDeviceIdentities(ctx _context.Context, importedWindowsAutopilotDeviceIdentityId string) ApiDeviceManagementUpdateImportedWindowsAutopilotDeviceIdentitiesRequest {
	return ApiDeviceManagementUpdateImportedWindowsAutopilotDeviceIdentitiesRequest{
		ApiService: a,
		ctx: ctx,
		importedWindowsAutopilotDeviceIdentityId: importedWindowsAutopilotDeviceIdentityId,
	}
}

// Execute executes the request
func (a *DeviceManagementImportedWindowsAutopilotDeviceIdentityApiService) DeviceManagementUpdateImportedWindowsAutopilotDeviceIdentitiesExecute(r ApiDeviceManagementUpdateImportedWindowsAutopilotDeviceIdentitiesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementImportedWindowsAutopilotDeviceIdentityApiService.DeviceManagementUpdateImportedWindowsAutopilotDeviceIdentities")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/importedWindowsAutopilotDeviceIdentities/{importedWindowsAutopilotDeviceIdentity-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"importedWindowsAutopilotDeviceIdentity-id"+"}", _neturl.PathEscape(parameterToString(r.importedWindowsAutopilotDeviceIdentityId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphImportedWindowsAutopilotDeviceIdentity == nil {
		return nil, reportError("microsoftGraphImportedWindowsAutopilotDeviceIdentity is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphImportedWindowsAutopilotDeviceIdentity
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
