/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphRejectReason the model 'MicrosoftGraphRejectReason'
type MicrosoftGraphRejectReason string

// List of microsoft.graph.rejectReason
const (
	NONE MicrosoftGraphRejectReason = "none"
	BUSY MicrosoftGraphRejectReason = "busy"
	FORBIDDEN MicrosoftGraphRejectReason = "forbidden"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphRejectReason = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphRejectReason enum
var AllowedMicrosoftGraphRejectReasonEnumValues = []MicrosoftGraphRejectReason{
	"none",
	"busy",
	"forbidden",
	"unknownFutureValue",
}

func (v *MicrosoftGraphRejectReason) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphRejectReason(value)
	for _, existing := range AllowedMicrosoftGraphRejectReasonEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphRejectReason", value)
}

// NewMicrosoftGraphRejectReasonFromValue returns a pointer to a valid MicrosoftGraphRejectReason
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphRejectReasonFromValue(v string) (*MicrosoftGraphRejectReason, error) {
	ev := MicrosoftGraphRejectReason(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphRejectReason: valid values are %v", v, AllowedMicrosoftGraphRejectReasonEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphRejectReason) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphRejectReasonEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.rejectReason value
func (v MicrosoftGraphRejectReason) Ptr() *MicrosoftGraphRejectReason {
	return &v
}

type NullableMicrosoftGraphRejectReason struct {
	value *MicrosoftGraphRejectReason
	isSet bool
}

func (v NullableMicrosoftGraphRejectReason) Get() *MicrosoftGraphRejectReason {
	return v.value
}

func (v *NullableMicrosoftGraphRejectReason) Set(val *MicrosoftGraphRejectReason) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphRejectReason) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphRejectReason) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphRejectReason(val *MicrosoftGraphRejectReason) *NullableMicrosoftGraphRejectReason {
	return &NullableMicrosoftGraphRejectReason{value: val, isSet: true}
}

func (v NullableMicrosoftGraphRejectReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphRejectReason) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

