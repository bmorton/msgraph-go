/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
)

// MicrosoftGraphPhysicalAddress struct for MicrosoftGraphPhysicalAddress
type MicrosoftGraphPhysicalAddress struct {
	// The city.
	City NullableString `json:"city,omitempty"`
	// The country or region. It's a free-format string value, for example, 'United States'.
	CountryOrRegion NullableString `json:"countryOrRegion,omitempty"`
	// The postal code.
	PostalCode NullableString `json:"postalCode,omitempty"`
	// The state.
	State NullableString `json:"state,omitempty"`
	// The street.
	Street NullableString `json:"street,omitempty"`
}

// NewMicrosoftGraphPhysicalAddress instantiates a new MicrosoftGraphPhysicalAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMicrosoftGraphPhysicalAddress() *MicrosoftGraphPhysicalAddress {
	this := MicrosoftGraphPhysicalAddress{}
	return &this
}

// NewMicrosoftGraphPhysicalAddressWithDefaults instantiates a new MicrosoftGraphPhysicalAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMicrosoftGraphPhysicalAddressWithDefaults() *MicrosoftGraphPhysicalAddress {
	this := MicrosoftGraphPhysicalAddress{}
	return &this
}

// GetCity returns the City field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphPhysicalAddress) GetCity() string {
	if o == nil || o.City.Get() == nil {
		var ret string
		return ret
	}
	return *o.City.Get()
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphPhysicalAddress) GetCityOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.City.Get(), o.City.IsSet()
}

// HasCity returns a boolean if a field has been set.
func (o *MicrosoftGraphPhysicalAddress) HasCity() bool {
	if o != nil && o.City.IsSet() {
		return true
	}

	return false
}

// SetCity gets a reference to the given NullableString and assigns it to the City field.
func (o *MicrosoftGraphPhysicalAddress) SetCity(v string) {
	o.City.Set(&v)
}
// SetCityNil sets the value for City to be an explicit nil
func (o *MicrosoftGraphPhysicalAddress) SetCityNil() {
	o.City.Set(nil)
}

// UnsetCity ensures that no value is present for City, not even an explicit nil
func (o *MicrosoftGraphPhysicalAddress) UnsetCity() {
	o.City.Unset()
}

// GetCountryOrRegion returns the CountryOrRegion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphPhysicalAddress) GetCountryOrRegion() string {
	if o == nil || o.CountryOrRegion.Get() == nil {
		var ret string
		return ret
	}
	return *o.CountryOrRegion.Get()
}

// GetCountryOrRegionOk returns a tuple with the CountryOrRegion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphPhysicalAddress) GetCountryOrRegionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CountryOrRegion.Get(), o.CountryOrRegion.IsSet()
}

// HasCountryOrRegion returns a boolean if a field has been set.
func (o *MicrosoftGraphPhysicalAddress) HasCountryOrRegion() bool {
	if o != nil && o.CountryOrRegion.IsSet() {
		return true
	}

	return false
}

// SetCountryOrRegion gets a reference to the given NullableString and assigns it to the CountryOrRegion field.
func (o *MicrosoftGraphPhysicalAddress) SetCountryOrRegion(v string) {
	o.CountryOrRegion.Set(&v)
}
// SetCountryOrRegionNil sets the value for CountryOrRegion to be an explicit nil
func (o *MicrosoftGraphPhysicalAddress) SetCountryOrRegionNil() {
	o.CountryOrRegion.Set(nil)
}

// UnsetCountryOrRegion ensures that no value is present for CountryOrRegion, not even an explicit nil
func (o *MicrosoftGraphPhysicalAddress) UnsetCountryOrRegion() {
	o.CountryOrRegion.Unset()
}

// GetPostalCode returns the PostalCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphPhysicalAddress) GetPostalCode() string {
	if o == nil || o.PostalCode.Get() == nil {
		var ret string
		return ret
	}
	return *o.PostalCode.Get()
}

// GetPostalCodeOk returns a tuple with the PostalCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphPhysicalAddress) GetPostalCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PostalCode.Get(), o.PostalCode.IsSet()
}

// HasPostalCode returns a boolean if a field has been set.
func (o *MicrosoftGraphPhysicalAddress) HasPostalCode() bool {
	if o != nil && o.PostalCode.IsSet() {
		return true
	}

	return false
}

// SetPostalCode gets a reference to the given NullableString and assigns it to the PostalCode field.
func (o *MicrosoftGraphPhysicalAddress) SetPostalCode(v string) {
	o.PostalCode.Set(&v)
}
// SetPostalCodeNil sets the value for PostalCode to be an explicit nil
func (o *MicrosoftGraphPhysicalAddress) SetPostalCodeNil() {
	o.PostalCode.Set(nil)
}

// UnsetPostalCode ensures that no value is present for PostalCode, not even an explicit nil
func (o *MicrosoftGraphPhysicalAddress) UnsetPostalCode() {
	o.PostalCode.Unset()
}

// GetState returns the State field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphPhysicalAddress) GetState() string {
	if o == nil || o.State.Get() == nil {
		var ret string
		return ret
	}
	return *o.State.Get()
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphPhysicalAddress) GetStateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.State.Get(), o.State.IsSet()
}

// HasState returns a boolean if a field has been set.
func (o *MicrosoftGraphPhysicalAddress) HasState() bool {
	if o != nil && o.State.IsSet() {
		return true
	}

	return false
}

// SetState gets a reference to the given NullableString and assigns it to the State field.
func (o *MicrosoftGraphPhysicalAddress) SetState(v string) {
	o.State.Set(&v)
}
// SetStateNil sets the value for State to be an explicit nil
func (o *MicrosoftGraphPhysicalAddress) SetStateNil() {
	o.State.Set(nil)
}

// UnsetState ensures that no value is present for State, not even an explicit nil
func (o *MicrosoftGraphPhysicalAddress) UnsetState() {
	o.State.Unset()
}

// GetStreet returns the Street field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphPhysicalAddress) GetStreet() string {
	if o == nil || o.Street.Get() == nil {
		var ret string
		return ret
	}
	return *o.Street.Get()
}

// GetStreetOk returns a tuple with the Street field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphPhysicalAddress) GetStreetOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Street.Get(), o.Street.IsSet()
}

// HasStreet returns a boolean if a field has been set.
func (o *MicrosoftGraphPhysicalAddress) HasStreet() bool {
	if o != nil && o.Street.IsSet() {
		return true
	}

	return false
}

// SetStreet gets a reference to the given NullableString and assigns it to the Street field.
func (o *MicrosoftGraphPhysicalAddress) SetStreet(v string) {
	o.Street.Set(&v)
}
// SetStreetNil sets the value for Street to be an explicit nil
func (o *MicrosoftGraphPhysicalAddress) SetStreetNil() {
	o.Street.Set(nil)
}

// UnsetStreet ensures that no value is present for Street, not even an explicit nil
func (o *MicrosoftGraphPhysicalAddress) UnsetStreet() {
	o.Street.Unset()
}

func (o MicrosoftGraphPhysicalAddress) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.City.IsSet() {
		toSerialize["city"] = o.City.Get()
	}
	if o.CountryOrRegion.IsSet() {
		toSerialize["countryOrRegion"] = o.CountryOrRegion.Get()
	}
	if o.PostalCode.IsSet() {
		toSerialize["postalCode"] = o.PostalCode.Get()
	}
	if o.State.IsSet() {
		toSerialize["state"] = o.State.Get()
	}
	if o.Street.IsSet() {
		toSerialize["street"] = o.Street.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableMicrosoftGraphPhysicalAddress struct {
	value *MicrosoftGraphPhysicalAddress
	isSet bool
}

func (v NullableMicrosoftGraphPhysicalAddress) Get() *MicrosoftGraphPhysicalAddress {
	return v.value
}

func (v *NullableMicrosoftGraphPhysicalAddress) Set(val *MicrosoftGraphPhysicalAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphPhysicalAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphPhysicalAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphPhysicalAddress(val *MicrosoftGraphPhysicalAddress) *NullableMicrosoftGraphPhysicalAddress {
	return &NullableMicrosoftGraphPhysicalAddress{value: val, isSet: true}
}

func (v NullableMicrosoftGraphPhysicalAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphPhysicalAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


