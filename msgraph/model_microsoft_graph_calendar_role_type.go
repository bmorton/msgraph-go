/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphCalendarRoleType the model 'MicrosoftGraphCalendarRoleType'
type MicrosoftGraphCalendarRoleType string

// List of microsoft.graph.calendarRoleType
const (
	NONE MicrosoftGraphCalendarRoleType = "none"
	FREE_BUSY_READ MicrosoftGraphCalendarRoleType = "freeBusyRead"
	LIMITED_READ MicrosoftGraphCalendarRoleType = "limitedRead"
	READ MicrosoftGraphCalendarRoleType = "read"
	WRITE MicrosoftGraphCalendarRoleType = "write"
	DELEGATE_WITHOUT_PRIVATE_EVENT_ACCESS MicrosoftGraphCalendarRoleType = "delegateWithoutPrivateEventAccess"
	DELEGATE_WITH_PRIVATE_EVENT_ACCESS MicrosoftGraphCalendarRoleType = "delegateWithPrivateEventAccess"
	CUSTOM MicrosoftGraphCalendarRoleType = "custom"
)

// All allowed values of MicrosoftGraphCalendarRoleType enum
var AllowedMicrosoftGraphCalendarRoleTypeEnumValues = []MicrosoftGraphCalendarRoleType{
	"none",
	"freeBusyRead",
	"limitedRead",
	"read",
	"write",
	"delegateWithoutPrivateEventAccess",
	"delegateWithPrivateEventAccess",
	"custom",
}

func (v *MicrosoftGraphCalendarRoleType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphCalendarRoleType(value)
	for _, existing := range AllowedMicrosoftGraphCalendarRoleTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphCalendarRoleType", value)
}

// NewMicrosoftGraphCalendarRoleTypeFromValue returns a pointer to a valid MicrosoftGraphCalendarRoleType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphCalendarRoleTypeFromValue(v string) (*MicrosoftGraphCalendarRoleType, error) {
	ev := MicrosoftGraphCalendarRoleType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphCalendarRoleType: valid values are %v", v, AllowedMicrosoftGraphCalendarRoleTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphCalendarRoleType) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphCalendarRoleTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.calendarRoleType value
func (v MicrosoftGraphCalendarRoleType) Ptr() *MicrosoftGraphCalendarRoleType {
	return &v
}

type NullableMicrosoftGraphCalendarRoleType struct {
	value *MicrosoftGraphCalendarRoleType
	isSet bool
}

func (v NullableMicrosoftGraphCalendarRoleType) Get() *MicrosoftGraphCalendarRoleType {
	return v.value
}

func (v *NullableMicrosoftGraphCalendarRoleType) Set(val *MicrosoftGraphCalendarRoleType) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphCalendarRoleType) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphCalendarRoleType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphCalendarRoleType(val *MicrosoftGraphCalendarRoleType) *NullableMicrosoftGraphCalendarRoleType {
	return &NullableMicrosoftGraphCalendarRoleType{value: val, isSet: true}
}

func (v NullableMicrosoftGraphCalendarRoleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphCalendarRoleType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

