/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"time"
)

// TodoTask struct for TodoTask
type TodoTask struct {
	// The task body that typically contains information about the task.
	Body AnyOfmicrosoftGraphItemBody `json:"body,omitempty"`
	// The date and time when the task was last modified. By default, it is in UTC. You can provide a custom time zone in the request header. The property value uses ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2020 would look like this: '2020-01-01T00:00:00Z'.
	BodyLastModifiedDateTime *time.Time `json:"bodyLastModifiedDateTime,omitempty"`
	// The date in the specified time zone that the task was finished.
	CompletedDateTime AnyOfmicrosoftGraphDateTimeTimeZone `json:"completedDateTime,omitempty"`
	// The date and time when the task was created. By default, it is in UTC. You can provide a custom time zone in the request header. The property value uses ISO 8601 format. For example, midnight UTC on Jan 1, 2020 would look like this: '2020-01-01T00:00:00Z'.
	CreatedDateTime *time.Time `json:"createdDateTime,omitempty"`
	// The date in the specified time zone that the task is to be finished.
	DueDateTime AnyOfmicrosoftGraphDateTimeTimeZone `json:"dueDateTime,omitempty"`
	// The importance of the task. Possible values are: low, normal, high.
	Importance AnyOfmicrosoftGraphImportance `json:"importance,omitempty"`
	// Set to true if an alert is set to remind the user of the task.
	IsReminderOn *bool `json:"isReminderOn,omitempty"`
	// The date and time when the task was last modified. By default, it is in UTC. You can provide a custom time zone in the request header. The property value uses ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2020 would look like this: '2020-01-01T00:00:00Z'.
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime,omitempty"`
	// The recurrence pattern for the task.
	Recurrence AnyOfmicrosoftGraphPatternedRecurrence `json:"recurrence,omitempty"`
	// The date and time for a reminder alert of the task to occur.
	ReminderDateTime AnyOfmicrosoftGraphDateTimeTimeZone `json:"reminderDateTime,omitempty"`
	// Indicates the state or progress of the task. Possible values are: notStarted, inProgress, completed, waitingOnOthers, deferred.
	Status AnyOfmicrosoftGraphTaskStatus `json:"status,omitempty"`
	// A brief description of the task.
	Title NullableString `json:"title,omitempty"`
	// The collection of open extensions defined for the task. Nullable.
	Extensions *[]MicrosoftGraphExtension `json:"extensions,omitempty"`
	// A collection of resources linked to the task.
	LinkedResources *[]MicrosoftGraphLinkedResource `json:"linkedResources,omitempty"`
}

// NewTodoTask instantiates a new TodoTask object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTodoTask() *TodoTask {
	this := TodoTask{}
	return &this
}

// NewTodoTaskWithDefaults instantiates a new TodoTask object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTodoTaskWithDefaults() *TodoTask {
	this := TodoTask{}
	return &this
}

// GetBody returns the Body field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TodoTask) GetBody() AnyOfmicrosoftGraphItemBody {
	if o == nil  {
		var ret AnyOfmicrosoftGraphItemBody
		return ret
	}
	return o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TodoTask) GetBodyOk() (*AnyOfmicrosoftGraphItemBody, bool) {
	if o == nil || o.Body == nil {
		return nil, false
	}
	return &o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *TodoTask) HasBody() bool {
	if o != nil && o.Body != nil {
		return true
	}

	return false
}

// SetBody gets a reference to the given AnyOfmicrosoftGraphItemBody and assigns it to the Body field.
func (o *TodoTask) SetBody(v AnyOfmicrosoftGraphItemBody) {
	o.Body = v
}

// GetBodyLastModifiedDateTime returns the BodyLastModifiedDateTime field value if set, zero value otherwise.
func (o *TodoTask) GetBodyLastModifiedDateTime() time.Time {
	if o == nil || o.BodyLastModifiedDateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.BodyLastModifiedDateTime
}

// GetBodyLastModifiedDateTimeOk returns a tuple with the BodyLastModifiedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TodoTask) GetBodyLastModifiedDateTimeOk() (*time.Time, bool) {
	if o == nil || o.BodyLastModifiedDateTime == nil {
		return nil, false
	}
	return o.BodyLastModifiedDateTime, true
}

// HasBodyLastModifiedDateTime returns a boolean if a field has been set.
func (o *TodoTask) HasBodyLastModifiedDateTime() bool {
	if o != nil && o.BodyLastModifiedDateTime != nil {
		return true
	}

	return false
}

// SetBodyLastModifiedDateTime gets a reference to the given time.Time and assigns it to the BodyLastModifiedDateTime field.
func (o *TodoTask) SetBodyLastModifiedDateTime(v time.Time) {
	o.BodyLastModifiedDateTime = &v
}

// GetCompletedDateTime returns the CompletedDateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TodoTask) GetCompletedDateTime() AnyOfmicrosoftGraphDateTimeTimeZone {
	if o == nil  {
		var ret AnyOfmicrosoftGraphDateTimeTimeZone
		return ret
	}
	return o.CompletedDateTime
}

// GetCompletedDateTimeOk returns a tuple with the CompletedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TodoTask) GetCompletedDateTimeOk() (*AnyOfmicrosoftGraphDateTimeTimeZone, bool) {
	if o == nil || o.CompletedDateTime == nil {
		return nil, false
	}
	return &o.CompletedDateTime, true
}

// HasCompletedDateTime returns a boolean if a field has been set.
func (o *TodoTask) HasCompletedDateTime() bool {
	if o != nil && o.CompletedDateTime != nil {
		return true
	}

	return false
}

// SetCompletedDateTime gets a reference to the given AnyOfmicrosoftGraphDateTimeTimeZone and assigns it to the CompletedDateTime field.
func (o *TodoTask) SetCompletedDateTime(v AnyOfmicrosoftGraphDateTimeTimeZone) {
	o.CompletedDateTime = v
}

// GetCreatedDateTime returns the CreatedDateTime field value if set, zero value otherwise.
func (o *TodoTask) GetCreatedDateTime() time.Time {
	if o == nil || o.CreatedDateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedDateTime
}

// GetCreatedDateTimeOk returns a tuple with the CreatedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TodoTask) GetCreatedDateTimeOk() (*time.Time, bool) {
	if o == nil || o.CreatedDateTime == nil {
		return nil, false
	}
	return o.CreatedDateTime, true
}

// HasCreatedDateTime returns a boolean if a field has been set.
func (o *TodoTask) HasCreatedDateTime() bool {
	if o != nil && o.CreatedDateTime != nil {
		return true
	}

	return false
}

// SetCreatedDateTime gets a reference to the given time.Time and assigns it to the CreatedDateTime field.
func (o *TodoTask) SetCreatedDateTime(v time.Time) {
	o.CreatedDateTime = &v
}

// GetDueDateTime returns the DueDateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TodoTask) GetDueDateTime() AnyOfmicrosoftGraphDateTimeTimeZone {
	if o == nil  {
		var ret AnyOfmicrosoftGraphDateTimeTimeZone
		return ret
	}
	return o.DueDateTime
}

// GetDueDateTimeOk returns a tuple with the DueDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TodoTask) GetDueDateTimeOk() (*AnyOfmicrosoftGraphDateTimeTimeZone, bool) {
	if o == nil || o.DueDateTime == nil {
		return nil, false
	}
	return &o.DueDateTime, true
}

// HasDueDateTime returns a boolean if a field has been set.
func (o *TodoTask) HasDueDateTime() bool {
	if o != nil && o.DueDateTime != nil {
		return true
	}

	return false
}

// SetDueDateTime gets a reference to the given AnyOfmicrosoftGraphDateTimeTimeZone and assigns it to the DueDateTime field.
func (o *TodoTask) SetDueDateTime(v AnyOfmicrosoftGraphDateTimeTimeZone) {
	o.DueDateTime = v
}

// GetImportance returns the Importance field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TodoTask) GetImportance() AnyOfmicrosoftGraphImportance {
	if o == nil  {
		var ret AnyOfmicrosoftGraphImportance
		return ret
	}
	return o.Importance
}

// GetImportanceOk returns a tuple with the Importance field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TodoTask) GetImportanceOk() (*AnyOfmicrosoftGraphImportance, bool) {
	if o == nil || o.Importance == nil {
		return nil, false
	}
	return &o.Importance, true
}

// HasImportance returns a boolean if a field has been set.
func (o *TodoTask) HasImportance() bool {
	if o != nil && o.Importance != nil {
		return true
	}

	return false
}

// SetImportance gets a reference to the given AnyOfmicrosoftGraphImportance and assigns it to the Importance field.
func (o *TodoTask) SetImportance(v AnyOfmicrosoftGraphImportance) {
	o.Importance = v
}

// GetIsReminderOn returns the IsReminderOn field value if set, zero value otherwise.
func (o *TodoTask) GetIsReminderOn() bool {
	if o == nil || o.IsReminderOn == nil {
		var ret bool
		return ret
	}
	return *o.IsReminderOn
}

// GetIsReminderOnOk returns a tuple with the IsReminderOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TodoTask) GetIsReminderOnOk() (*bool, bool) {
	if o == nil || o.IsReminderOn == nil {
		return nil, false
	}
	return o.IsReminderOn, true
}

// HasIsReminderOn returns a boolean if a field has been set.
func (o *TodoTask) HasIsReminderOn() bool {
	if o != nil && o.IsReminderOn != nil {
		return true
	}

	return false
}

// SetIsReminderOn gets a reference to the given bool and assigns it to the IsReminderOn field.
func (o *TodoTask) SetIsReminderOn(v bool) {
	o.IsReminderOn = &v
}

// GetLastModifiedDateTime returns the LastModifiedDateTime field value if set, zero value otherwise.
func (o *TodoTask) GetLastModifiedDateTime() time.Time {
	if o == nil || o.LastModifiedDateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.LastModifiedDateTime
}

// GetLastModifiedDateTimeOk returns a tuple with the LastModifiedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TodoTask) GetLastModifiedDateTimeOk() (*time.Time, bool) {
	if o == nil || o.LastModifiedDateTime == nil {
		return nil, false
	}
	return o.LastModifiedDateTime, true
}

// HasLastModifiedDateTime returns a boolean if a field has been set.
func (o *TodoTask) HasLastModifiedDateTime() bool {
	if o != nil && o.LastModifiedDateTime != nil {
		return true
	}

	return false
}

// SetLastModifiedDateTime gets a reference to the given time.Time and assigns it to the LastModifiedDateTime field.
func (o *TodoTask) SetLastModifiedDateTime(v time.Time) {
	o.LastModifiedDateTime = &v
}

// GetRecurrence returns the Recurrence field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TodoTask) GetRecurrence() AnyOfmicrosoftGraphPatternedRecurrence {
	if o == nil  {
		var ret AnyOfmicrosoftGraphPatternedRecurrence
		return ret
	}
	return o.Recurrence
}

// GetRecurrenceOk returns a tuple with the Recurrence field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TodoTask) GetRecurrenceOk() (*AnyOfmicrosoftGraphPatternedRecurrence, bool) {
	if o == nil || o.Recurrence == nil {
		return nil, false
	}
	return &o.Recurrence, true
}

// HasRecurrence returns a boolean if a field has been set.
func (o *TodoTask) HasRecurrence() bool {
	if o != nil && o.Recurrence != nil {
		return true
	}

	return false
}

// SetRecurrence gets a reference to the given AnyOfmicrosoftGraphPatternedRecurrence and assigns it to the Recurrence field.
func (o *TodoTask) SetRecurrence(v AnyOfmicrosoftGraphPatternedRecurrence) {
	o.Recurrence = v
}

// GetReminderDateTime returns the ReminderDateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TodoTask) GetReminderDateTime() AnyOfmicrosoftGraphDateTimeTimeZone {
	if o == nil  {
		var ret AnyOfmicrosoftGraphDateTimeTimeZone
		return ret
	}
	return o.ReminderDateTime
}

// GetReminderDateTimeOk returns a tuple with the ReminderDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TodoTask) GetReminderDateTimeOk() (*AnyOfmicrosoftGraphDateTimeTimeZone, bool) {
	if o == nil || o.ReminderDateTime == nil {
		return nil, false
	}
	return &o.ReminderDateTime, true
}

// HasReminderDateTime returns a boolean if a field has been set.
func (o *TodoTask) HasReminderDateTime() bool {
	if o != nil && o.ReminderDateTime != nil {
		return true
	}

	return false
}

// SetReminderDateTime gets a reference to the given AnyOfmicrosoftGraphDateTimeTimeZone and assigns it to the ReminderDateTime field.
func (o *TodoTask) SetReminderDateTime(v AnyOfmicrosoftGraphDateTimeTimeZone) {
	o.ReminderDateTime = v
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TodoTask) GetStatus() AnyOfmicrosoftGraphTaskStatus {
	if o == nil  {
		var ret AnyOfmicrosoftGraphTaskStatus
		return ret
	}
	return o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TodoTask) GetStatusOk() (*AnyOfmicrosoftGraphTaskStatus, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return &o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *TodoTask) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given AnyOfmicrosoftGraphTaskStatus and assigns it to the Status field.
func (o *TodoTask) SetStatus(v AnyOfmicrosoftGraphTaskStatus) {
	o.Status = v
}

// GetTitle returns the Title field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TodoTask) GetTitle() string {
	if o == nil || o.Title.Get() == nil {
		var ret string
		return ret
	}
	return *o.Title.Get()
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TodoTask) GetTitleOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Title.Get(), o.Title.IsSet()
}

// HasTitle returns a boolean if a field has been set.
func (o *TodoTask) HasTitle() bool {
	if o != nil && o.Title.IsSet() {
		return true
	}

	return false
}

// SetTitle gets a reference to the given NullableString and assigns it to the Title field.
func (o *TodoTask) SetTitle(v string) {
	o.Title.Set(&v)
}
// SetTitleNil sets the value for Title to be an explicit nil
func (o *TodoTask) SetTitleNil() {
	o.Title.Set(nil)
}

// UnsetTitle ensures that no value is present for Title, not even an explicit nil
func (o *TodoTask) UnsetTitle() {
	o.Title.Unset()
}

// GetExtensions returns the Extensions field value if set, zero value otherwise.
func (o *TodoTask) GetExtensions() []MicrosoftGraphExtension {
	if o == nil || o.Extensions == nil {
		var ret []MicrosoftGraphExtension
		return ret
	}
	return *o.Extensions
}

// GetExtensionsOk returns a tuple with the Extensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TodoTask) GetExtensionsOk() (*[]MicrosoftGraphExtension, bool) {
	if o == nil || o.Extensions == nil {
		return nil, false
	}
	return o.Extensions, true
}

// HasExtensions returns a boolean if a field has been set.
func (o *TodoTask) HasExtensions() bool {
	if o != nil && o.Extensions != nil {
		return true
	}

	return false
}

// SetExtensions gets a reference to the given []MicrosoftGraphExtension and assigns it to the Extensions field.
func (o *TodoTask) SetExtensions(v []MicrosoftGraphExtension) {
	o.Extensions = &v
}

// GetLinkedResources returns the LinkedResources field value if set, zero value otherwise.
func (o *TodoTask) GetLinkedResources() []MicrosoftGraphLinkedResource {
	if o == nil || o.LinkedResources == nil {
		var ret []MicrosoftGraphLinkedResource
		return ret
	}
	return *o.LinkedResources
}

// GetLinkedResourcesOk returns a tuple with the LinkedResources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TodoTask) GetLinkedResourcesOk() (*[]MicrosoftGraphLinkedResource, bool) {
	if o == nil || o.LinkedResources == nil {
		return nil, false
	}
	return o.LinkedResources, true
}

// HasLinkedResources returns a boolean if a field has been set.
func (o *TodoTask) HasLinkedResources() bool {
	if o != nil && o.LinkedResources != nil {
		return true
	}

	return false
}

// SetLinkedResources gets a reference to the given []MicrosoftGraphLinkedResource and assigns it to the LinkedResources field.
func (o *TodoTask) SetLinkedResources(v []MicrosoftGraphLinkedResource) {
	o.LinkedResources = &v
}

func (o TodoTask) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Body != nil {
		toSerialize["body"] = o.Body
	}
	if o.BodyLastModifiedDateTime != nil {
		toSerialize["bodyLastModifiedDateTime"] = o.BodyLastModifiedDateTime
	}
	if o.CompletedDateTime != nil {
		toSerialize["completedDateTime"] = o.CompletedDateTime
	}
	if o.CreatedDateTime != nil {
		toSerialize["createdDateTime"] = o.CreatedDateTime
	}
	if o.DueDateTime != nil {
		toSerialize["dueDateTime"] = o.DueDateTime
	}
	if o.Importance != nil {
		toSerialize["importance"] = o.Importance
	}
	if o.IsReminderOn != nil {
		toSerialize["isReminderOn"] = o.IsReminderOn
	}
	if o.LastModifiedDateTime != nil {
		toSerialize["lastModifiedDateTime"] = o.LastModifiedDateTime
	}
	if o.Recurrence != nil {
		toSerialize["recurrence"] = o.Recurrence
	}
	if o.ReminderDateTime != nil {
		toSerialize["reminderDateTime"] = o.ReminderDateTime
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Title.IsSet() {
		toSerialize["title"] = o.Title.Get()
	}
	if o.Extensions != nil {
		toSerialize["extensions"] = o.Extensions
	}
	if o.LinkedResources != nil {
		toSerialize["linkedResources"] = o.LinkedResources
	}
	return json.Marshal(toSerialize)
}

type NullableTodoTask struct {
	value *TodoTask
	isSet bool
}

func (v NullableTodoTask) Get() *TodoTask {
	return v.value
}

func (v *NullableTodoTask) Set(val *TodoTask) {
	v.value = val
	v.isSet = true
}

func (v NullableTodoTask) IsSet() bool {
	return v.isSet
}

func (v *NullableTodoTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTodoTask(val *TodoTask) *NullableTodoTask {
	return &NullableTodoTask{value: val, isSet: true}
}

func (v NullableTodoTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTodoTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


