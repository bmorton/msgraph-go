/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ThumbnailSet struct for ThumbnailSet
type ThumbnailSet struct {
	// A 1920x1920 scaled thumbnail.
	Large AnyOfmicrosoftGraphThumbnail `json:"large,omitempty"`
	// A 176x176 scaled thumbnail.
	Medium AnyOfmicrosoftGraphThumbnail `json:"medium,omitempty"`
	// A 48x48 cropped thumbnail.
	Small AnyOfmicrosoftGraphThumbnail `json:"small,omitempty"`
	// A custom thumbnail image or the original image used to generate other thumbnails.
	Source AnyOfmicrosoftGraphThumbnail `json:"source,omitempty"`
}

// NewThumbnailSet instantiates a new ThumbnailSet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThumbnailSet() *ThumbnailSet {
	this := ThumbnailSet{}
	return &this
}

// NewThumbnailSetWithDefaults instantiates a new ThumbnailSet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThumbnailSetWithDefaults() *ThumbnailSet {
	this := ThumbnailSet{}
	return &this
}

// GetLarge returns the Large field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThumbnailSet) GetLarge() AnyOfmicrosoftGraphThumbnail {
	if o == nil  {
		var ret AnyOfmicrosoftGraphThumbnail
		return ret
	}
	return o.Large
}

// GetLargeOk returns a tuple with the Large field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThumbnailSet) GetLargeOk() (*AnyOfmicrosoftGraphThumbnail, bool) {
	if o == nil || o.Large == nil {
		return nil, false
	}
	return &o.Large, true
}

// HasLarge returns a boolean if a field has been set.
func (o *ThumbnailSet) HasLarge() bool {
	if o != nil && o.Large != nil {
		return true
	}

	return false
}

// SetLarge gets a reference to the given AnyOfmicrosoftGraphThumbnail and assigns it to the Large field.
func (o *ThumbnailSet) SetLarge(v AnyOfmicrosoftGraphThumbnail) {
	o.Large = v
}

// GetMedium returns the Medium field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThumbnailSet) GetMedium() AnyOfmicrosoftGraphThumbnail {
	if o == nil  {
		var ret AnyOfmicrosoftGraphThumbnail
		return ret
	}
	return o.Medium
}

// GetMediumOk returns a tuple with the Medium field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThumbnailSet) GetMediumOk() (*AnyOfmicrosoftGraphThumbnail, bool) {
	if o == nil || o.Medium == nil {
		return nil, false
	}
	return &o.Medium, true
}

// HasMedium returns a boolean if a field has been set.
func (o *ThumbnailSet) HasMedium() bool {
	if o != nil && o.Medium != nil {
		return true
	}

	return false
}

// SetMedium gets a reference to the given AnyOfmicrosoftGraphThumbnail and assigns it to the Medium field.
func (o *ThumbnailSet) SetMedium(v AnyOfmicrosoftGraphThumbnail) {
	o.Medium = v
}

// GetSmall returns the Small field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThumbnailSet) GetSmall() AnyOfmicrosoftGraphThumbnail {
	if o == nil  {
		var ret AnyOfmicrosoftGraphThumbnail
		return ret
	}
	return o.Small
}

// GetSmallOk returns a tuple with the Small field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThumbnailSet) GetSmallOk() (*AnyOfmicrosoftGraphThumbnail, bool) {
	if o == nil || o.Small == nil {
		return nil, false
	}
	return &o.Small, true
}

// HasSmall returns a boolean if a field has been set.
func (o *ThumbnailSet) HasSmall() bool {
	if o != nil && o.Small != nil {
		return true
	}

	return false
}

// SetSmall gets a reference to the given AnyOfmicrosoftGraphThumbnail and assigns it to the Small field.
func (o *ThumbnailSet) SetSmall(v AnyOfmicrosoftGraphThumbnail) {
	o.Small = v
}

// GetSource returns the Source field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ThumbnailSet) GetSource() AnyOfmicrosoftGraphThumbnail {
	if o == nil  {
		var ret AnyOfmicrosoftGraphThumbnail
		return ret
	}
	return o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ThumbnailSet) GetSourceOk() (*AnyOfmicrosoftGraphThumbnail, bool) {
	if o == nil || o.Source == nil {
		return nil, false
	}
	return &o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *ThumbnailSet) HasSource() bool {
	if o != nil && o.Source != nil {
		return true
	}

	return false
}

// SetSource gets a reference to the given AnyOfmicrosoftGraphThumbnail and assigns it to the Source field.
func (o *ThumbnailSet) SetSource(v AnyOfmicrosoftGraphThumbnail) {
	o.Source = v
}

func (o ThumbnailSet) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Large != nil {
		toSerialize["large"] = o.Large
	}
	if o.Medium != nil {
		toSerialize["medium"] = o.Medium
	}
	if o.Small != nil {
		toSerialize["small"] = o.Small
	}
	if o.Source != nil {
		toSerialize["source"] = o.Source
	}
	return json.Marshal(toSerialize)
}

type NullableThumbnailSet struct {
	value *ThumbnailSet
	isSet bool
}

func (v NullableThumbnailSet) Get() *ThumbnailSet {
	return v.value
}

func (v *NullableThumbnailSet) Set(val *ThumbnailSet) {
	v.value = val
	v.isSet = true
}

func (v NullableThumbnailSet) IsSet() bool {
	return v.isSet
}

func (v *NullableThumbnailSet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThumbnailSet(val *ThumbnailSet) *NullableThumbnailSet {
	return &NullableThumbnailSet{value: val, isSet: true}
}

func (v NullableThumbnailSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThumbnailSet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


