/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphRecordingStatus the model 'MicrosoftGraphRecordingStatus'
type MicrosoftGraphRecordingStatus string

// List of microsoft.graph.recordingStatus
const (
	UNKNOWN MicrosoftGraphRecordingStatus = "unknown"
	NOT_RECORDING MicrosoftGraphRecordingStatus = "notRecording"
	RECORDING MicrosoftGraphRecordingStatus = "recording"
	FAILED MicrosoftGraphRecordingStatus = "failed"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphRecordingStatus = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphRecordingStatus enum
var AllowedMicrosoftGraphRecordingStatusEnumValues = []MicrosoftGraphRecordingStatus{
	"unknown",
	"notRecording",
	"recording",
	"failed",
	"unknownFutureValue",
}

func (v *MicrosoftGraphRecordingStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphRecordingStatus(value)
	for _, existing := range AllowedMicrosoftGraphRecordingStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphRecordingStatus", value)
}

// NewMicrosoftGraphRecordingStatusFromValue returns a pointer to a valid MicrosoftGraphRecordingStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphRecordingStatusFromValue(v string) (*MicrosoftGraphRecordingStatus, error) {
	ev := MicrosoftGraphRecordingStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphRecordingStatus: valid values are %v", v, AllowedMicrosoftGraphRecordingStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphRecordingStatus) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphRecordingStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.recordingStatus value
func (v MicrosoftGraphRecordingStatus) Ptr() *MicrosoftGraphRecordingStatus {
	return &v
}

type NullableMicrosoftGraphRecordingStatus struct {
	value *MicrosoftGraphRecordingStatus
	isSet bool
}

func (v NullableMicrosoftGraphRecordingStatus) Get() *MicrosoftGraphRecordingStatus {
	return v.value
}

func (v *NullableMicrosoftGraphRecordingStatus) Set(val *MicrosoftGraphRecordingStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphRecordingStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphRecordingStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphRecordingStatus(val *MicrosoftGraphRecordingStatus) *NullableMicrosoftGraphRecordingStatus {
	return &NullableMicrosoftGraphRecordingStatus{value: val, isSet: true}
}

func (v NullableMicrosoftGraphRecordingStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphRecordingStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

