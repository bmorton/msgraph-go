/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphPrinterProcessingState the model 'MicrosoftGraphPrinterProcessingState'
type MicrosoftGraphPrinterProcessingState string

// List of microsoft.graph.printerProcessingState
const (
	UNKNOWN MicrosoftGraphPrinterProcessingState = "unknown"
	IDLE MicrosoftGraphPrinterProcessingState = "idle"
	PROCESSING MicrosoftGraphPrinterProcessingState = "processing"
	STOPPED MicrosoftGraphPrinterProcessingState = "stopped"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphPrinterProcessingState = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphPrinterProcessingState enum
var AllowedMicrosoftGraphPrinterProcessingStateEnumValues = []MicrosoftGraphPrinterProcessingState{
	"unknown",
	"idle",
	"processing",
	"stopped",
	"unknownFutureValue",
}

func (v *MicrosoftGraphPrinterProcessingState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphPrinterProcessingState(value)
	for _, existing := range AllowedMicrosoftGraphPrinterProcessingStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphPrinterProcessingState", value)
}

// NewMicrosoftGraphPrinterProcessingStateFromValue returns a pointer to a valid MicrosoftGraphPrinterProcessingState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphPrinterProcessingStateFromValue(v string) (*MicrosoftGraphPrinterProcessingState, error) {
	ev := MicrosoftGraphPrinterProcessingState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphPrinterProcessingState: valid values are %v", v, AllowedMicrosoftGraphPrinterProcessingStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphPrinterProcessingState) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphPrinterProcessingStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.printerProcessingState value
func (v MicrosoftGraphPrinterProcessingState) Ptr() *MicrosoftGraphPrinterProcessingState {
	return &v
}

type NullableMicrosoftGraphPrinterProcessingState struct {
	value *MicrosoftGraphPrinterProcessingState
	isSet bool
}

func (v NullableMicrosoftGraphPrinterProcessingState) Get() *MicrosoftGraphPrinterProcessingState {
	return v.value
}

func (v *NullableMicrosoftGraphPrinterProcessingState) Set(val *MicrosoftGraphPrinterProcessingState) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphPrinterProcessingState) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphPrinterProcessingState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphPrinterProcessingState(val *MicrosoftGraphPrinterProcessingState) *NullableMicrosoftGraphPrinterProcessingState {
	return &NullableMicrosoftGraphPrinterProcessingState{value: val, isSet: true}
}

func (v NullableMicrosoftGraphPrinterProcessingState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphPrinterProcessingState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

