/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
)

// ServiceHealthIssue struct for ServiceHealthIssue
type ServiceHealthIssue struct {
	// The type of service health issue. Possible values are: advisory, incident, unknownFutureValue.
	Classification AnyOfmicrosoftGraphServiceHealthClassificationType `json:"classification,omitempty"`
	// The feature name of the service issue.
	Feature NullableString `json:"feature,omitempty"`
	// The feature group name of the service issue.
	FeatureGroup NullableString `json:"featureGroup,omitempty"`
	// The description of the service issue impact.
	ImpactDescription *string `json:"impactDescription,omitempty"`
	// Indicates whether the issue is resolved.
	IsResolved *bool `json:"isResolved,omitempty"`
	// Indicates the origin of the service issue. Possible values are: microsoft, thirdParty, customer, unknownFutureValue.
	Origin AnyOfmicrosoftGraphServiceHealthOrigin `json:"origin,omitempty"`
	// Collection of historical posts for the service issue.
	Posts *[]MicrosoftGraphServiceHealthIssuePost `json:"posts,omitempty"`
	// Indicates the service affected by the issue.
	Service *string `json:"service,omitempty"`
	// The status of the service issue. Possible values are: serviceOperational, investigating, restoringService, verifyingService, serviceRestored, postIncidentReviewPublished, serviceDegradation, serviceInterruption, extendedRecovery, falsePositive, investigationSuspended, resolved, mitigatedExternal, mitigated, resolvedExternal, confirmed, reported, unknownFutureValue.
	Status AnyOfmicrosoftGraphServiceHealthStatus `json:"status,omitempty"`
}

// NewServiceHealthIssue instantiates a new ServiceHealthIssue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceHealthIssue() *ServiceHealthIssue {
	this := ServiceHealthIssue{}
	return &this
}

// NewServiceHealthIssueWithDefaults instantiates a new ServiceHealthIssue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceHealthIssueWithDefaults() *ServiceHealthIssue {
	this := ServiceHealthIssue{}
	return &this
}

// GetClassification returns the Classification field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceHealthIssue) GetClassification() AnyOfmicrosoftGraphServiceHealthClassificationType {
	if o == nil  {
		var ret AnyOfmicrosoftGraphServiceHealthClassificationType
		return ret
	}
	return o.Classification
}

// GetClassificationOk returns a tuple with the Classification field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceHealthIssue) GetClassificationOk() (*AnyOfmicrosoftGraphServiceHealthClassificationType, bool) {
	if o == nil || o.Classification == nil {
		return nil, false
	}
	return &o.Classification, true
}

// HasClassification returns a boolean if a field has been set.
func (o *ServiceHealthIssue) HasClassification() bool {
	if o != nil && o.Classification != nil {
		return true
	}

	return false
}

// SetClassification gets a reference to the given AnyOfmicrosoftGraphServiceHealthClassificationType and assigns it to the Classification field.
func (o *ServiceHealthIssue) SetClassification(v AnyOfmicrosoftGraphServiceHealthClassificationType) {
	o.Classification = v
}

// GetFeature returns the Feature field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceHealthIssue) GetFeature() string {
	if o == nil || o.Feature.Get() == nil {
		var ret string
		return ret
	}
	return *o.Feature.Get()
}

// GetFeatureOk returns a tuple with the Feature field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceHealthIssue) GetFeatureOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Feature.Get(), o.Feature.IsSet()
}

// HasFeature returns a boolean if a field has been set.
func (o *ServiceHealthIssue) HasFeature() bool {
	if o != nil && o.Feature.IsSet() {
		return true
	}

	return false
}

// SetFeature gets a reference to the given NullableString and assigns it to the Feature field.
func (o *ServiceHealthIssue) SetFeature(v string) {
	o.Feature.Set(&v)
}
// SetFeatureNil sets the value for Feature to be an explicit nil
func (o *ServiceHealthIssue) SetFeatureNil() {
	o.Feature.Set(nil)
}

// UnsetFeature ensures that no value is present for Feature, not even an explicit nil
func (o *ServiceHealthIssue) UnsetFeature() {
	o.Feature.Unset()
}

// GetFeatureGroup returns the FeatureGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceHealthIssue) GetFeatureGroup() string {
	if o == nil || o.FeatureGroup.Get() == nil {
		var ret string
		return ret
	}
	return *o.FeatureGroup.Get()
}

// GetFeatureGroupOk returns a tuple with the FeatureGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceHealthIssue) GetFeatureGroupOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FeatureGroup.Get(), o.FeatureGroup.IsSet()
}

// HasFeatureGroup returns a boolean if a field has been set.
func (o *ServiceHealthIssue) HasFeatureGroup() bool {
	if o != nil && o.FeatureGroup.IsSet() {
		return true
	}

	return false
}

// SetFeatureGroup gets a reference to the given NullableString and assigns it to the FeatureGroup field.
func (o *ServiceHealthIssue) SetFeatureGroup(v string) {
	o.FeatureGroup.Set(&v)
}
// SetFeatureGroupNil sets the value for FeatureGroup to be an explicit nil
func (o *ServiceHealthIssue) SetFeatureGroupNil() {
	o.FeatureGroup.Set(nil)
}

// UnsetFeatureGroup ensures that no value is present for FeatureGroup, not even an explicit nil
func (o *ServiceHealthIssue) UnsetFeatureGroup() {
	o.FeatureGroup.Unset()
}

// GetImpactDescription returns the ImpactDescription field value if set, zero value otherwise.
func (o *ServiceHealthIssue) GetImpactDescription() string {
	if o == nil || o.ImpactDescription == nil {
		var ret string
		return ret
	}
	return *o.ImpactDescription
}

// GetImpactDescriptionOk returns a tuple with the ImpactDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceHealthIssue) GetImpactDescriptionOk() (*string, bool) {
	if o == nil || o.ImpactDescription == nil {
		return nil, false
	}
	return o.ImpactDescription, true
}

// HasImpactDescription returns a boolean if a field has been set.
func (o *ServiceHealthIssue) HasImpactDescription() bool {
	if o != nil && o.ImpactDescription != nil {
		return true
	}

	return false
}

// SetImpactDescription gets a reference to the given string and assigns it to the ImpactDescription field.
func (o *ServiceHealthIssue) SetImpactDescription(v string) {
	o.ImpactDescription = &v
}

// GetIsResolved returns the IsResolved field value if set, zero value otherwise.
func (o *ServiceHealthIssue) GetIsResolved() bool {
	if o == nil || o.IsResolved == nil {
		var ret bool
		return ret
	}
	return *o.IsResolved
}

// GetIsResolvedOk returns a tuple with the IsResolved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceHealthIssue) GetIsResolvedOk() (*bool, bool) {
	if o == nil || o.IsResolved == nil {
		return nil, false
	}
	return o.IsResolved, true
}

// HasIsResolved returns a boolean if a field has been set.
func (o *ServiceHealthIssue) HasIsResolved() bool {
	if o != nil && o.IsResolved != nil {
		return true
	}

	return false
}

// SetIsResolved gets a reference to the given bool and assigns it to the IsResolved field.
func (o *ServiceHealthIssue) SetIsResolved(v bool) {
	o.IsResolved = &v
}

// GetOrigin returns the Origin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceHealthIssue) GetOrigin() AnyOfmicrosoftGraphServiceHealthOrigin {
	if o == nil  {
		var ret AnyOfmicrosoftGraphServiceHealthOrigin
		return ret
	}
	return o.Origin
}

// GetOriginOk returns a tuple with the Origin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceHealthIssue) GetOriginOk() (*AnyOfmicrosoftGraphServiceHealthOrigin, bool) {
	if o == nil || o.Origin == nil {
		return nil, false
	}
	return &o.Origin, true
}

// HasOrigin returns a boolean if a field has been set.
func (o *ServiceHealthIssue) HasOrigin() bool {
	if o != nil && o.Origin != nil {
		return true
	}

	return false
}

// SetOrigin gets a reference to the given AnyOfmicrosoftGraphServiceHealthOrigin and assigns it to the Origin field.
func (o *ServiceHealthIssue) SetOrigin(v AnyOfmicrosoftGraphServiceHealthOrigin) {
	o.Origin = v
}

// GetPosts returns the Posts field value if set, zero value otherwise.
func (o *ServiceHealthIssue) GetPosts() []MicrosoftGraphServiceHealthIssuePost {
	if o == nil || o.Posts == nil {
		var ret []MicrosoftGraphServiceHealthIssuePost
		return ret
	}
	return *o.Posts
}

// GetPostsOk returns a tuple with the Posts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceHealthIssue) GetPostsOk() (*[]MicrosoftGraphServiceHealthIssuePost, bool) {
	if o == nil || o.Posts == nil {
		return nil, false
	}
	return o.Posts, true
}

// HasPosts returns a boolean if a field has been set.
func (o *ServiceHealthIssue) HasPosts() bool {
	if o != nil && o.Posts != nil {
		return true
	}

	return false
}

// SetPosts gets a reference to the given []MicrosoftGraphServiceHealthIssuePost and assigns it to the Posts field.
func (o *ServiceHealthIssue) SetPosts(v []MicrosoftGraphServiceHealthIssuePost) {
	o.Posts = &v
}

// GetService returns the Service field value if set, zero value otherwise.
func (o *ServiceHealthIssue) GetService() string {
	if o == nil || o.Service == nil {
		var ret string
		return ret
	}
	return *o.Service
}

// GetServiceOk returns a tuple with the Service field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceHealthIssue) GetServiceOk() (*string, bool) {
	if o == nil || o.Service == nil {
		return nil, false
	}
	return o.Service, true
}

// HasService returns a boolean if a field has been set.
func (o *ServiceHealthIssue) HasService() bool {
	if o != nil && o.Service != nil {
		return true
	}

	return false
}

// SetService gets a reference to the given string and assigns it to the Service field.
func (o *ServiceHealthIssue) SetService(v string) {
	o.Service = &v
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceHealthIssue) GetStatus() AnyOfmicrosoftGraphServiceHealthStatus {
	if o == nil  {
		var ret AnyOfmicrosoftGraphServiceHealthStatus
		return ret
	}
	return o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceHealthIssue) GetStatusOk() (*AnyOfmicrosoftGraphServiceHealthStatus, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return &o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ServiceHealthIssue) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given AnyOfmicrosoftGraphServiceHealthStatus and assigns it to the Status field.
func (o *ServiceHealthIssue) SetStatus(v AnyOfmicrosoftGraphServiceHealthStatus) {
	o.Status = v
}

func (o ServiceHealthIssue) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Classification != nil {
		toSerialize["classification"] = o.Classification
	}
	if o.Feature.IsSet() {
		toSerialize["feature"] = o.Feature.Get()
	}
	if o.FeatureGroup.IsSet() {
		toSerialize["featureGroup"] = o.FeatureGroup.Get()
	}
	if o.ImpactDescription != nil {
		toSerialize["impactDescription"] = o.ImpactDescription
	}
	if o.IsResolved != nil {
		toSerialize["isResolved"] = o.IsResolved
	}
	if o.Origin != nil {
		toSerialize["origin"] = o.Origin
	}
	if o.Posts != nil {
		toSerialize["posts"] = o.Posts
	}
	if o.Service != nil {
		toSerialize["service"] = o.Service
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableServiceHealthIssue struct {
	value *ServiceHealthIssue
	isSet bool
}

func (v NullableServiceHealthIssue) Get() *ServiceHealthIssue {
	return v.value
}

func (v *NullableServiceHealthIssue) Set(val *ServiceHealthIssue) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceHealthIssue) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceHealthIssue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceHealthIssue(val *ServiceHealthIssue) *NullableServiceHealthIssue {
	return &NullableServiceHealthIssue{value: val, isSet: true}
}

func (v NullableServiceHealthIssue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceHealthIssue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


