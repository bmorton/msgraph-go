/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// InformationProtectionThreatAssessmentRequestApiService InformationProtectionThreatAssessmentRequestApi service
type InformationProtectionThreatAssessmentRequestApiService service

type ApiInformationProtectionCreateThreatAssessmentRequestsRequest struct {
	ctx _context.Context
	ApiService *InformationProtectionThreatAssessmentRequestApiService
	microsoftGraphThreatAssessmentRequest *MicrosoftGraphThreatAssessmentRequest
}

// New navigation property
func (r ApiInformationProtectionCreateThreatAssessmentRequestsRequest) MicrosoftGraphThreatAssessmentRequest(microsoftGraphThreatAssessmentRequest MicrosoftGraphThreatAssessmentRequest) ApiInformationProtectionCreateThreatAssessmentRequestsRequest {
	r.microsoftGraphThreatAssessmentRequest = &microsoftGraphThreatAssessmentRequest
	return r
}

func (r ApiInformationProtectionCreateThreatAssessmentRequestsRequest) Execute() (MicrosoftGraphThreatAssessmentRequest, *_nethttp.Response, error) {
	return r.ApiService.InformationProtectionCreateThreatAssessmentRequestsExecute(r)
}

/*
InformationProtectionCreateThreatAssessmentRequests Create new navigation property to threatAssessmentRequests for informationProtection

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiInformationProtectionCreateThreatAssessmentRequestsRequest
*/
func (a *InformationProtectionThreatAssessmentRequestApiService) InformationProtectionCreateThreatAssessmentRequests(ctx _context.Context) ApiInformationProtectionCreateThreatAssessmentRequestsRequest {
	return ApiInformationProtectionCreateThreatAssessmentRequestsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphThreatAssessmentRequest
func (a *InformationProtectionThreatAssessmentRequestApiService) InformationProtectionCreateThreatAssessmentRequestsExecute(r ApiInformationProtectionCreateThreatAssessmentRequestsRequest) (MicrosoftGraphThreatAssessmentRequest, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphThreatAssessmentRequest
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InformationProtectionThreatAssessmentRequestApiService.InformationProtectionCreateThreatAssessmentRequests")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/informationProtection/threatAssessmentRequests"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphThreatAssessmentRequest == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphThreatAssessmentRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphThreatAssessmentRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInformationProtectionDeleteThreatAssessmentRequestsRequest struct {
	ctx _context.Context
	ApiService *InformationProtectionThreatAssessmentRequestApiService
	threatAssessmentRequestId string
	ifMatch *string
}

// ETag
func (r ApiInformationProtectionDeleteThreatAssessmentRequestsRequest) IfMatch(ifMatch string) ApiInformationProtectionDeleteThreatAssessmentRequestsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiInformationProtectionDeleteThreatAssessmentRequestsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.InformationProtectionDeleteThreatAssessmentRequestsExecute(r)
}

/*
InformationProtectionDeleteThreatAssessmentRequests Delete navigation property threatAssessmentRequests for informationProtection

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param threatAssessmentRequestId key: id of threatAssessmentRequest
 @return ApiInformationProtectionDeleteThreatAssessmentRequestsRequest
*/
func (a *InformationProtectionThreatAssessmentRequestApiService) InformationProtectionDeleteThreatAssessmentRequests(ctx _context.Context, threatAssessmentRequestId string) ApiInformationProtectionDeleteThreatAssessmentRequestsRequest {
	return ApiInformationProtectionDeleteThreatAssessmentRequestsRequest{
		ApiService: a,
		ctx: ctx,
		threatAssessmentRequestId: threatAssessmentRequestId,
	}
}

// Execute executes the request
func (a *InformationProtectionThreatAssessmentRequestApiService) InformationProtectionDeleteThreatAssessmentRequestsExecute(r ApiInformationProtectionDeleteThreatAssessmentRequestsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InformationProtectionThreatAssessmentRequestApiService.InformationProtectionDeleteThreatAssessmentRequests")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/informationProtection/threatAssessmentRequests/{threatAssessmentRequest-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"threatAssessmentRequest-id"+"}", _neturl.PathEscape(parameterToString(r.threatAssessmentRequestId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiInformationProtectionGetThreatAssessmentRequestsRequest struct {
	ctx _context.Context
	ApiService *InformationProtectionThreatAssessmentRequestApiService
	threatAssessmentRequestId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiInformationProtectionGetThreatAssessmentRequestsRequest) Select_(select_ []string) ApiInformationProtectionGetThreatAssessmentRequestsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiInformationProtectionGetThreatAssessmentRequestsRequest) Expand(expand []string) ApiInformationProtectionGetThreatAssessmentRequestsRequest {
	r.expand = &expand
	return r
}

func (r ApiInformationProtectionGetThreatAssessmentRequestsRequest) Execute() (MicrosoftGraphThreatAssessmentRequest, *_nethttp.Response, error) {
	return r.ApiService.InformationProtectionGetThreatAssessmentRequestsExecute(r)
}

/*
InformationProtectionGetThreatAssessmentRequests Get threatAssessmentRequests from informationProtection

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param threatAssessmentRequestId key: id of threatAssessmentRequest
 @return ApiInformationProtectionGetThreatAssessmentRequestsRequest
*/
func (a *InformationProtectionThreatAssessmentRequestApiService) InformationProtectionGetThreatAssessmentRequests(ctx _context.Context, threatAssessmentRequestId string) ApiInformationProtectionGetThreatAssessmentRequestsRequest {
	return ApiInformationProtectionGetThreatAssessmentRequestsRequest{
		ApiService: a,
		ctx: ctx,
		threatAssessmentRequestId: threatAssessmentRequestId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphThreatAssessmentRequest
func (a *InformationProtectionThreatAssessmentRequestApiService) InformationProtectionGetThreatAssessmentRequestsExecute(r ApiInformationProtectionGetThreatAssessmentRequestsRequest) (MicrosoftGraphThreatAssessmentRequest, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphThreatAssessmentRequest
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InformationProtectionThreatAssessmentRequestApiService.InformationProtectionGetThreatAssessmentRequests")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/informationProtection/threatAssessmentRequests/{threatAssessmentRequest-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"threatAssessmentRequest-id"+"}", _neturl.PathEscape(parameterToString(r.threatAssessmentRequestId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInformationProtectionListThreatAssessmentRequestsRequest struct {
	ctx _context.Context
	ApiService *InformationProtectionThreatAssessmentRequestApiService
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiInformationProtectionListThreatAssessmentRequestsRequest) Top(top int32) ApiInformationProtectionListThreatAssessmentRequestsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiInformationProtectionListThreatAssessmentRequestsRequest) Skip(skip int32) ApiInformationProtectionListThreatAssessmentRequestsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiInformationProtectionListThreatAssessmentRequestsRequest) Search(search string) ApiInformationProtectionListThreatAssessmentRequestsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiInformationProtectionListThreatAssessmentRequestsRequest) Filter(filter string) ApiInformationProtectionListThreatAssessmentRequestsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiInformationProtectionListThreatAssessmentRequestsRequest) Count(count bool) ApiInformationProtectionListThreatAssessmentRequestsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiInformationProtectionListThreatAssessmentRequestsRequest) Orderby(orderby []string) ApiInformationProtectionListThreatAssessmentRequestsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiInformationProtectionListThreatAssessmentRequestsRequest) Select_(select_ []string) ApiInformationProtectionListThreatAssessmentRequestsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiInformationProtectionListThreatAssessmentRequestsRequest) Expand(expand []string) ApiInformationProtectionListThreatAssessmentRequestsRequest {
	r.expand = &expand
	return r
}

func (r ApiInformationProtectionListThreatAssessmentRequestsRequest) Execute() (CollectionOfThreatAssessmentRequest, *_nethttp.Response, error) {
	return r.ApiService.InformationProtectionListThreatAssessmentRequestsExecute(r)
}

/*
InformationProtectionListThreatAssessmentRequests Get threatAssessmentRequests from informationProtection

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiInformationProtectionListThreatAssessmentRequestsRequest
*/
func (a *InformationProtectionThreatAssessmentRequestApiService) InformationProtectionListThreatAssessmentRequests(ctx _context.Context) ApiInformationProtectionListThreatAssessmentRequestsRequest {
	return ApiInformationProtectionListThreatAssessmentRequestsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfThreatAssessmentRequest
func (a *InformationProtectionThreatAssessmentRequestApiService) InformationProtectionListThreatAssessmentRequestsExecute(r ApiInformationProtectionListThreatAssessmentRequestsRequest) (CollectionOfThreatAssessmentRequest, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfThreatAssessmentRequest
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InformationProtectionThreatAssessmentRequestApiService.InformationProtectionListThreatAssessmentRequests")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/informationProtection/threatAssessmentRequests"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInformationProtectionThreatAssessmentRequestsCreateResultsRequest struct {
	ctx _context.Context
	ApiService *InformationProtectionThreatAssessmentRequestApiService
	threatAssessmentRequestId string
	microsoftGraphThreatAssessmentResult *MicrosoftGraphThreatAssessmentResult
}

// New navigation property
func (r ApiInformationProtectionThreatAssessmentRequestsCreateResultsRequest) MicrosoftGraphThreatAssessmentResult(microsoftGraphThreatAssessmentResult MicrosoftGraphThreatAssessmentResult) ApiInformationProtectionThreatAssessmentRequestsCreateResultsRequest {
	r.microsoftGraphThreatAssessmentResult = &microsoftGraphThreatAssessmentResult
	return r
}

func (r ApiInformationProtectionThreatAssessmentRequestsCreateResultsRequest) Execute() (MicrosoftGraphThreatAssessmentResult, *_nethttp.Response, error) {
	return r.ApiService.InformationProtectionThreatAssessmentRequestsCreateResultsExecute(r)
}

/*
InformationProtectionThreatAssessmentRequestsCreateResults Create new navigation property to results for informationProtection

A collection of threat assessment results. Read-only. By default, a GET /threatAssessmentRequests/{id} does not return this property unless you apply $expand on it.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param threatAssessmentRequestId key: id of threatAssessmentRequest
 @return ApiInformationProtectionThreatAssessmentRequestsCreateResultsRequest
*/
func (a *InformationProtectionThreatAssessmentRequestApiService) InformationProtectionThreatAssessmentRequestsCreateResults(ctx _context.Context, threatAssessmentRequestId string) ApiInformationProtectionThreatAssessmentRequestsCreateResultsRequest {
	return ApiInformationProtectionThreatAssessmentRequestsCreateResultsRequest{
		ApiService: a,
		ctx: ctx,
		threatAssessmentRequestId: threatAssessmentRequestId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphThreatAssessmentResult
func (a *InformationProtectionThreatAssessmentRequestApiService) InformationProtectionThreatAssessmentRequestsCreateResultsExecute(r ApiInformationProtectionThreatAssessmentRequestsCreateResultsRequest) (MicrosoftGraphThreatAssessmentResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphThreatAssessmentResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InformationProtectionThreatAssessmentRequestApiService.InformationProtectionThreatAssessmentRequestsCreateResults")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/informationProtection/threatAssessmentRequests/{threatAssessmentRequest-id}/results"
	localVarPath = strings.Replace(localVarPath, "{"+"threatAssessmentRequest-id"+"}", _neturl.PathEscape(parameterToString(r.threatAssessmentRequestId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphThreatAssessmentResult == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphThreatAssessmentResult is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphThreatAssessmentResult
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInformationProtectionThreatAssessmentRequestsDeleteResultsRequest struct {
	ctx _context.Context
	ApiService *InformationProtectionThreatAssessmentRequestApiService
	threatAssessmentRequestId string
	threatAssessmentResultId string
	ifMatch *string
}

// ETag
func (r ApiInformationProtectionThreatAssessmentRequestsDeleteResultsRequest) IfMatch(ifMatch string) ApiInformationProtectionThreatAssessmentRequestsDeleteResultsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiInformationProtectionThreatAssessmentRequestsDeleteResultsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.InformationProtectionThreatAssessmentRequestsDeleteResultsExecute(r)
}

/*
InformationProtectionThreatAssessmentRequestsDeleteResults Delete navigation property results for informationProtection

A collection of threat assessment results. Read-only. By default, a GET /threatAssessmentRequests/{id} does not return this property unless you apply $expand on it.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param threatAssessmentRequestId key: id of threatAssessmentRequest
 @param threatAssessmentResultId key: id of threatAssessmentResult
 @return ApiInformationProtectionThreatAssessmentRequestsDeleteResultsRequest
*/
func (a *InformationProtectionThreatAssessmentRequestApiService) InformationProtectionThreatAssessmentRequestsDeleteResults(ctx _context.Context, threatAssessmentRequestId string, threatAssessmentResultId string) ApiInformationProtectionThreatAssessmentRequestsDeleteResultsRequest {
	return ApiInformationProtectionThreatAssessmentRequestsDeleteResultsRequest{
		ApiService: a,
		ctx: ctx,
		threatAssessmentRequestId: threatAssessmentRequestId,
		threatAssessmentResultId: threatAssessmentResultId,
	}
}

// Execute executes the request
func (a *InformationProtectionThreatAssessmentRequestApiService) InformationProtectionThreatAssessmentRequestsDeleteResultsExecute(r ApiInformationProtectionThreatAssessmentRequestsDeleteResultsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InformationProtectionThreatAssessmentRequestApiService.InformationProtectionThreatAssessmentRequestsDeleteResults")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/informationProtection/threatAssessmentRequests/{threatAssessmentRequest-id}/results/{threatAssessmentResult-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"threatAssessmentRequest-id"+"}", _neturl.PathEscape(parameterToString(r.threatAssessmentRequestId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"threatAssessmentResult-id"+"}", _neturl.PathEscape(parameterToString(r.threatAssessmentResultId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiInformationProtectionThreatAssessmentRequestsGetResultsRequest struct {
	ctx _context.Context
	ApiService *InformationProtectionThreatAssessmentRequestApiService
	threatAssessmentRequestId string
	threatAssessmentResultId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiInformationProtectionThreatAssessmentRequestsGetResultsRequest) Select_(select_ []string) ApiInformationProtectionThreatAssessmentRequestsGetResultsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiInformationProtectionThreatAssessmentRequestsGetResultsRequest) Expand(expand []string) ApiInformationProtectionThreatAssessmentRequestsGetResultsRequest {
	r.expand = &expand
	return r
}

func (r ApiInformationProtectionThreatAssessmentRequestsGetResultsRequest) Execute() (MicrosoftGraphThreatAssessmentResult, *_nethttp.Response, error) {
	return r.ApiService.InformationProtectionThreatAssessmentRequestsGetResultsExecute(r)
}

/*
InformationProtectionThreatAssessmentRequestsGetResults Get results from informationProtection

A collection of threat assessment results. Read-only. By default, a GET /threatAssessmentRequests/{id} does not return this property unless you apply $expand on it.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param threatAssessmentRequestId key: id of threatAssessmentRequest
 @param threatAssessmentResultId key: id of threatAssessmentResult
 @return ApiInformationProtectionThreatAssessmentRequestsGetResultsRequest
*/
func (a *InformationProtectionThreatAssessmentRequestApiService) InformationProtectionThreatAssessmentRequestsGetResults(ctx _context.Context, threatAssessmentRequestId string, threatAssessmentResultId string) ApiInformationProtectionThreatAssessmentRequestsGetResultsRequest {
	return ApiInformationProtectionThreatAssessmentRequestsGetResultsRequest{
		ApiService: a,
		ctx: ctx,
		threatAssessmentRequestId: threatAssessmentRequestId,
		threatAssessmentResultId: threatAssessmentResultId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphThreatAssessmentResult
func (a *InformationProtectionThreatAssessmentRequestApiService) InformationProtectionThreatAssessmentRequestsGetResultsExecute(r ApiInformationProtectionThreatAssessmentRequestsGetResultsRequest) (MicrosoftGraphThreatAssessmentResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphThreatAssessmentResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InformationProtectionThreatAssessmentRequestApiService.InformationProtectionThreatAssessmentRequestsGetResults")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/informationProtection/threatAssessmentRequests/{threatAssessmentRequest-id}/results/{threatAssessmentResult-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"threatAssessmentRequest-id"+"}", _neturl.PathEscape(parameterToString(r.threatAssessmentRequestId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"threatAssessmentResult-id"+"}", _neturl.PathEscape(parameterToString(r.threatAssessmentResultId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInformationProtectionThreatAssessmentRequestsListResultsRequest struct {
	ctx _context.Context
	ApiService *InformationProtectionThreatAssessmentRequestApiService
	threatAssessmentRequestId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiInformationProtectionThreatAssessmentRequestsListResultsRequest) Top(top int32) ApiInformationProtectionThreatAssessmentRequestsListResultsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiInformationProtectionThreatAssessmentRequestsListResultsRequest) Skip(skip int32) ApiInformationProtectionThreatAssessmentRequestsListResultsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiInformationProtectionThreatAssessmentRequestsListResultsRequest) Search(search string) ApiInformationProtectionThreatAssessmentRequestsListResultsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiInformationProtectionThreatAssessmentRequestsListResultsRequest) Filter(filter string) ApiInformationProtectionThreatAssessmentRequestsListResultsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiInformationProtectionThreatAssessmentRequestsListResultsRequest) Count(count bool) ApiInformationProtectionThreatAssessmentRequestsListResultsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiInformationProtectionThreatAssessmentRequestsListResultsRequest) Orderby(orderby []string) ApiInformationProtectionThreatAssessmentRequestsListResultsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiInformationProtectionThreatAssessmentRequestsListResultsRequest) Select_(select_ []string) ApiInformationProtectionThreatAssessmentRequestsListResultsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiInformationProtectionThreatAssessmentRequestsListResultsRequest) Expand(expand []string) ApiInformationProtectionThreatAssessmentRequestsListResultsRequest {
	r.expand = &expand
	return r
}

func (r ApiInformationProtectionThreatAssessmentRequestsListResultsRequest) Execute() (CollectionOfThreatAssessmentResult, *_nethttp.Response, error) {
	return r.ApiService.InformationProtectionThreatAssessmentRequestsListResultsExecute(r)
}

/*
InformationProtectionThreatAssessmentRequestsListResults Get results from informationProtection

A collection of threat assessment results. Read-only. By default, a GET /threatAssessmentRequests/{id} does not return this property unless you apply $expand on it.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param threatAssessmentRequestId key: id of threatAssessmentRequest
 @return ApiInformationProtectionThreatAssessmentRequestsListResultsRequest
*/
func (a *InformationProtectionThreatAssessmentRequestApiService) InformationProtectionThreatAssessmentRequestsListResults(ctx _context.Context, threatAssessmentRequestId string) ApiInformationProtectionThreatAssessmentRequestsListResultsRequest {
	return ApiInformationProtectionThreatAssessmentRequestsListResultsRequest{
		ApiService: a,
		ctx: ctx,
		threatAssessmentRequestId: threatAssessmentRequestId,
	}
}

// Execute executes the request
//  @return CollectionOfThreatAssessmentResult
func (a *InformationProtectionThreatAssessmentRequestApiService) InformationProtectionThreatAssessmentRequestsListResultsExecute(r ApiInformationProtectionThreatAssessmentRequestsListResultsRequest) (CollectionOfThreatAssessmentResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfThreatAssessmentResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InformationProtectionThreatAssessmentRequestApiService.InformationProtectionThreatAssessmentRequestsListResults")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/informationProtection/threatAssessmentRequests/{threatAssessmentRequest-id}/results"
	localVarPath = strings.Replace(localVarPath, "{"+"threatAssessmentRequest-id"+"}", _neturl.PathEscape(parameterToString(r.threatAssessmentRequestId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInformationProtectionThreatAssessmentRequestsUpdateResultsRequest struct {
	ctx _context.Context
	ApiService *InformationProtectionThreatAssessmentRequestApiService
	threatAssessmentRequestId string
	threatAssessmentResultId string
	microsoftGraphThreatAssessmentResult *MicrosoftGraphThreatAssessmentResult
}

// New navigation property values
func (r ApiInformationProtectionThreatAssessmentRequestsUpdateResultsRequest) MicrosoftGraphThreatAssessmentResult(microsoftGraphThreatAssessmentResult MicrosoftGraphThreatAssessmentResult) ApiInformationProtectionThreatAssessmentRequestsUpdateResultsRequest {
	r.microsoftGraphThreatAssessmentResult = &microsoftGraphThreatAssessmentResult
	return r
}

func (r ApiInformationProtectionThreatAssessmentRequestsUpdateResultsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.InformationProtectionThreatAssessmentRequestsUpdateResultsExecute(r)
}

/*
InformationProtectionThreatAssessmentRequestsUpdateResults Update the navigation property results in informationProtection

A collection of threat assessment results. Read-only. By default, a GET /threatAssessmentRequests/{id} does not return this property unless you apply $expand on it.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param threatAssessmentRequestId key: id of threatAssessmentRequest
 @param threatAssessmentResultId key: id of threatAssessmentResult
 @return ApiInformationProtectionThreatAssessmentRequestsUpdateResultsRequest
*/
func (a *InformationProtectionThreatAssessmentRequestApiService) InformationProtectionThreatAssessmentRequestsUpdateResults(ctx _context.Context, threatAssessmentRequestId string, threatAssessmentResultId string) ApiInformationProtectionThreatAssessmentRequestsUpdateResultsRequest {
	return ApiInformationProtectionThreatAssessmentRequestsUpdateResultsRequest{
		ApiService: a,
		ctx: ctx,
		threatAssessmentRequestId: threatAssessmentRequestId,
		threatAssessmentResultId: threatAssessmentResultId,
	}
}

// Execute executes the request
func (a *InformationProtectionThreatAssessmentRequestApiService) InformationProtectionThreatAssessmentRequestsUpdateResultsExecute(r ApiInformationProtectionThreatAssessmentRequestsUpdateResultsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InformationProtectionThreatAssessmentRequestApiService.InformationProtectionThreatAssessmentRequestsUpdateResults")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/informationProtection/threatAssessmentRequests/{threatAssessmentRequest-id}/results/{threatAssessmentResult-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"threatAssessmentRequest-id"+"}", _neturl.PathEscape(parameterToString(r.threatAssessmentRequestId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"threatAssessmentResult-id"+"}", _neturl.PathEscape(parameterToString(r.threatAssessmentResultId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphThreatAssessmentResult == nil {
		return nil, reportError("microsoftGraphThreatAssessmentResult is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphThreatAssessmentResult
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiInformationProtectionUpdateThreatAssessmentRequestsRequest struct {
	ctx _context.Context
	ApiService *InformationProtectionThreatAssessmentRequestApiService
	threatAssessmentRequestId string
	microsoftGraphThreatAssessmentRequest *MicrosoftGraphThreatAssessmentRequest
}

// New navigation property values
func (r ApiInformationProtectionUpdateThreatAssessmentRequestsRequest) MicrosoftGraphThreatAssessmentRequest(microsoftGraphThreatAssessmentRequest MicrosoftGraphThreatAssessmentRequest) ApiInformationProtectionUpdateThreatAssessmentRequestsRequest {
	r.microsoftGraphThreatAssessmentRequest = &microsoftGraphThreatAssessmentRequest
	return r
}

func (r ApiInformationProtectionUpdateThreatAssessmentRequestsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.InformationProtectionUpdateThreatAssessmentRequestsExecute(r)
}

/*
InformationProtectionUpdateThreatAssessmentRequests Update the navigation property threatAssessmentRequests in informationProtection

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param threatAssessmentRequestId key: id of threatAssessmentRequest
 @return ApiInformationProtectionUpdateThreatAssessmentRequestsRequest
*/
func (a *InformationProtectionThreatAssessmentRequestApiService) InformationProtectionUpdateThreatAssessmentRequests(ctx _context.Context, threatAssessmentRequestId string) ApiInformationProtectionUpdateThreatAssessmentRequestsRequest {
	return ApiInformationProtectionUpdateThreatAssessmentRequestsRequest{
		ApiService: a,
		ctx: ctx,
		threatAssessmentRequestId: threatAssessmentRequestId,
	}
}

// Execute executes the request
func (a *InformationProtectionThreatAssessmentRequestApiService) InformationProtectionUpdateThreatAssessmentRequestsExecute(r ApiInformationProtectionUpdateThreatAssessmentRequestsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InformationProtectionThreatAssessmentRequestApiService.InformationProtectionUpdateThreatAssessmentRequests")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/informationProtection/threatAssessmentRequests/{threatAssessmentRequest-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"threatAssessmentRequest-id"+"}", _neturl.PathEscape(parameterToString(r.threatAssessmentRequestId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphThreatAssessmentRequest == nil {
		return nil, reportError("microsoftGraphThreatAssessmentRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphThreatAssessmentRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
