/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphDeviceManagementSubscriptionState Tenant mobile device management subscription state.
type MicrosoftGraphDeviceManagementSubscriptionState string

// List of microsoft.graph.deviceManagementSubscriptionState
const (
	PENDING MicrosoftGraphDeviceManagementSubscriptionState = "pending"
	ACTIVE MicrosoftGraphDeviceManagementSubscriptionState = "active"
	WARNING MicrosoftGraphDeviceManagementSubscriptionState = "warning"
	DISABLED MicrosoftGraphDeviceManagementSubscriptionState = "disabled"
	DELETED MicrosoftGraphDeviceManagementSubscriptionState = "deleted"
	BLOCKED MicrosoftGraphDeviceManagementSubscriptionState = "blocked"
	LOCKED_OUT MicrosoftGraphDeviceManagementSubscriptionState = "lockedOut"
)

// All allowed values of MicrosoftGraphDeviceManagementSubscriptionState enum
var AllowedMicrosoftGraphDeviceManagementSubscriptionStateEnumValues = []MicrosoftGraphDeviceManagementSubscriptionState{
	"pending",
	"active",
	"warning",
	"disabled",
	"deleted",
	"blocked",
	"lockedOut",
}

func (v *MicrosoftGraphDeviceManagementSubscriptionState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphDeviceManagementSubscriptionState(value)
	for _, existing := range AllowedMicrosoftGraphDeviceManagementSubscriptionStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphDeviceManagementSubscriptionState", value)
}

// NewMicrosoftGraphDeviceManagementSubscriptionStateFromValue returns a pointer to a valid MicrosoftGraphDeviceManagementSubscriptionState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphDeviceManagementSubscriptionStateFromValue(v string) (*MicrosoftGraphDeviceManagementSubscriptionState, error) {
	ev := MicrosoftGraphDeviceManagementSubscriptionState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphDeviceManagementSubscriptionState: valid values are %v", v, AllowedMicrosoftGraphDeviceManagementSubscriptionStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphDeviceManagementSubscriptionState) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphDeviceManagementSubscriptionStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.deviceManagementSubscriptionState value
func (v MicrosoftGraphDeviceManagementSubscriptionState) Ptr() *MicrosoftGraphDeviceManagementSubscriptionState {
	return &v
}

type NullableMicrosoftGraphDeviceManagementSubscriptionState struct {
	value *MicrosoftGraphDeviceManagementSubscriptionState
	isSet bool
}

func (v NullableMicrosoftGraphDeviceManagementSubscriptionState) Get() *MicrosoftGraphDeviceManagementSubscriptionState {
	return v.value
}

func (v *NullableMicrosoftGraphDeviceManagementSubscriptionState) Set(val *MicrosoftGraphDeviceManagementSubscriptionState) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphDeviceManagementSubscriptionState) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphDeviceManagementSubscriptionState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphDeviceManagementSubscriptionState(val *MicrosoftGraphDeviceManagementSubscriptionState) *NullableMicrosoftGraphDeviceManagementSubscriptionState {
	return &NullableMicrosoftGraphDeviceManagementSubscriptionState{value: val, isSet: true}
}

func (v NullableMicrosoftGraphDeviceManagementSubscriptionState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphDeviceManagementSubscriptionState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

