/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// DeviceAppManagementActionsApiService DeviceAppManagementActionsApi service
type DeviceAppManagementActionsApiService service

type ApiDeviceAppManagementManagedAppPoliciesManagedAppPolicyMicrosoftGraphManagedAppProtectionTargetAppsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementActionsApiService
	managedAppPolicyId string
	inlineObject56 *InlineObject56
}

func (r ApiDeviceAppManagementManagedAppPoliciesManagedAppPolicyMicrosoftGraphManagedAppProtectionTargetAppsRequest) InlineObject56(inlineObject56 InlineObject56) ApiDeviceAppManagementManagedAppPoliciesManagedAppPolicyMicrosoftGraphManagedAppProtectionTargetAppsRequest {
	r.inlineObject56 = &inlineObject56
	return r
}

func (r ApiDeviceAppManagementManagedAppPoliciesManagedAppPolicyMicrosoftGraphManagedAppProtectionTargetAppsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementManagedAppPoliciesManagedAppPolicyMicrosoftGraphManagedAppProtectionTargetAppsExecute(r)
}

/*
DeviceAppManagementManagedAppPoliciesManagedAppPolicyMicrosoftGraphManagedAppProtectionTargetApps Invoke action targetApps

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedAppPolicyId key: id of managedAppPolicy
 @return ApiDeviceAppManagementManagedAppPoliciesManagedAppPolicyMicrosoftGraphManagedAppProtectionTargetAppsRequest
*/
func (a *DeviceAppManagementActionsApiService) DeviceAppManagementManagedAppPoliciesManagedAppPolicyMicrosoftGraphManagedAppProtectionTargetApps(ctx _context.Context, managedAppPolicyId string) ApiDeviceAppManagementManagedAppPoliciesManagedAppPolicyMicrosoftGraphManagedAppProtectionTargetAppsRequest {
	return ApiDeviceAppManagementManagedAppPoliciesManagedAppPolicyMicrosoftGraphManagedAppProtectionTargetAppsRequest{
		ApiService: a,
		ctx: ctx,
		managedAppPolicyId: managedAppPolicyId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementActionsApiService) DeviceAppManagementManagedAppPoliciesManagedAppPolicyMicrosoftGraphManagedAppProtectionTargetAppsExecute(r ApiDeviceAppManagementManagedAppPoliciesManagedAppPolicyMicrosoftGraphManagedAppProtectionTargetAppsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementActionsApiService.DeviceAppManagementManagedAppPoliciesManagedAppPolicyMicrosoftGraphManagedAppProtectionTargetApps")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/managedAppPolicies/{managedAppPolicy-id}/microsoft.graph.managedAppProtection/microsoft.graph.targetApps"
	localVarPath = strings.Replace(localVarPath, "{"+"managedAppPolicy-id"+"}", _neturl.PathEscape(parameterToString(r.managedAppPolicyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject56 == nil {
		return nil, reportError("inlineObject56 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject56
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementManagedAppPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionAssignRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementActionsApiService
	managedAppPolicyId string
	inlineObject58 *InlineObject58
}

func (r ApiDeviceAppManagementManagedAppPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionAssignRequest) InlineObject58(inlineObject58 InlineObject58) ApiDeviceAppManagementManagedAppPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionAssignRequest {
	r.inlineObject58 = &inlineObject58
	return r
}

func (r ApiDeviceAppManagementManagedAppPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionAssignRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementManagedAppPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionAssignExecute(r)
}

/*
DeviceAppManagementManagedAppPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionAssign Invoke action assign

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedAppPolicyId key: id of managedAppPolicy
 @return ApiDeviceAppManagementManagedAppPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionAssignRequest
*/
func (a *DeviceAppManagementActionsApiService) DeviceAppManagementManagedAppPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionAssign(ctx _context.Context, managedAppPolicyId string) ApiDeviceAppManagementManagedAppPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionAssignRequest {
	return ApiDeviceAppManagementManagedAppPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionAssignRequest{
		ApiService: a,
		ctx: ctx,
		managedAppPolicyId: managedAppPolicyId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementActionsApiService) DeviceAppManagementManagedAppPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionAssignExecute(r ApiDeviceAppManagementManagedAppPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionAssignRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementActionsApiService.DeviceAppManagementManagedAppPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionAssign")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/managedAppPolicies/{managedAppPolicy-id}/microsoft.graph.targetedManagedAppProtection/microsoft.graph.assign"
	localVarPath = strings.Replace(localVarPath, "{"+"managedAppPolicy-id"+"}", _neturl.PathEscape(parameterToString(r.managedAppPolicyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject58 == nil {
		return nil, reportError("inlineObject58 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject58
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementManagedAppPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionTargetAppsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementActionsApiService
	managedAppPolicyId string
	inlineObject59 *InlineObject59
}

func (r ApiDeviceAppManagementManagedAppPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionTargetAppsRequest) InlineObject59(inlineObject59 InlineObject59) ApiDeviceAppManagementManagedAppPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionTargetAppsRequest {
	r.inlineObject59 = &inlineObject59
	return r
}

func (r ApiDeviceAppManagementManagedAppPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionTargetAppsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementManagedAppPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionTargetAppsExecute(r)
}

/*
DeviceAppManagementManagedAppPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionTargetApps Invoke action targetApps

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedAppPolicyId key: id of managedAppPolicy
 @return ApiDeviceAppManagementManagedAppPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionTargetAppsRequest
*/
func (a *DeviceAppManagementActionsApiService) DeviceAppManagementManagedAppPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionTargetApps(ctx _context.Context, managedAppPolicyId string) ApiDeviceAppManagementManagedAppPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionTargetAppsRequest {
	return ApiDeviceAppManagementManagedAppPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionTargetAppsRequest{
		ApiService: a,
		ctx: ctx,
		managedAppPolicyId: managedAppPolicyId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementActionsApiService) DeviceAppManagementManagedAppPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionTargetAppsExecute(r ApiDeviceAppManagementManagedAppPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionTargetAppsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementActionsApiService.DeviceAppManagementManagedAppPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionTargetApps")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/managedAppPolicies/{managedAppPolicy-id}/microsoft.graph.targetedManagedAppProtection/microsoft.graph.targetApps"
	localVarPath = strings.Replace(localVarPath, "{"+"managedAppPolicy-id"+"}", _neturl.PathEscape(parameterToString(r.managedAppPolicyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject59 == nil {
		return nil, reportError("inlineObject59 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject59
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementManagedAppPoliciesManagedAppPolicyMicrosoftGraphWindowsInformationProtectionAssignRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementActionsApiService
	managedAppPolicyId string
	inlineObject60 *InlineObject60
}

func (r ApiDeviceAppManagementManagedAppPoliciesManagedAppPolicyMicrosoftGraphWindowsInformationProtectionAssignRequest) InlineObject60(inlineObject60 InlineObject60) ApiDeviceAppManagementManagedAppPoliciesManagedAppPolicyMicrosoftGraphWindowsInformationProtectionAssignRequest {
	r.inlineObject60 = &inlineObject60
	return r
}

func (r ApiDeviceAppManagementManagedAppPoliciesManagedAppPolicyMicrosoftGraphWindowsInformationProtectionAssignRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementManagedAppPoliciesManagedAppPolicyMicrosoftGraphWindowsInformationProtectionAssignExecute(r)
}

/*
DeviceAppManagementManagedAppPoliciesManagedAppPolicyMicrosoftGraphWindowsInformationProtectionAssign Invoke action assign

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedAppPolicyId key: id of managedAppPolicy
 @return ApiDeviceAppManagementManagedAppPoliciesManagedAppPolicyMicrosoftGraphWindowsInformationProtectionAssignRequest
*/
func (a *DeviceAppManagementActionsApiService) DeviceAppManagementManagedAppPoliciesManagedAppPolicyMicrosoftGraphWindowsInformationProtectionAssign(ctx _context.Context, managedAppPolicyId string) ApiDeviceAppManagementManagedAppPoliciesManagedAppPolicyMicrosoftGraphWindowsInformationProtectionAssignRequest {
	return ApiDeviceAppManagementManagedAppPoliciesManagedAppPolicyMicrosoftGraphWindowsInformationProtectionAssignRequest{
		ApiService: a,
		ctx: ctx,
		managedAppPolicyId: managedAppPolicyId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementActionsApiService) DeviceAppManagementManagedAppPoliciesManagedAppPolicyMicrosoftGraphWindowsInformationProtectionAssignExecute(r ApiDeviceAppManagementManagedAppPoliciesManagedAppPolicyMicrosoftGraphWindowsInformationProtectionAssignRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementActionsApiService.DeviceAppManagementManagedAppPoliciesManagedAppPolicyMicrosoftGraphWindowsInformationProtectionAssign")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/managedAppPolicies/{managedAppPolicy-id}/microsoft.graph.windowsInformationProtection/microsoft.graph.assign"
	localVarPath = strings.Replace(localVarPath, "{"+"managedAppPolicy-id"+"}", _neturl.PathEscape(parameterToString(r.managedAppPolicyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject60 == nil {
		return nil, reportError("inlineObject60 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject60
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementManagedAppPoliciesManagedAppPolicyTargetAppsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementActionsApiService
	managedAppPolicyId string
	inlineObject57 *InlineObject57
}

func (r ApiDeviceAppManagementManagedAppPoliciesManagedAppPolicyTargetAppsRequest) InlineObject57(inlineObject57 InlineObject57) ApiDeviceAppManagementManagedAppPoliciesManagedAppPolicyTargetAppsRequest {
	r.inlineObject57 = &inlineObject57
	return r
}

func (r ApiDeviceAppManagementManagedAppPoliciesManagedAppPolicyTargetAppsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementManagedAppPoliciesManagedAppPolicyTargetAppsExecute(r)
}

/*
DeviceAppManagementManagedAppPoliciesManagedAppPolicyTargetApps Invoke action targetApps

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedAppPolicyId key: id of managedAppPolicy
 @return ApiDeviceAppManagementManagedAppPoliciesManagedAppPolicyTargetAppsRequest
*/
func (a *DeviceAppManagementActionsApiService) DeviceAppManagementManagedAppPoliciesManagedAppPolicyTargetApps(ctx _context.Context, managedAppPolicyId string) ApiDeviceAppManagementManagedAppPoliciesManagedAppPolicyTargetAppsRequest {
	return ApiDeviceAppManagementManagedAppPoliciesManagedAppPolicyTargetAppsRequest{
		ApiService: a,
		ctx: ctx,
		managedAppPolicyId: managedAppPolicyId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementActionsApiService) DeviceAppManagementManagedAppPoliciesManagedAppPolicyTargetAppsExecute(r ApiDeviceAppManagementManagedAppPoliciesManagedAppPolicyTargetAppsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementActionsApiService.DeviceAppManagementManagedAppPoliciesManagedAppPolicyTargetApps")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/managedAppPolicies/{managedAppPolicy-id}/microsoft.graph.targetApps"
	localVarPath = strings.Replace(localVarPath, "{"+"managedAppPolicy-id"+"}", _neturl.PathEscape(parameterToString(r.managedAppPolicyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject57 == nil {
		return nil, reportError("inlineObject57 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject57
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyMicrosoftGraphManagedAppProtectionTargetAppsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementActionsApiService
	managedAppRegistrationId string
	managedAppPolicyId string
	inlineObject61 *InlineObject61
}

func (r ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyMicrosoftGraphManagedAppProtectionTargetAppsRequest) InlineObject61(inlineObject61 InlineObject61) ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyMicrosoftGraphManagedAppProtectionTargetAppsRequest {
	r.inlineObject61 = &inlineObject61
	return r
}

func (r ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyMicrosoftGraphManagedAppProtectionTargetAppsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyMicrosoftGraphManagedAppProtectionTargetAppsExecute(r)
}

/*
DeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyMicrosoftGraphManagedAppProtectionTargetApps Invoke action targetApps

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedAppRegistrationId key: id of managedAppRegistration
 @param managedAppPolicyId key: id of managedAppPolicy
 @return ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyMicrosoftGraphManagedAppProtectionTargetAppsRequest
*/
func (a *DeviceAppManagementActionsApiService) DeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyMicrosoftGraphManagedAppProtectionTargetApps(ctx _context.Context, managedAppRegistrationId string, managedAppPolicyId string) ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyMicrosoftGraphManagedAppProtectionTargetAppsRequest {
	return ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyMicrosoftGraphManagedAppProtectionTargetAppsRequest{
		ApiService: a,
		ctx: ctx,
		managedAppRegistrationId: managedAppRegistrationId,
		managedAppPolicyId: managedAppPolicyId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementActionsApiService) DeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyMicrosoftGraphManagedAppProtectionTargetAppsExecute(r ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyMicrosoftGraphManagedAppProtectionTargetAppsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementActionsApiService.DeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyMicrosoftGraphManagedAppProtectionTargetApps")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/managedAppRegistrations/{managedAppRegistration-id}/appliedPolicies/{managedAppPolicy-id}/microsoft.graph.managedAppProtection/microsoft.graph.targetApps"
	localVarPath = strings.Replace(localVarPath, "{"+"managedAppRegistration-id"+"}", _neturl.PathEscape(parameterToString(r.managedAppRegistrationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"managedAppPolicy-id"+"}", _neturl.PathEscape(parameterToString(r.managedAppPolicyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject61 == nil {
		return nil, reportError("inlineObject61 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject61
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionAssignRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementActionsApiService
	managedAppRegistrationId string
	managedAppPolicyId string
	inlineObject63 *InlineObject63
}

func (r ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionAssignRequest) InlineObject63(inlineObject63 InlineObject63) ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionAssignRequest {
	r.inlineObject63 = &inlineObject63
	return r
}

func (r ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionAssignRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionAssignExecute(r)
}

/*
DeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionAssign Invoke action assign

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedAppRegistrationId key: id of managedAppRegistration
 @param managedAppPolicyId key: id of managedAppPolicy
 @return ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionAssignRequest
*/
func (a *DeviceAppManagementActionsApiService) DeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionAssign(ctx _context.Context, managedAppRegistrationId string, managedAppPolicyId string) ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionAssignRequest {
	return ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionAssignRequest{
		ApiService: a,
		ctx: ctx,
		managedAppRegistrationId: managedAppRegistrationId,
		managedAppPolicyId: managedAppPolicyId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementActionsApiService) DeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionAssignExecute(r ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionAssignRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementActionsApiService.DeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionAssign")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/managedAppRegistrations/{managedAppRegistration-id}/appliedPolicies/{managedAppPolicy-id}/microsoft.graph.targetedManagedAppProtection/microsoft.graph.assign"
	localVarPath = strings.Replace(localVarPath, "{"+"managedAppRegistration-id"+"}", _neturl.PathEscape(parameterToString(r.managedAppRegistrationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"managedAppPolicy-id"+"}", _neturl.PathEscape(parameterToString(r.managedAppPolicyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject63 == nil {
		return nil, reportError("inlineObject63 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject63
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionTargetAppsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementActionsApiService
	managedAppRegistrationId string
	managedAppPolicyId string
	inlineObject64 *InlineObject64
}

func (r ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionTargetAppsRequest) InlineObject64(inlineObject64 InlineObject64) ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionTargetAppsRequest {
	r.inlineObject64 = &inlineObject64
	return r
}

func (r ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionTargetAppsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionTargetAppsExecute(r)
}

/*
DeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionTargetApps Invoke action targetApps

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedAppRegistrationId key: id of managedAppRegistration
 @param managedAppPolicyId key: id of managedAppPolicy
 @return ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionTargetAppsRequest
*/
func (a *DeviceAppManagementActionsApiService) DeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionTargetApps(ctx _context.Context, managedAppRegistrationId string, managedAppPolicyId string) ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionTargetAppsRequest {
	return ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionTargetAppsRequest{
		ApiService: a,
		ctx: ctx,
		managedAppRegistrationId: managedAppRegistrationId,
		managedAppPolicyId: managedAppPolicyId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementActionsApiService) DeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionTargetAppsExecute(r ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionTargetAppsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementActionsApiService.DeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionTargetApps")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/managedAppRegistrations/{managedAppRegistration-id}/appliedPolicies/{managedAppPolicy-id}/microsoft.graph.targetedManagedAppProtection/microsoft.graph.targetApps"
	localVarPath = strings.Replace(localVarPath, "{"+"managedAppRegistration-id"+"}", _neturl.PathEscape(parameterToString(r.managedAppRegistrationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"managedAppPolicy-id"+"}", _neturl.PathEscape(parameterToString(r.managedAppPolicyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject64 == nil {
		return nil, reportError("inlineObject64 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject64
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyMicrosoftGraphWindowsInformationProtectionAssignRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementActionsApiService
	managedAppRegistrationId string
	managedAppPolicyId string
	inlineObject65 *InlineObject65
}

func (r ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyMicrosoftGraphWindowsInformationProtectionAssignRequest) InlineObject65(inlineObject65 InlineObject65) ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyMicrosoftGraphWindowsInformationProtectionAssignRequest {
	r.inlineObject65 = &inlineObject65
	return r
}

func (r ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyMicrosoftGraphWindowsInformationProtectionAssignRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyMicrosoftGraphWindowsInformationProtectionAssignExecute(r)
}

/*
DeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyMicrosoftGraphWindowsInformationProtectionAssign Invoke action assign

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedAppRegistrationId key: id of managedAppRegistration
 @param managedAppPolicyId key: id of managedAppPolicy
 @return ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyMicrosoftGraphWindowsInformationProtectionAssignRequest
*/
func (a *DeviceAppManagementActionsApiService) DeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyMicrosoftGraphWindowsInformationProtectionAssign(ctx _context.Context, managedAppRegistrationId string, managedAppPolicyId string) ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyMicrosoftGraphWindowsInformationProtectionAssignRequest {
	return ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyMicrosoftGraphWindowsInformationProtectionAssignRequest{
		ApiService: a,
		ctx: ctx,
		managedAppRegistrationId: managedAppRegistrationId,
		managedAppPolicyId: managedAppPolicyId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementActionsApiService) DeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyMicrosoftGraphWindowsInformationProtectionAssignExecute(r ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyMicrosoftGraphWindowsInformationProtectionAssignRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementActionsApiService.DeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyMicrosoftGraphWindowsInformationProtectionAssign")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/managedAppRegistrations/{managedAppRegistration-id}/appliedPolicies/{managedAppPolicy-id}/microsoft.graph.windowsInformationProtection/microsoft.graph.assign"
	localVarPath = strings.Replace(localVarPath, "{"+"managedAppRegistration-id"+"}", _neturl.PathEscape(parameterToString(r.managedAppRegistrationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"managedAppPolicy-id"+"}", _neturl.PathEscape(parameterToString(r.managedAppPolicyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject65 == nil {
		return nil, reportError("inlineObject65 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject65
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyTargetAppsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementActionsApiService
	managedAppRegistrationId string
	managedAppPolicyId string
	inlineObject62 *InlineObject62
}

func (r ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyTargetAppsRequest) InlineObject62(inlineObject62 InlineObject62) ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyTargetAppsRequest {
	r.inlineObject62 = &inlineObject62
	return r
}

func (r ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyTargetAppsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyTargetAppsExecute(r)
}

/*
DeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyTargetApps Invoke action targetApps

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedAppRegistrationId key: id of managedAppRegistration
 @param managedAppPolicyId key: id of managedAppPolicy
 @return ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyTargetAppsRequest
*/
func (a *DeviceAppManagementActionsApiService) DeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyTargetApps(ctx _context.Context, managedAppRegistrationId string, managedAppPolicyId string) ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyTargetAppsRequest {
	return ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyTargetAppsRequest{
		ApiService: a,
		ctx: ctx,
		managedAppRegistrationId: managedAppRegistrationId,
		managedAppPolicyId: managedAppPolicyId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementActionsApiService) DeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyTargetAppsExecute(r ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyTargetAppsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementActionsApiService.DeviceAppManagementManagedAppRegistrationsManagedAppRegistrationAppliedPoliciesManagedAppPolicyTargetApps")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/managedAppRegistrations/{managedAppRegistration-id}/appliedPolicies/{managedAppPolicy-id}/microsoft.graph.targetApps"
	localVarPath = strings.Replace(localVarPath, "{"+"managedAppRegistration-id"+"}", _neturl.PathEscape(parameterToString(r.managedAppRegistrationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"managedAppPolicy-id"+"}", _neturl.PathEscape(parameterToString(r.managedAppPolicyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject62 == nil {
		return nil, reportError("inlineObject62 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject62
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyMicrosoftGraphManagedAppProtectionTargetAppsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementActionsApiService
	managedAppRegistrationId string
	managedAppPolicyId string
	inlineObject66 *InlineObject66
}

func (r ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyMicrosoftGraphManagedAppProtectionTargetAppsRequest) InlineObject66(inlineObject66 InlineObject66) ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyMicrosoftGraphManagedAppProtectionTargetAppsRequest {
	r.inlineObject66 = &inlineObject66
	return r
}

func (r ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyMicrosoftGraphManagedAppProtectionTargetAppsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyMicrosoftGraphManagedAppProtectionTargetAppsExecute(r)
}

/*
DeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyMicrosoftGraphManagedAppProtectionTargetApps Invoke action targetApps

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedAppRegistrationId key: id of managedAppRegistration
 @param managedAppPolicyId key: id of managedAppPolicy
 @return ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyMicrosoftGraphManagedAppProtectionTargetAppsRequest
*/
func (a *DeviceAppManagementActionsApiService) DeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyMicrosoftGraphManagedAppProtectionTargetApps(ctx _context.Context, managedAppRegistrationId string, managedAppPolicyId string) ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyMicrosoftGraphManagedAppProtectionTargetAppsRequest {
	return ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyMicrosoftGraphManagedAppProtectionTargetAppsRequest{
		ApiService: a,
		ctx: ctx,
		managedAppRegistrationId: managedAppRegistrationId,
		managedAppPolicyId: managedAppPolicyId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementActionsApiService) DeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyMicrosoftGraphManagedAppProtectionTargetAppsExecute(r ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyMicrosoftGraphManagedAppProtectionTargetAppsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementActionsApiService.DeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyMicrosoftGraphManagedAppProtectionTargetApps")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/managedAppRegistrations/{managedAppRegistration-id}/intendedPolicies/{managedAppPolicy-id}/microsoft.graph.managedAppProtection/microsoft.graph.targetApps"
	localVarPath = strings.Replace(localVarPath, "{"+"managedAppRegistration-id"+"}", _neturl.PathEscape(parameterToString(r.managedAppRegistrationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"managedAppPolicy-id"+"}", _neturl.PathEscape(parameterToString(r.managedAppPolicyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject66 == nil {
		return nil, reportError("inlineObject66 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject66
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionAssignRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementActionsApiService
	managedAppRegistrationId string
	managedAppPolicyId string
	inlineObject68 *InlineObject68
}

func (r ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionAssignRequest) InlineObject68(inlineObject68 InlineObject68) ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionAssignRequest {
	r.inlineObject68 = &inlineObject68
	return r
}

func (r ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionAssignRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionAssignExecute(r)
}

/*
DeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionAssign Invoke action assign

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedAppRegistrationId key: id of managedAppRegistration
 @param managedAppPolicyId key: id of managedAppPolicy
 @return ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionAssignRequest
*/
func (a *DeviceAppManagementActionsApiService) DeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionAssign(ctx _context.Context, managedAppRegistrationId string, managedAppPolicyId string) ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionAssignRequest {
	return ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionAssignRequest{
		ApiService: a,
		ctx: ctx,
		managedAppRegistrationId: managedAppRegistrationId,
		managedAppPolicyId: managedAppPolicyId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementActionsApiService) DeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionAssignExecute(r ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionAssignRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementActionsApiService.DeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionAssign")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/managedAppRegistrations/{managedAppRegistration-id}/intendedPolicies/{managedAppPolicy-id}/microsoft.graph.targetedManagedAppProtection/microsoft.graph.assign"
	localVarPath = strings.Replace(localVarPath, "{"+"managedAppRegistration-id"+"}", _neturl.PathEscape(parameterToString(r.managedAppRegistrationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"managedAppPolicy-id"+"}", _neturl.PathEscape(parameterToString(r.managedAppPolicyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject68 == nil {
		return nil, reportError("inlineObject68 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject68
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionTargetAppsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementActionsApiService
	managedAppRegistrationId string
	managedAppPolicyId string
	inlineObject69 *InlineObject69
}

func (r ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionTargetAppsRequest) InlineObject69(inlineObject69 InlineObject69) ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionTargetAppsRequest {
	r.inlineObject69 = &inlineObject69
	return r
}

func (r ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionTargetAppsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionTargetAppsExecute(r)
}

/*
DeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionTargetApps Invoke action targetApps

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedAppRegistrationId key: id of managedAppRegistration
 @param managedAppPolicyId key: id of managedAppPolicy
 @return ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionTargetAppsRequest
*/
func (a *DeviceAppManagementActionsApiService) DeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionTargetApps(ctx _context.Context, managedAppRegistrationId string, managedAppPolicyId string) ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionTargetAppsRequest {
	return ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionTargetAppsRequest{
		ApiService: a,
		ctx: ctx,
		managedAppRegistrationId: managedAppRegistrationId,
		managedAppPolicyId: managedAppPolicyId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementActionsApiService) DeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionTargetAppsExecute(r ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionTargetAppsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementActionsApiService.DeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyMicrosoftGraphTargetedManagedAppProtectionTargetApps")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/managedAppRegistrations/{managedAppRegistration-id}/intendedPolicies/{managedAppPolicy-id}/microsoft.graph.targetedManagedAppProtection/microsoft.graph.targetApps"
	localVarPath = strings.Replace(localVarPath, "{"+"managedAppRegistration-id"+"}", _neturl.PathEscape(parameterToString(r.managedAppRegistrationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"managedAppPolicy-id"+"}", _neturl.PathEscape(parameterToString(r.managedAppPolicyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject69 == nil {
		return nil, reportError("inlineObject69 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject69
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyMicrosoftGraphWindowsInformationProtectionAssignRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementActionsApiService
	managedAppRegistrationId string
	managedAppPolicyId string
	inlineObject70 *InlineObject70
}

func (r ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyMicrosoftGraphWindowsInformationProtectionAssignRequest) InlineObject70(inlineObject70 InlineObject70) ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyMicrosoftGraphWindowsInformationProtectionAssignRequest {
	r.inlineObject70 = &inlineObject70
	return r
}

func (r ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyMicrosoftGraphWindowsInformationProtectionAssignRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyMicrosoftGraphWindowsInformationProtectionAssignExecute(r)
}

/*
DeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyMicrosoftGraphWindowsInformationProtectionAssign Invoke action assign

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedAppRegistrationId key: id of managedAppRegistration
 @param managedAppPolicyId key: id of managedAppPolicy
 @return ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyMicrosoftGraphWindowsInformationProtectionAssignRequest
*/
func (a *DeviceAppManagementActionsApiService) DeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyMicrosoftGraphWindowsInformationProtectionAssign(ctx _context.Context, managedAppRegistrationId string, managedAppPolicyId string) ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyMicrosoftGraphWindowsInformationProtectionAssignRequest {
	return ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyMicrosoftGraphWindowsInformationProtectionAssignRequest{
		ApiService: a,
		ctx: ctx,
		managedAppRegistrationId: managedAppRegistrationId,
		managedAppPolicyId: managedAppPolicyId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementActionsApiService) DeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyMicrosoftGraphWindowsInformationProtectionAssignExecute(r ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyMicrosoftGraphWindowsInformationProtectionAssignRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementActionsApiService.DeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyMicrosoftGraphWindowsInformationProtectionAssign")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/managedAppRegistrations/{managedAppRegistration-id}/intendedPolicies/{managedAppPolicy-id}/microsoft.graph.windowsInformationProtection/microsoft.graph.assign"
	localVarPath = strings.Replace(localVarPath, "{"+"managedAppRegistration-id"+"}", _neturl.PathEscape(parameterToString(r.managedAppRegistrationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"managedAppPolicy-id"+"}", _neturl.PathEscape(parameterToString(r.managedAppPolicyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject70 == nil {
		return nil, reportError("inlineObject70 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject70
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyTargetAppsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementActionsApiService
	managedAppRegistrationId string
	managedAppPolicyId string
	inlineObject67 *InlineObject67
}

func (r ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyTargetAppsRequest) InlineObject67(inlineObject67 InlineObject67) ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyTargetAppsRequest {
	r.inlineObject67 = &inlineObject67
	return r
}

func (r ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyTargetAppsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyTargetAppsExecute(r)
}

/*
DeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyTargetApps Invoke action targetApps

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedAppRegistrationId key: id of managedAppRegistration
 @param managedAppPolicyId key: id of managedAppPolicy
 @return ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyTargetAppsRequest
*/
func (a *DeviceAppManagementActionsApiService) DeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyTargetApps(ctx _context.Context, managedAppRegistrationId string, managedAppPolicyId string) ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyTargetAppsRequest {
	return ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyTargetAppsRequest{
		ApiService: a,
		ctx: ctx,
		managedAppRegistrationId: managedAppRegistrationId,
		managedAppPolicyId: managedAppPolicyId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementActionsApiService) DeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyTargetAppsExecute(r ApiDeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyTargetAppsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementActionsApiService.DeviceAppManagementManagedAppRegistrationsManagedAppRegistrationIntendedPoliciesManagedAppPolicyTargetApps")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/managedAppRegistrations/{managedAppRegistration-id}/intendedPolicies/{managedAppPolicy-id}/microsoft.graph.targetApps"
	localVarPath = strings.Replace(localVarPath, "{"+"managedAppRegistration-id"+"}", _neturl.PathEscape(parameterToString(r.managedAppRegistrationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"managedAppPolicy-id"+"}", _neturl.PathEscape(parameterToString(r.managedAppPolicyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject67 == nil {
		return nil, reportError("inlineObject67 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject67
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementManagedEBooksManagedEBookAssignRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementActionsApiService
	managedEBookId string
	inlineObject71 *InlineObject71
}

func (r ApiDeviceAppManagementManagedEBooksManagedEBookAssignRequest) InlineObject71(inlineObject71 InlineObject71) ApiDeviceAppManagementManagedEBooksManagedEBookAssignRequest {
	r.inlineObject71 = &inlineObject71
	return r
}

func (r ApiDeviceAppManagementManagedEBooksManagedEBookAssignRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementManagedEBooksManagedEBookAssignExecute(r)
}

/*
DeviceAppManagementManagedEBooksManagedEBookAssign Invoke action assign

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedEBookId key: id of managedEBook
 @return ApiDeviceAppManagementManagedEBooksManagedEBookAssignRequest
*/
func (a *DeviceAppManagementActionsApiService) DeviceAppManagementManagedEBooksManagedEBookAssign(ctx _context.Context, managedEBookId string) ApiDeviceAppManagementManagedEBooksManagedEBookAssignRequest {
	return ApiDeviceAppManagementManagedEBooksManagedEBookAssignRequest{
		ApiService: a,
		ctx: ctx,
		managedEBookId: managedEBookId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementActionsApiService) DeviceAppManagementManagedEBooksManagedEBookAssignExecute(r ApiDeviceAppManagementManagedEBooksManagedEBookAssignRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementActionsApiService.DeviceAppManagementManagedEBooksManagedEBookAssign")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/managedEBooks/{managedEBook-id}/microsoft.graph.assign"
	localVarPath = strings.Replace(localVarPath, "{"+"managedEBook-id"+"}", _neturl.PathEscape(parameterToString(r.managedEBookId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject71 == nil {
		return nil, reportError("inlineObject71 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject71
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementMobileAppConfigurationsManagedDeviceMobileAppConfigurationAssignRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementActionsApiService
	managedDeviceMobileAppConfigurationId string
	inlineObject72 *InlineObject72
}

func (r ApiDeviceAppManagementMobileAppConfigurationsManagedDeviceMobileAppConfigurationAssignRequest) InlineObject72(inlineObject72 InlineObject72) ApiDeviceAppManagementMobileAppConfigurationsManagedDeviceMobileAppConfigurationAssignRequest {
	r.inlineObject72 = &inlineObject72
	return r
}

func (r ApiDeviceAppManagementMobileAppConfigurationsManagedDeviceMobileAppConfigurationAssignRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementMobileAppConfigurationsManagedDeviceMobileAppConfigurationAssignExecute(r)
}

/*
DeviceAppManagementMobileAppConfigurationsManagedDeviceMobileAppConfigurationAssign Invoke action assign

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceMobileAppConfigurationId key: id of managedDeviceMobileAppConfiguration
 @return ApiDeviceAppManagementMobileAppConfigurationsManagedDeviceMobileAppConfigurationAssignRequest
*/
func (a *DeviceAppManagementActionsApiService) DeviceAppManagementMobileAppConfigurationsManagedDeviceMobileAppConfigurationAssign(ctx _context.Context, managedDeviceMobileAppConfigurationId string) ApiDeviceAppManagementMobileAppConfigurationsManagedDeviceMobileAppConfigurationAssignRequest {
	return ApiDeviceAppManagementMobileAppConfigurationsManagedDeviceMobileAppConfigurationAssignRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceMobileAppConfigurationId: managedDeviceMobileAppConfigurationId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementActionsApiService) DeviceAppManagementMobileAppConfigurationsManagedDeviceMobileAppConfigurationAssignExecute(r ApiDeviceAppManagementMobileAppConfigurationsManagedDeviceMobileAppConfigurationAssignRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementActionsApiService.DeviceAppManagementMobileAppConfigurationsManagedDeviceMobileAppConfigurationAssign")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/mobileAppConfigurations/{managedDeviceMobileAppConfiguration-id}/microsoft.graph.assign"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDeviceMobileAppConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceMobileAppConfigurationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject72 == nil {
		return nil, reportError("inlineObject72 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject72
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementMobileAppsMobileAppAssignRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementActionsApiService
	mobileAppId string
	inlineObject73 *InlineObject73
}

func (r ApiDeviceAppManagementMobileAppsMobileAppAssignRequest) InlineObject73(inlineObject73 InlineObject73) ApiDeviceAppManagementMobileAppsMobileAppAssignRequest {
	r.inlineObject73 = &inlineObject73
	return r
}

func (r ApiDeviceAppManagementMobileAppsMobileAppAssignRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementMobileAppsMobileAppAssignExecute(r)
}

/*
DeviceAppManagementMobileAppsMobileAppAssign Invoke action assign

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param mobileAppId key: id of mobileApp
 @return ApiDeviceAppManagementMobileAppsMobileAppAssignRequest
*/
func (a *DeviceAppManagementActionsApiService) DeviceAppManagementMobileAppsMobileAppAssign(ctx _context.Context, mobileAppId string) ApiDeviceAppManagementMobileAppsMobileAppAssignRequest {
	return ApiDeviceAppManagementMobileAppsMobileAppAssignRequest{
		ApiService: a,
		ctx: ctx,
		mobileAppId: mobileAppId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementActionsApiService) DeviceAppManagementMobileAppsMobileAppAssignExecute(r ApiDeviceAppManagementMobileAppsMobileAppAssignRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementActionsApiService.DeviceAppManagementMobileAppsMobileAppAssign")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/mobileApps/{mobileApp-id}/microsoft.graph.assign"
	localVarPath = strings.Replace(localVarPath, "{"+"mobileApp-id"+"}", _neturl.PathEscape(parameterToString(r.mobileAppId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject73 == nil {
		return nil, reportError("inlineObject73 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject73
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementSyncMicrosoftStoreForBusinessAppsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementActionsApiService
}


func (r ApiDeviceAppManagementSyncMicrosoftStoreForBusinessAppsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementSyncMicrosoftStoreForBusinessAppsExecute(r)
}

/*
DeviceAppManagementSyncMicrosoftStoreForBusinessApps Invoke action syncMicrosoftStoreForBusinessApps

Syncs Intune account with Microsoft Store For Business

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeviceAppManagementSyncMicrosoftStoreForBusinessAppsRequest
*/
func (a *DeviceAppManagementActionsApiService) DeviceAppManagementSyncMicrosoftStoreForBusinessApps(ctx _context.Context) ApiDeviceAppManagementSyncMicrosoftStoreForBusinessAppsRequest {
	return ApiDeviceAppManagementSyncMicrosoftStoreForBusinessAppsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DeviceAppManagementActionsApiService) DeviceAppManagementSyncMicrosoftStoreForBusinessAppsExecute(r ApiDeviceAppManagementSyncMicrosoftStoreForBusinessAppsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementActionsApiService.DeviceAppManagementSyncMicrosoftStoreForBusinessApps")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/microsoft.graph.syncMicrosoftStoreForBusinessApps"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementTargetedManagedAppConfigurationsTargetedManagedAppConfigurationAssignRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementActionsApiService
	targetedManagedAppConfigurationId string
	inlineObject74 *InlineObject74
}

func (r ApiDeviceAppManagementTargetedManagedAppConfigurationsTargetedManagedAppConfigurationAssignRequest) InlineObject74(inlineObject74 InlineObject74) ApiDeviceAppManagementTargetedManagedAppConfigurationsTargetedManagedAppConfigurationAssignRequest {
	r.inlineObject74 = &inlineObject74
	return r
}

func (r ApiDeviceAppManagementTargetedManagedAppConfigurationsTargetedManagedAppConfigurationAssignRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementTargetedManagedAppConfigurationsTargetedManagedAppConfigurationAssignExecute(r)
}

/*
DeviceAppManagementTargetedManagedAppConfigurationsTargetedManagedAppConfigurationAssign Invoke action assign

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param targetedManagedAppConfigurationId key: id of targetedManagedAppConfiguration
 @return ApiDeviceAppManagementTargetedManagedAppConfigurationsTargetedManagedAppConfigurationAssignRequest
*/
func (a *DeviceAppManagementActionsApiService) DeviceAppManagementTargetedManagedAppConfigurationsTargetedManagedAppConfigurationAssign(ctx _context.Context, targetedManagedAppConfigurationId string) ApiDeviceAppManagementTargetedManagedAppConfigurationsTargetedManagedAppConfigurationAssignRequest {
	return ApiDeviceAppManagementTargetedManagedAppConfigurationsTargetedManagedAppConfigurationAssignRequest{
		ApiService: a,
		ctx: ctx,
		targetedManagedAppConfigurationId: targetedManagedAppConfigurationId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementActionsApiService) DeviceAppManagementTargetedManagedAppConfigurationsTargetedManagedAppConfigurationAssignExecute(r ApiDeviceAppManagementTargetedManagedAppConfigurationsTargetedManagedAppConfigurationAssignRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementActionsApiService.DeviceAppManagementTargetedManagedAppConfigurationsTargetedManagedAppConfigurationAssign")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/targetedManagedAppConfigurations/{targetedManagedAppConfiguration-id}/microsoft.graph.assign"
	localVarPath = strings.Replace(localVarPath, "{"+"targetedManagedAppConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.targetedManagedAppConfigurationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject74 == nil {
		return nil, reportError("inlineObject74 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject74
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementTargetedManagedAppConfigurationsTargetedManagedAppConfigurationTargetAppsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementActionsApiService
	targetedManagedAppConfigurationId string
	inlineObject75 *InlineObject75
}

func (r ApiDeviceAppManagementTargetedManagedAppConfigurationsTargetedManagedAppConfigurationTargetAppsRequest) InlineObject75(inlineObject75 InlineObject75) ApiDeviceAppManagementTargetedManagedAppConfigurationsTargetedManagedAppConfigurationTargetAppsRequest {
	r.inlineObject75 = &inlineObject75
	return r
}

func (r ApiDeviceAppManagementTargetedManagedAppConfigurationsTargetedManagedAppConfigurationTargetAppsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementTargetedManagedAppConfigurationsTargetedManagedAppConfigurationTargetAppsExecute(r)
}

/*
DeviceAppManagementTargetedManagedAppConfigurationsTargetedManagedAppConfigurationTargetApps Invoke action targetApps

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param targetedManagedAppConfigurationId key: id of targetedManagedAppConfiguration
 @return ApiDeviceAppManagementTargetedManagedAppConfigurationsTargetedManagedAppConfigurationTargetAppsRequest
*/
func (a *DeviceAppManagementActionsApiService) DeviceAppManagementTargetedManagedAppConfigurationsTargetedManagedAppConfigurationTargetApps(ctx _context.Context, targetedManagedAppConfigurationId string) ApiDeviceAppManagementTargetedManagedAppConfigurationsTargetedManagedAppConfigurationTargetAppsRequest {
	return ApiDeviceAppManagementTargetedManagedAppConfigurationsTargetedManagedAppConfigurationTargetAppsRequest{
		ApiService: a,
		ctx: ctx,
		targetedManagedAppConfigurationId: targetedManagedAppConfigurationId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementActionsApiService) DeviceAppManagementTargetedManagedAppConfigurationsTargetedManagedAppConfigurationTargetAppsExecute(r ApiDeviceAppManagementTargetedManagedAppConfigurationsTargetedManagedAppConfigurationTargetAppsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementActionsApiService.DeviceAppManagementTargetedManagedAppConfigurationsTargetedManagedAppConfigurationTargetApps")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/targetedManagedAppConfigurations/{targetedManagedAppConfiguration-id}/microsoft.graph.targetApps"
	localVarPath = strings.Replace(localVarPath, "{"+"targetedManagedAppConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.targetedManagedAppConfigurationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject75 == nil {
		return nil, reportError("inlineObject75 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject75
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementVppTokensVppTokenSyncLicensesRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementActionsApiService
	vppTokenId string
}


func (r ApiDeviceAppManagementVppTokensVppTokenSyncLicensesRequest) Execute() (AnyOfmicrosoftGraphVppToken, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementVppTokensVppTokenSyncLicensesExecute(r)
}

/*
DeviceAppManagementVppTokensVppTokenSyncLicenses Invoke action syncLicenses

Syncs licenses associated with a specific appleVolumePurchaseProgramToken

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param vppTokenId key: id of vppToken
 @return ApiDeviceAppManagementVppTokensVppTokenSyncLicensesRequest
*/
func (a *DeviceAppManagementActionsApiService) DeviceAppManagementVppTokensVppTokenSyncLicenses(ctx _context.Context, vppTokenId string) ApiDeviceAppManagementVppTokensVppTokenSyncLicensesRequest {
	return ApiDeviceAppManagementVppTokensVppTokenSyncLicensesRequest{
		ApiService: a,
		ctx: ctx,
		vppTokenId: vppTokenId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphVppToken
func (a *DeviceAppManagementActionsApiService) DeviceAppManagementVppTokensVppTokenSyncLicensesExecute(r ApiDeviceAppManagementVppTokensVppTokenSyncLicensesRequest) (AnyOfmicrosoftGraphVppToken, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphVppToken
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementActionsApiService.DeviceAppManagementVppTokensVppTokenSyncLicenses")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/vppTokens/{vppToken-id}/microsoft.graph.syncLicenses"
	localVarPath = strings.Replace(localVarPath, "{"+"vppToken-id"+"}", _neturl.PathEscape(parameterToString(r.vppTokenId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
