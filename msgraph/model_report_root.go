/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ReportRoot The resource that represents an instance of Enrollment Failure Reports.
type ReportRoot struct {
	DailyPrintUsageByPrinter *[]MicrosoftGraphPrintUsageByPrinter `json:"dailyPrintUsageByPrinter,omitempty"`
	DailyPrintUsageByUser *[]MicrosoftGraphPrintUsageByUser `json:"dailyPrintUsageByUser,omitempty"`
	MonthlyPrintUsageByPrinter *[]MicrosoftGraphPrintUsageByPrinter `json:"monthlyPrintUsageByPrinter,omitempty"`
	MonthlyPrintUsageByUser *[]MicrosoftGraphPrintUsageByUser `json:"monthlyPrintUsageByUser,omitempty"`
}

// NewReportRoot instantiates a new ReportRoot object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReportRoot() *ReportRoot {
	this := ReportRoot{}
	return &this
}

// NewReportRootWithDefaults instantiates a new ReportRoot object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReportRootWithDefaults() *ReportRoot {
	this := ReportRoot{}
	return &this
}

// GetDailyPrintUsageByPrinter returns the DailyPrintUsageByPrinter field value if set, zero value otherwise.
func (o *ReportRoot) GetDailyPrintUsageByPrinter() []MicrosoftGraphPrintUsageByPrinter {
	if o == nil || o.DailyPrintUsageByPrinter == nil {
		var ret []MicrosoftGraphPrintUsageByPrinter
		return ret
	}
	return *o.DailyPrintUsageByPrinter
}

// GetDailyPrintUsageByPrinterOk returns a tuple with the DailyPrintUsageByPrinter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportRoot) GetDailyPrintUsageByPrinterOk() (*[]MicrosoftGraphPrintUsageByPrinter, bool) {
	if o == nil || o.DailyPrintUsageByPrinter == nil {
		return nil, false
	}
	return o.DailyPrintUsageByPrinter, true
}

// HasDailyPrintUsageByPrinter returns a boolean if a field has been set.
func (o *ReportRoot) HasDailyPrintUsageByPrinter() bool {
	if o != nil && o.DailyPrintUsageByPrinter != nil {
		return true
	}

	return false
}

// SetDailyPrintUsageByPrinter gets a reference to the given []MicrosoftGraphPrintUsageByPrinter and assigns it to the DailyPrintUsageByPrinter field.
func (o *ReportRoot) SetDailyPrintUsageByPrinter(v []MicrosoftGraphPrintUsageByPrinter) {
	o.DailyPrintUsageByPrinter = &v
}

// GetDailyPrintUsageByUser returns the DailyPrintUsageByUser field value if set, zero value otherwise.
func (o *ReportRoot) GetDailyPrintUsageByUser() []MicrosoftGraphPrintUsageByUser {
	if o == nil || o.DailyPrintUsageByUser == nil {
		var ret []MicrosoftGraphPrintUsageByUser
		return ret
	}
	return *o.DailyPrintUsageByUser
}

// GetDailyPrintUsageByUserOk returns a tuple with the DailyPrintUsageByUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportRoot) GetDailyPrintUsageByUserOk() (*[]MicrosoftGraphPrintUsageByUser, bool) {
	if o == nil || o.DailyPrintUsageByUser == nil {
		return nil, false
	}
	return o.DailyPrintUsageByUser, true
}

// HasDailyPrintUsageByUser returns a boolean if a field has been set.
func (o *ReportRoot) HasDailyPrintUsageByUser() bool {
	if o != nil && o.DailyPrintUsageByUser != nil {
		return true
	}

	return false
}

// SetDailyPrintUsageByUser gets a reference to the given []MicrosoftGraphPrintUsageByUser and assigns it to the DailyPrintUsageByUser field.
func (o *ReportRoot) SetDailyPrintUsageByUser(v []MicrosoftGraphPrintUsageByUser) {
	o.DailyPrintUsageByUser = &v
}

// GetMonthlyPrintUsageByPrinter returns the MonthlyPrintUsageByPrinter field value if set, zero value otherwise.
func (o *ReportRoot) GetMonthlyPrintUsageByPrinter() []MicrosoftGraphPrintUsageByPrinter {
	if o == nil || o.MonthlyPrintUsageByPrinter == nil {
		var ret []MicrosoftGraphPrintUsageByPrinter
		return ret
	}
	return *o.MonthlyPrintUsageByPrinter
}

// GetMonthlyPrintUsageByPrinterOk returns a tuple with the MonthlyPrintUsageByPrinter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportRoot) GetMonthlyPrintUsageByPrinterOk() (*[]MicrosoftGraphPrintUsageByPrinter, bool) {
	if o == nil || o.MonthlyPrintUsageByPrinter == nil {
		return nil, false
	}
	return o.MonthlyPrintUsageByPrinter, true
}

// HasMonthlyPrintUsageByPrinter returns a boolean if a field has been set.
func (o *ReportRoot) HasMonthlyPrintUsageByPrinter() bool {
	if o != nil && o.MonthlyPrintUsageByPrinter != nil {
		return true
	}

	return false
}

// SetMonthlyPrintUsageByPrinter gets a reference to the given []MicrosoftGraphPrintUsageByPrinter and assigns it to the MonthlyPrintUsageByPrinter field.
func (o *ReportRoot) SetMonthlyPrintUsageByPrinter(v []MicrosoftGraphPrintUsageByPrinter) {
	o.MonthlyPrintUsageByPrinter = &v
}

// GetMonthlyPrintUsageByUser returns the MonthlyPrintUsageByUser field value if set, zero value otherwise.
func (o *ReportRoot) GetMonthlyPrintUsageByUser() []MicrosoftGraphPrintUsageByUser {
	if o == nil || o.MonthlyPrintUsageByUser == nil {
		var ret []MicrosoftGraphPrintUsageByUser
		return ret
	}
	return *o.MonthlyPrintUsageByUser
}

// GetMonthlyPrintUsageByUserOk returns a tuple with the MonthlyPrintUsageByUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReportRoot) GetMonthlyPrintUsageByUserOk() (*[]MicrosoftGraphPrintUsageByUser, bool) {
	if o == nil || o.MonthlyPrintUsageByUser == nil {
		return nil, false
	}
	return o.MonthlyPrintUsageByUser, true
}

// HasMonthlyPrintUsageByUser returns a boolean if a field has been set.
func (o *ReportRoot) HasMonthlyPrintUsageByUser() bool {
	if o != nil && o.MonthlyPrintUsageByUser != nil {
		return true
	}

	return false
}

// SetMonthlyPrintUsageByUser gets a reference to the given []MicrosoftGraphPrintUsageByUser and assigns it to the MonthlyPrintUsageByUser field.
func (o *ReportRoot) SetMonthlyPrintUsageByUser(v []MicrosoftGraphPrintUsageByUser) {
	o.MonthlyPrintUsageByUser = &v
}

func (o ReportRoot) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DailyPrintUsageByPrinter != nil {
		toSerialize["dailyPrintUsageByPrinter"] = o.DailyPrintUsageByPrinter
	}
	if o.DailyPrintUsageByUser != nil {
		toSerialize["dailyPrintUsageByUser"] = o.DailyPrintUsageByUser
	}
	if o.MonthlyPrintUsageByPrinter != nil {
		toSerialize["monthlyPrintUsageByPrinter"] = o.MonthlyPrintUsageByPrinter
	}
	if o.MonthlyPrintUsageByUser != nil {
		toSerialize["monthlyPrintUsageByUser"] = o.MonthlyPrintUsageByUser
	}
	return json.Marshal(toSerialize)
}

type NullableReportRoot struct {
	value *ReportRoot
	isSet bool
}

func (v NullableReportRoot) Get() *ReportRoot {
	return v.value
}

func (v *NullableReportRoot) Set(val *ReportRoot) {
	v.value = val
	v.isSet = true
}

func (v NullableReportRoot) IsSet() bool {
	return v.isSet
}

func (v *NullableReportRoot) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReportRoot(val *ReportRoot) *NullableReportRoot {
	return &NullableReportRoot{value: val, isSet: true}
}

func (v NullableReportRoot) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReportRoot) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


