/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SettingStateDeviceSummary Device Compilance Policy and Configuration for a Setting State summary
type SettingStateDeviceSummary struct {
	// Device Compliant count for the setting
	CompliantDeviceCount *int32 `json:"compliantDeviceCount,omitempty"`
	// Device conflict error count for the setting
	ConflictDeviceCount *int32 `json:"conflictDeviceCount,omitempty"`
	// Device error count for the setting
	ErrorDeviceCount *int32 `json:"errorDeviceCount,omitempty"`
	// Name of the InstancePath for the setting
	InstancePath NullableString `json:"instancePath,omitempty"`
	// Device NonCompliant count for the setting
	NonCompliantDeviceCount *int32 `json:"nonCompliantDeviceCount,omitempty"`
	// Device Not Applicable count for the setting
	NotApplicableDeviceCount *int32 `json:"notApplicableDeviceCount,omitempty"`
	// Device Compliant count for the setting
	RemediatedDeviceCount *int32 `json:"remediatedDeviceCount,omitempty"`
	// Name of the setting
	SettingName NullableString `json:"settingName,omitempty"`
	// Device Unkown count for the setting
	UnknownDeviceCount *int32 `json:"unknownDeviceCount,omitempty"`
}

// NewSettingStateDeviceSummary instantiates a new SettingStateDeviceSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSettingStateDeviceSummary() *SettingStateDeviceSummary {
	this := SettingStateDeviceSummary{}
	return &this
}

// NewSettingStateDeviceSummaryWithDefaults instantiates a new SettingStateDeviceSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSettingStateDeviceSummaryWithDefaults() *SettingStateDeviceSummary {
	this := SettingStateDeviceSummary{}
	return &this
}

// GetCompliantDeviceCount returns the CompliantDeviceCount field value if set, zero value otherwise.
func (o *SettingStateDeviceSummary) GetCompliantDeviceCount() int32 {
	if o == nil || o.CompliantDeviceCount == nil {
		var ret int32
		return ret
	}
	return *o.CompliantDeviceCount
}

// GetCompliantDeviceCountOk returns a tuple with the CompliantDeviceCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingStateDeviceSummary) GetCompliantDeviceCountOk() (*int32, bool) {
	if o == nil || o.CompliantDeviceCount == nil {
		return nil, false
	}
	return o.CompliantDeviceCount, true
}

// HasCompliantDeviceCount returns a boolean if a field has been set.
func (o *SettingStateDeviceSummary) HasCompliantDeviceCount() bool {
	if o != nil && o.CompliantDeviceCount != nil {
		return true
	}

	return false
}

// SetCompliantDeviceCount gets a reference to the given int32 and assigns it to the CompliantDeviceCount field.
func (o *SettingStateDeviceSummary) SetCompliantDeviceCount(v int32) {
	o.CompliantDeviceCount = &v
}

// GetConflictDeviceCount returns the ConflictDeviceCount field value if set, zero value otherwise.
func (o *SettingStateDeviceSummary) GetConflictDeviceCount() int32 {
	if o == nil || o.ConflictDeviceCount == nil {
		var ret int32
		return ret
	}
	return *o.ConflictDeviceCount
}

// GetConflictDeviceCountOk returns a tuple with the ConflictDeviceCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingStateDeviceSummary) GetConflictDeviceCountOk() (*int32, bool) {
	if o == nil || o.ConflictDeviceCount == nil {
		return nil, false
	}
	return o.ConflictDeviceCount, true
}

// HasConflictDeviceCount returns a boolean if a field has been set.
func (o *SettingStateDeviceSummary) HasConflictDeviceCount() bool {
	if o != nil && o.ConflictDeviceCount != nil {
		return true
	}

	return false
}

// SetConflictDeviceCount gets a reference to the given int32 and assigns it to the ConflictDeviceCount field.
func (o *SettingStateDeviceSummary) SetConflictDeviceCount(v int32) {
	o.ConflictDeviceCount = &v
}

// GetErrorDeviceCount returns the ErrorDeviceCount field value if set, zero value otherwise.
func (o *SettingStateDeviceSummary) GetErrorDeviceCount() int32 {
	if o == nil || o.ErrorDeviceCount == nil {
		var ret int32
		return ret
	}
	return *o.ErrorDeviceCount
}

// GetErrorDeviceCountOk returns a tuple with the ErrorDeviceCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingStateDeviceSummary) GetErrorDeviceCountOk() (*int32, bool) {
	if o == nil || o.ErrorDeviceCount == nil {
		return nil, false
	}
	return o.ErrorDeviceCount, true
}

// HasErrorDeviceCount returns a boolean if a field has been set.
func (o *SettingStateDeviceSummary) HasErrorDeviceCount() bool {
	if o != nil && o.ErrorDeviceCount != nil {
		return true
	}

	return false
}

// SetErrorDeviceCount gets a reference to the given int32 and assigns it to the ErrorDeviceCount field.
func (o *SettingStateDeviceSummary) SetErrorDeviceCount(v int32) {
	o.ErrorDeviceCount = &v
}

// GetInstancePath returns the InstancePath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SettingStateDeviceSummary) GetInstancePath() string {
	if o == nil || o.InstancePath.Get() == nil {
		var ret string
		return ret
	}
	return *o.InstancePath.Get()
}

// GetInstancePathOk returns a tuple with the InstancePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SettingStateDeviceSummary) GetInstancePathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.InstancePath.Get(), o.InstancePath.IsSet()
}

// HasInstancePath returns a boolean if a field has been set.
func (o *SettingStateDeviceSummary) HasInstancePath() bool {
	if o != nil && o.InstancePath.IsSet() {
		return true
	}

	return false
}

// SetInstancePath gets a reference to the given NullableString and assigns it to the InstancePath field.
func (o *SettingStateDeviceSummary) SetInstancePath(v string) {
	o.InstancePath.Set(&v)
}
// SetInstancePathNil sets the value for InstancePath to be an explicit nil
func (o *SettingStateDeviceSummary) SetInstancePathNil() {
	o.InstancePath.Set(nil)
}

// UnsetInstancePath ensures that no value is present for InstancePath, not even an explicit nil
func (o *SettingStateDeviceSummary) UnsetInstancePath() {
	o.InstancePath.Unset()
}

// GetNonCompliantDeviceCount returns the NonCompliantDeviceCount field value if set, zero value otherwise.
func (o *SettingStateDeviceSummary) GetNonCompliantDeviceCount() int32 {
	if o == nil || o.NonCompliantDeviceCount == nil {
		var ret int32
		return ret
	}
	return *o.NonCompliantDeviceCount
}

// GetNonCompliantDeviceCountOk returns a tuple with the NonCompliantDeviceCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingStateDeviceSummary) GetNonCompliantDeviceCountOk() (*int32, bool) {
	if o == nil || o.NonCompliantDeviceCount == nil {
		return nil, false
	}
	return o.NonCompliantDeviceCount, true
}

// HasNonCompliantDeviceCount returns a boolean if a field has been set.
func (o *SettingStateDeviceSummary) HasNonCompliantDeviceCount() bool {
	if o != nil && o.NonCompliantDeviceCount != nil {
		return true
	}

	return false
}

// SetNonCompliantDeviceCount gets a reference to the given int32 and assigns it to the NonCompliantDeviceCount field.
func (o *SettingStateDeviceSummary) SetNonCompliantDeviceCount(v int32) {
	o.NonCompliantDeviceCount = &v
}

// GetNotApplicableDeviceCount returns the NotApplicableDeviceCount field value if set, zero value otherwise.
func (o *SettingStateDeviceSummary) GetNotApplicableDeviceCount() int32 {
	if o == nil || o.NotApplicableDeviceCount == nil {
		var ret int32
		return ret
	}
	return *o.NotApplicableDeviceCount
}

// GetNotApplicableDeviceCountOk returns a tuple with the NotApplicableDeviceCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingStateDeviceSummary) GetNotApplicableDeviceCountOk() (*int32, bool) {
	if o == nil || o.NotApplicableDeviceCount == nil {
		return nil, false
	}
	return o.NotApplicableDeviceCount, true
}

// HasNotApplicableDeviceCount returns a boolean if a field has been set.
func (o *SettingStateDeviceSummary) HasNotApplicableDeviceCount() bool {
	if o != nil && o.NotApplicableDeviceCount != nil {
		return true
	}

	return false
}

// SetNotApplicableDeviceCount gets a reference to the given int32 and assigns it to the NotApplicableDeviceCount field.
func (o *SettingStateDeviceSummary) SetNotApplicableDeviceCount(v int32) {
	o.NotApplicableDeviceCount = &v
}

// GetRemediatedDeviceCount returns the RemediatedDeviceCount field value if set, zero value otherwise.
func (o *SettingStateDeviceSummary) GetRemediatedDeviceCount() int32 {
	if o == nil || o.RemediatedDeviceCount == nil {
		var ret int32
		return ret
	}
	return *o.RemediatedDeviceCount
}

// GetRemediatedDeviceCountOk returns a tuple with the RemediatedDeviceCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingStateDeviceSummary) GetRemediatedDeviceCountOk() (*int32, bool) {
	if o == nil || o.RemediatedDeviceCount == nil {
		return nil, false
	}
	return o.RemediatedDeviceCount, true
}

// HasRemediatedDeviceCount returns a boolean if a field has been set.
func (o *SettingStateDeviceSummary) HasRemediatedDeviceCount() bool {
	if o != nil && o.RemediatedDeviceCount != nil {
		return true
	}

	return false
}

// SetRemediatedDeviceCount gets a reference to the given int32 and assigns it to the RemediatedDeviceCount field.
func (o *SettingStateDeviceSummary) SetRemediatedDeviceCount(v int32) {
	o.RemediatedDeviceCount = &v
}

// GetSettingName returns the SettingName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SettingStateDeviceSummary) GetSettingName() string {
	if o == nil || o.SettingName.Get() == nil {
		var ret string
		return ret
	}
	return *o.SettingName.Get()
}

// GetSettingNameOk returns a tuple with the SettingName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SettingStateDeviceSummary) GetSettingNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SettingName.Get(), o.SettingName.IsSet()
}

// HasSettingName returns a boolean if a field has been set.
func (o *SettingStateDeviceSummary) HasSettingName() bool {
	if o != nil && o.SettingName.IsSet() {
		return true
	}

	return false
}

// SetSettingName gets a reference to the given NullableString and assigns it to the SettingName field.
func (o *SettingStateDeviceSummary) SetSettingName(v string) {
	o.SettingName.Set(&v)
}
// SetSettingNameNil sets the value for SettingName to be an explicit nil
func (o *SettingStateDeviceSummary) SetSettingNameNil() {
	o.SettingName.Set(nil)
}

// UnsetSettingName ensures that no value is present for SettingName, not even an explicit nil
func (o *SettingStateDeviceSummary) UnsetSettingName() {
	o.SettingName.Unset()
}

// GetUnknownDeviceCount returns the UnknownDeviceCount field value if set, zero value otherwise.
func (o *SettingStateDeviceSummary) GetUnknownDeviceCount() int32 {
	if o == nil || o.UnknownDeviceCount == nil {
		var ret int32
		return ret
	}
	return *o.UnknownDeviceCount
}

// GetUnknownDeviceCountOk returns a tuple with the UnknownDeviceCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingStateDeviceSummary) GetUnknownDeviceCountOk() (*int32, bool) {
	if o == nil || o.UnknownDeviceCount == nil {
		return nil, false
	}
	return o.UnknownDeviceCount, true
}

// HasUnknownDeviceCount returns a boolean if a field has been set.
func (o *SettingStateDeviceSummary) HasUnknownDeviceCount() bool {
	if o != nil && o.UnknownDeviceCount != nil {
		return true
	}

	return false
}

// SetUnknownDeviceCount gets a reference to the given int32 and assigns it to the UnknownDeviceCount field.
func (o *SettingStateDeviceSummary) SetUnknownDeviceCount(v int32) {
	o.UnknownDeviceCount = &v
}

func (o SettingStateDeviceSummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CompliantDeviceCount != nil {
		toSerialize["compliantDeviceCount"] = o.CompliantDeviceCount
	}
	if o.ConflictDeviceCount != nil {
		toSerialize["conflictDeviceCount"] = o.ConflictDeviceCount
	}
	if o.ErrorDeviceCount != nil {
		toSerialize["errorDeviceCount"] = o.ErrorDeviceCount
	}
	if o.InstancePath.IsSet() {
		toSerialize["instancePath"] = o.InstancePath.Get()
	}
	if o.NonCompliantDeviceCount != nil {
		toSerialize["nonCompliantDeviceCount"] = o.NonCompliantDeviceCount
	}
	if o.NotApplicableDeviceCount != nil {
		toSerialize["notApplicableDeviceCount"] = o.NotApplicableDeviceCount
	}
	if o.RemediatedDeviceCount != nil {
		toSerialize["remediatedDeviceCount"] = o.RemediatedDeviceCount
	}
	if o.SettingName.IsSet() {
		toSerialize["settingName"] = o.SettingName.Get()
	}
	if o.UnknownDeviceCount != nil {
		toSerialize["unknownDeviceCount"] = o.UnknownDeviceCount
	}
	return json.Marshal(toSerialize)
}

type NullableSettingStateDeviceSummary struct {
	value *SettingStateDeviceSummary
	isSet bool
}

func (v NullableSettingStateDeviceSummary) Get() *SettingStateDeviceSummary {
	return v.value
}

func (v *NullableSettingStateDeviceSummary) Set(val *SettingStateDeviceSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableSettingStateDeviceSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableSettingStateDeviceSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettingStateDeviceSummary(val *SettingStateDeviceSummary) *NullableSettingStateDeviceSummary {
	return &NullableSettingStateDeviceSummary{value: val, isSet: true}
}

func (v NullableSettingStateDeviceSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettingStateDeviceSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


